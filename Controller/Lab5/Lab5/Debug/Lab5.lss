
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000023c0  00002454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  00002470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cd6  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001053  00000000  00000000  0000541e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161a  00000000  00000000  00006471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  00007a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d1  00000000  00000000  0000877c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a71  00000000  00000000  0000914d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bbbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_1>
       8:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__vector_2>
       c:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_3>
      10:	0c 94 76 07 	jmp	0xeec	; 0xeec <__vector_4>
      14:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 50 0e 	jmp	0x1ca0	; 0x1ca0 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_9>
      28:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_10>
      2c:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_11>
      30:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_12>
      34:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_13>
      38:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <__vector_14>
      3c:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__vector_15>
      40:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_16>
      44:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <__vector_17>
      48:	0c 94 cc 0b 	jmp	0x1798	; 0x1798 <__vector_18>
      4c:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_19>
      50:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_20>
      54:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__vector_21>
      58:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 ec       	ldi	r30, 0xC0	; 192
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4c 04 	call	0x898	; 0x898 <main>
      92:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <avr_init>:
#define BAUD 9600
#define MYUBRR FOSC / 16 / BAUD - 1

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init() {
  CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
  CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

  TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
      a4:	e1 e8       	ldi	r30, 0x81	; 129
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8d 60       	ori	r24, 0x0D	; 13
      ac:	80 83       	st	Z, r24

  TCNT1 = 0;
      ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
      b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

  TIMSK1 |= (1 << OCIE1A);
      b6:	ef e6       	ldi	r30, 0x6F	; 111
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	80 83       	st	Z, r24
  OCR1A =
      c0:	e2 ec       	ldi	r30, 0xC2	; 194
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
      c8:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
      194; // f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund

  UBRR0H |= (MYUBRR >> 8);
      cc:	a5 ec       	ldi	r26, 0xC5	; 197
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	8c 91       	ld	r24, X
      d2:	8c 93       	st	X, r24
  UBRR0L |= MYUBRR;
      d4:	a4 ec       	ldi	r26, 0xC4	; 196
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	8c 91       	ld	r24, X
      da:	83 63       	ori	r24, 0x33	; 51
      dc:	8c 93       	st	X, r24
  // Reciever, transmitter, och interrupt.
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
      de:	88 e9       	ldi	r24, 0x98	; 152
      e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
  // 8 Data, 1 stop bit
  UCSR0C = (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret

000000ea <removeFromBridge>:

  return 0;
}

// updateBridgeAmount så man can calla med AFTER i bitParsern.
int removeFromBridge(Controller *self, int arg) {
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	fc 01       	movw	r30, r24
  self->BridgeAmount -= 1;
      f8:	80 89       	ldd	r24, Z+16	; 0x10
      fa:	91 89       	ldd	r25, Z+17	; 0x11
      fc:	a2 89       	ldd	r26, Z+18	; 0x12
      fe:	b3 89       	ldd	r27, Z+19	; 0x13
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	a1 09       	sbc	r26, r1
     104:	b1 09       	sbc	r27, r1
     106:	80 8b       	std	Z+16, r24	; 0x10
     108:	91 8b       	std	Z+17, r25	; 0x11
     10a:	a2 8b       	std	Z+18, r26	; 0x12
     10c:	b3 8b       	std	Z+19, r27	; 0x13
  ASYNC(self->gui, updateDisplay, 0);
     10e:	06 81       	ldd	r16, Z+6	; 0x06
     110:	17 81       	ldd	r17, Z+7	; 0x07
     112:	c1 2c       	mov	r12, r1
     114:	d1 2c       	mov	r13, r1
     116:	0f 2e       	mov	r0, r31
     118:	ff ed       	ldi	r31, 0xDF	; 223
     11a:	ef 2e       	mov	r14, r31
     11c:	f3 e0       	ldi	r31, 0x03	; 3
     11e:	ff 2e       	mov	r15, r31
     120:	f0 2d       	mov	r31, r0
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	a9 01       	movw	r20, r18
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	cb 01       	movw	r24, r22
     12e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  return 0;
}
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	1f 91       	pop	r17
     138:	0f 91       	pop	r16
     13a:	ff 90       	pop	r15
     13c:	ef 90       	pop	r14
     13e:	df 90       	pop	r13
     140:	cf 90       	pop	r12
     142:	08 95       	ret

00000144 <idleState>:

// idleState hanterar bron när den är tom, och bestämmer vilken bil som ska
// passera
int idleState(Controller *self, int arg) {
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	fc 01       	movw	r30, r24
  self->BridgePassedSameDir = 0; // Nollställ.
     156:	14 8a       	std	Z+20, r1	; 0x14
     158:	15 8a       	std	Z+21, r1	; 0x15
     15a:	16 8a       	std	Z+22, r1	; 0x16
     15c:	17 8a       	std	Z+23, r1	; 0x17
  // Bestämmer vilken queue som ska prioriteras baserat på lastBridgeDir.
  int *priorityQueue =
      self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
     15e:	80 8d       	ldd	r24, Z+24	; 0x18
// idleState hanterar bron när den är tom, och bestämmer vilken bil som ska
// passera
int idleState(Controller *self, int arg) {
  self->BridgePassedSameDir = 0; // Nollställ.
  // Bestämmer vilken queue som ska prioriteras baserat på lastBridgeDir.
  int *priorityQueue =
     160:	88 23       	and	r24, r24
     162:	19 f0       	breq	.+6      	; 0x16a <idleState+0x26>
     164:	df 01       	movw	r26, r30
     166:	1c 96       	adiw	r26, 0x0c	; 12
     168:	02 c0       	rjmp	.+4      	; 0x16e <idleState+0x2a>
     16a:	df 01       	movw	r26, r30
     16c:	18 96       	adiw	r26, 0x08	; 8
      self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
  int *secondaryQueue =
     16e:	88 23       	and	r24, r24
     170:	19 f0       	breq	.+6      	; 0x178 <idleState+0x34>
     172:	ef 01       	movw	r28, r30
     174:	28 96       	adiw	r28, 0x08	; 8
     176:	02 c0       	rjmp	.+4      	; 0x17c <idleState+0x38>
     178:	ef 01       	movw	r28, r30
     17a:	2c 96       	adiw	r28, 0x0c	; 12
      self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
  // Om den prioriterade queuen har bilar, ändra riktning och skicka nästa bil.
  if (*priorityQueue > 0) {
     17c:	2d 91       	ld	r18, X+
     17e:	3c 91       	ld	r19, X
     180:	12 16       	cp	r1, r18
     182:	13 06       	cpc	r1, r19
     184:	ac f4       	brge	.+42     	; 0x1b0 <idleState+0x6c>
    self->lastBridgeDir = !self->lastBridgeDir;
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	80 8f       	std	Z+24, r24	; 0x18
    ASYNC(self, dispatchNextCar, 0);
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	fc e0       	ldi	r31, 0x0C	; 12
     194:	ef 2e       	mov	r14, r31
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	8f 01       	movw	r16, r30
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	a9 01       	movw	r20, r18
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	cb 01       	movw	r24, r22
     1aa:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
     1ae:	29 c0       	rjmp	.+82     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
  }
  // Om den andra kön har bilar, skicka nästa bil.
  else if (*secondaryQueue > 0) {
     1b0:	88 81       	ld	r24, Y
     1b2:	99 81       	ldd	r25, Y+1	; 0x01
     1b4:	18 16       	cp	r1, r24
     1b6:	19 06       	cpc	r1, r25
     1b8:	94 f4       	brge	.+36     	; 0x1de <idleState+0x9a>
    ASYNC(self, dispatchNextCar, 0);
     1ba:	c1 2c       	mov	r12, r1
     1bc:	d1 2c       	mov	r13, r1
     1be:	0f 2e       	mov	r0, r31
     1c0:	fc e0       	ldi	r31, 0x0C	; 12
     1c2:	ef 2e       	mov	r14, r31
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	ff 2e       	mov	r15, r31
     1c8:	f0 2d       	mov	r31, r0
     1ca:	8f 01       	movw	r16, r30
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	cb 01       	movw	r24, r22
     1d8:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
     1dc:	12 c0       	rjmp	.+36     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
  }
  // Om inga bilar finns i någon kö, loopa igen.
  else {
    AFTER(MSEC(IDLE_DELAY_MSEC), self, idleState, 0);
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f2 ea       	ldi	r31, 0xA2	; 162
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8f 01       	movw	r16, r30
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	69 e0       	ldi	r22, 0x09	; 9
     1f8:	7d e3       	ldi	r23, 0x3D	; 61
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  }
  return 0;
}
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	df 90       	pop	r13
     214:	cf 90       	pop	r12
     216:	08 95       	ret

00000218 <dispatchNextCar>:
  }
  return 0;
}

// dispatchNextCar avgör om nästa bil kan skickas ut på bron.
int dispatchNextCar(Controller *self, int arg) {
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
  int *currentQueue =
      self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
     224:	fc 01       	movw	r30, r24
     226:	20 8d       	ldd	r18, Z+24	; 0x18
  return 0;
}

// dispatchNextCar avgör om nästa bil kan skickas ut på bron.
int dispatchNextCar(Controller *self, int arg) {
  int *currentQueue =
     228:	22 23       	and	r18, r18
     22a:	11 f0       	breq	.+4      	; 0x230 <dispatchNextCar+0x18>
     22c:	38 96       	adiw	r30, 0x08	; 8
     22e:	02 c0       	rjmp	.+4      	; 0x234 <dispatchNextCar+0x1c>
     230:	fc 01       	movw	r30, r24
     232:	3c 96       	adiw	r30, 0x0c	; 12
      self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
  int *oppositeQueue =
     234:	22 23       	and	r18, r18
     236:	19 f0       	breq	.+6      	; 0x23e <dispatchNextCar+0x26>
     238:	dc 01       	movw	r26, r24
     23a:	1c 96       	adiw	r26, 0x0c	; 12
     23c:	02 c0       	rjmp	.+4      	; 0x242 <dispatchNextCar+0x2a>
     23e:	dc 01       	movw	r26, r24
     240:	18 96       	adiw	r26, 0x08	; 8
      self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
  // Om kön är tom eller för många bilar passerat i samma riktning, vänta på att
  // bron blir tom.
  if (!(*currentQueue) ||
     242:	20 81       	ld	r18, Z
     244:	31 81       	ldd	r19, Z+1	; 0x01
     246:	23 2b       	or	r18, r19
     248:	79 f0       	breq	.+30     	; 0x268 <dispatchNextCar+0x50>
      (self->BridgePassedSameDir >= MAX_PASS_SAME_SIDE && *oppositeQueue > 0)) {
     24a:	fc 01       	movw	r30, r24
     24c:	44 89       	ldd	r20, Z+20	; 0x14
     24e:	55 89       	ldd	r21, Z+21	; 0x15
     250:	66 89       	ldd	r22, Z+22	; 0x16
     252:	77 89       	ldd	r23, Z+23	; 0x17
      self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
  int *oppositeQueue =
      self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
  // Om kön är tom eller för många bilar passerat i samma riktning, vänta på att
  // bron blir tom.
  if (!(*currentQueue) ||
     254:	4a 30       	cpi	r20, 0x0A	; 10
     256:	51 05       	cpc	r21, r1
     258:	61 05       	cpc	r22, r1
     25a:	71 05       	cpc	r23, r1
     25c:	b8 f0       	brcs	.+46     	; 0x28c <dispatchNextCar+0x74>
      (self->BridgePassedSameDir >= MAX_PASS_SAME_SIDE && *oppositeQueue > 0)) {
     25e:	2d 91       	ld	r18, X+
     260:	3c 91       	ld	r19, X
     262:	12 16       	cp	r1, r18
     264:	13 06       	cpc	r1, r19
     266:	94 f4       	brge	.+36     	; 0x28c <dispatchNextCar+0x74>
    ASYNC(self, waitForBridgeClearance, 0);
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	f1 ea       	ldi	r31, 0xA1	; 161
     270:	ef 2e       	mov	r14, r31
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	ff 2e       	mov	r15, r31
     276:	f0 2d       	mov	r31, r0
     278:	8c 01       	movw	r16, r24
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	cb 01       	movw	r24, r22
     286:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
    return 0;
     28a:	11 c0       	rjmp	.+34     	; 0x2ae <dispatchNextCar+0x96>
  }
  // Skicka signal att tända grönt för nästa bil.
  ASYNC(self, signalGreenLight, 0);
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	0f 2e       	mov	r0, r31
     292:	f0 e6       	ldi	r31, 0x60	; 96
     294:	ef 2e       	mov	r14, r31
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	8c 01       	movw	r16, r24
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	a9 01       	movw	r20, r18
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	cb 01       	movw	r24, r22
     2aa:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  return 0;
}
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <signalGreenLight>:

// signalGreenLight tänder ljuset åt rätt riktning.
int signalGreenLight(Controller *self, int arg) {
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
  int bits = self->lastBridgeDir ? NORTH_GREEN : SOUTH_GREEN;
     2d2:	88 8d       	ldd	r24, Y+24	; 0x18
     2d4:	88 23       	and	r24, r24
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <signalGreenLight+0x20>
     2d8:	cc 24       	eor	r12, r12
     2da:	c3 94       	inc	r12
     2dc:	d1 2c       	mov	r13, r1
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <signalGreenLight+0x28>
     2e0:	68 94       	set
     2e2:	cc 24       	eor	r12, r12
     2e4:	c2 f8       	bld	r12, 2
     2e6:	d1 2c       	mov	r13, r1
  ASYNC(self->serialCom, USARTtransmit, bits); // Skicka signal för rätt ljus.
     2e8:	0c 81       	ldd	r16, Y+4	; 0x04
     2ea:	1d 81       	ldd	r17, Y+5	; 0x05
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fe e8       	ldi	r31, 0x8E	; 142
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	cb 01       	movw	r24, r22
     304:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>

  // Vänta en kort stund innan bilen får köra in.
  AFTER(MSEC(GREEN_LIGHT_TIME_MSEC), self, monitorCarEntry, 0);
     308:	c1 2c       	mov	r12, r1
     30a:	d1 2c       	mov	r13, r1
     30c:	0f 2e       	mov	r0, r31
     30e:	fa ed       	ldi	r31, 0xDA	; 218
     310:	ef 2e       	mov	r14, r31
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	ff 2e       	mov	r15, r31
     316:	f0 2d       	mov	r31, r0
     318:	8e 01       	movw	r16, r28
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	69 e0       	ldi	r22, 0x09	; 9
     322:	7d e3       	ldi	r23, 0x3D	; 61
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  return 0;
}
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	df 90       	pop	r13
     33e:	cf 90       	pop	r12
     340:	08 95       	ret

00000342 <waitForBridgeClearance>:
  }
  return 0;
}

// Väntar tills bron är tom innan en ny bil kan skickas.
int waitForBridgeClearance(Controller *self, int arg) {
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	8c 01       	movw	r16, r24
  if (self->BridgeAmount == 0) { // Om bron är tom, gå till idle.
     350:	fc 01       	movw	r30, r24
     352:	80 89       	ldd	r24, Z+16	; 0x10
     354:	91 89       	ldd	r25, Z+17	; 0x11
     356:	a2 89       	ldd	r26, Z+18	; 0x12
     358:	b3 89       	ldd	r27, Z+19	; 0x13
     35a:	89 2b       	or	r24, r25
     35c:	8a 2b       	or	r24, r26
     35e:	8b 2b       	or	r24, r27
     360:	89 f4       	brne	.+34     	; 0x384 <waitForBridgeClearance+0x42>
    ASYNC(self, idleState, 0);
     362:	c1 2c       	mov	r12, r1
     364:	d1 2c       	mov	r13, r1
     366:	0f 2e       	mov	r0, r31
     368:	f2 ea       	ldi	r31, 0xA2	; 162
     36a:	ef 2e       	mov	r14, r31
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ff 2e       	mov	r15, r31
     370:	f0 2d       	mov	r31, r0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	a9 01       	movw	r20, r18
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	cb 01       	movw	r24, r22
     37e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <waitForBridgeClearance+0x60>
  } else {
    AFTER(CURRENT_OFFSET(), self, waitForBridgeClearance,
     384:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <CURRENT_OFFSET>
     388:	c1 2c       	mov	r12, r1
     38a:	d1 2c       	mov	r13, r1
     38c:	0f 2e       	mov	r0, r31
     38e:	f1 ea       	ldi	r31, 0xA1	; 161
     390:	ef 2e       	mov	r14, r31
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	ff 2e       	mov	r15, r31
     396:	f0 2d       	mov	r31, r0
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
          0); // Kontrollera igen senare. Den callar sig själv, om inte har så
              // kommer den drifta eftersom AFTER tiden ökar.
  }
  return 0;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <monitorCarEntry>:
  AFTER(MSEC(GREEN_LIGHT_TIME_MSEC), self, monitorCarEntry, 0);
  return 0;
}

// monitorCarEntry ser till att en bil kör in på bron efter att ha fått grönt.
int monitorCarEntry(Controller *self, int arg) {
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
  if (self->BridgeAmount > 0) { // Om en bil har kört in på bron.
     3c6:	88 89       	ldd	r24, Y+16	; 0x10
     3c8:	99 89       	ldd	r25, Y+17	; 0x11
     3ca:	aa 89       	ldd	r26, Y+18	; 0x12
     3cc:	bb 89       	ldd	r27, Y+19	; 0x13
     3ce:	89 2b       	or	r24, r25
     3d0:	8a 2b       	or	r24, r26
     3d2:	8b 2b       	or	r24, r27
     3d4:	89 f1       	breq	.+98     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
    int bits = self->lastBridgeDir ? NORTH_RED : SOUTH_RED;
     3d6:	88 8d       	ldd	r24, Y+24	; 0x18
     3d8:	88 23       	and	r24, r24
     3da:	29 f0       	breq	.+10     	; 0x3e6 <monitorCarEntry+0x32>
     3dc:	68 94       	set
     3de:	cc 24       	eor	r12, r12
     3e0:	c1 f8       	bld	r12, 1
     3e2:	d1 2c       	mov	r13, r1
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <monitorCarEntry+0x3a>
     3e6:	68 94       	set
     3e8:	cc 24       	eor	r12, r12
     3ea:	c3 f8       	bld	r12, 3
     3ec:	d1 2c       	mov	r13, r1
    ASYNC(self->serialCom, USARTtransmit,
     3ee:	0c 81       	ldd	r16, Y+4	; 0x04
     3f0:	1d 81       	ldd	r17, Y+5	; 0x05
     3f2:	0f 2e       	mov	r0, r31
     3f4:	fe e8       	ldi	r31, 0x8E	; 142
     3f6:	ef 2e       	mov	r14, r31
     3f8:	f4 e0       	ldi	r31, 0x04	; 4
     3fa:	ff 2e       	mov	r15, r31
     3fc:	f0 2d       	mov	r31, r0
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	cb 01       	movw	r24, r22
     40a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
          bits); // Tänd rött ljus för att stoppa nästa bil.
    AFTER(CURRENT_OFFSET() + SEC(TIME_QUEUE), self, dispatchNextCar,
     40e:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <CURRENT_OFFSET>
     412:	6e 5e       	subi	r22, 0xEE	; 238
     414:	75 48       	sbci	r23, 0x85	; 133
     416:	8f 4f       	sbci	r24, 0xFF	; 255
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	c1 2c       	mov	r12, r1
     41c:	d1 2c       	mov	r13, r1
     41e:	0f 2e       	mov	r0, r31
     420:	fc e0       	ldi	r31, 0x0C	; 12
     422:	ef 2e       	mov	r14, r31
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	ff 2e       	mov	r15, r31
     428:	f0 2d       	mov	r31, r0
     42a:	8e 01       	movw	r16, r28
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
     436:	11 c0       	rjmp	.+34     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
          0); // Vänta innan nästa bil skickas. Ha CURRENT_OFFSET() så det
              // alltid är tiden från dess monitorCarEntry's call.
  } else {
    ASYNC(self, monitorCarEntry,
     438:	c1 2c       	mov	r12, r1
     43a:	d1 2c       	mov	r13, r1
     43c:	0f 2e       	mov	r0, r31
     43e:	fa ed       	ldi	r31, 0xDA	; 218
     440:	ef 2e       	mov	r14, r31
     442:	f1 e0       	ldi	r31, 0x01	; 1
     444:	ff 2e       	mov	r15, r31
     446:	f0 2d       	mov	r31, r0
     448:	8e 01       	movw	r16, r28
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	a9 01       	movw	r20, r18
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	cb 01       	movw	r24, r22
     456:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
          0); // Kontrollera igen om ingen bil har kört in.
  }
  return 0;
}
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	1f 91       	pop	r17
     464:	0f 91       	pop	r16
     466:	ff 90       	pop	r15
     468:	ef 90       	pop	r14
     46a:	df 90       	pop	r13
     46c:	cf 90       	pop	r12
     46e:	08 95       	ret

00000470 <bitParser>:
#include "Controller.h"

// Bitparser tolkar data från USART och uppdaterar queue och bron.
int bitParser(Controller *self, int arg) {
     470:	bf 92       	push	r11
     472:	cf 92       	push	r12
     474:	df 92       	push	r13
     476:	ef 92       	push	r14
     478:	ff 92       	push	r15
     47a:	0f 93       	push	r16
     47c:	1f 93       	push	r17
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	ec 01       	movw	r28, r24
  int sensor =
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	67 e9       	ldi	r22, 0x97	; 151
     48a:	74 e0       	ldi	r23, 0x04	; 4
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sync>
     494:	b8 2e       	mov	r11, r24
      SYNC(self->serialCom, USARTreceive, 0); // Hämtar datan från USART:en.
  // Om en bil kommer från NORTH, öka NORTH.
  if (sensor & NORTH_ARRIVAL) {
     496:	80 ff       	sbrs	r24, 0
     498:	1d c0       	rjmp	.+58     	; 0x4d4 <bitParser+0x64>
    self->NorthQueue++;
     49a:	88 85       	ldd	r24, Y+8	; 0x08
     49c:	99 85       	ldd	r25, Y+9	; 0x09
     49e:	aa 85       	ldd	r26, Y+10	; 0x0a
     4a0:	bb 85       	ldd	r27, Y+11	; 0x0b
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	a1 1d       	adc	r26, r1
     4a6:	b1 1d       	adc	r27, r1
     4a8:	88 87       	std	Y+8, r24	; 0x08
     4aa:	99 87       	std	Y+9, r25	; 0x09
     4ac:	aa 87       	std	Y+10, r26	; 0x0a
     4ae:	bb 87       	std	Y+11, r27	; 0x0b
    ASYNC(self->gui, updateDisplay, 0);
     4b0:	0e 81       	ldd	r16, Y+6	; 0x06
     4b2:	1f 81       	ldd	r17, Y+7	; 0x07
     4b4:	c1 2c       	mov	r12, r1
     4b6:	d1 2c       	mov	r13, r1
     4b8:	0f 2e       	mov	r0, r31
     4ba:	ff ed       	ldi	r31, 0xDF	; 223
     4bc:	ef 2e       	mov	r14, r31
     4be:	f3 e0       	ldi	r31, 0x03	; 3
     4c0:	ff 2e       	mov	r15, r31
     4c2:	f0 2d       	mov	r31, r0
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	a9 01       	movw	r20, r18
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	cb 01       	movw	r24, r22
     4d0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  }
  // Om en bil kommer från SOUTH, öka SOUTH.
  if (sensor & SOUTH_ARRIVAL) {
     4d4:	b2 fe       	sbrs	r11, 2
     4d6:	1d c0       	rjmp	.+58     	; 0x512 <__stack+0x13>
    self->SouthQueue++;
     4d8:	8c 85       	ldd	r24, Y+12	; 0x0c
     4da:	9d 85       	ldd	r25, Y+13	; 0x0d
     4dc:	ae 85       	ldd	r26, Y+14	; 0x0e
     4de:	bf 85       	ldd	r27, Y+15	; 0x0f
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	a1 1d       	adc	r26, r1
     4e4:	b1 1d       	adc	r27, r1
     4e6:	8c 87       	std	Y+12, r24	; 0x0c
     4e8:	9d 87       	std	Y+13, r25	; 0x0d
     4ea:	ae 87       	std	Y+14, r26	; 0x0e
     4ec:	bf 87       	std	Y+15, r27	; 0x0f
    ASYNC(self->gui, updateDisplay, 0);
     4ee:	0e 81       	ldd	r16, Y+6	; 0x06
     4f0:	1f 81       	ldd	r17, Y+7	; 0x07
     4f2:	c1 2c       	mov	r12, r1
     4f4:	d1 2c       	mov	r13, r1
     4f6:	0f 2e       	mov	r0, r31
     4f8:	ff ed       	ldi	r31, 0xDF	; 223
     4fa:	ef 2e       	mov	r14, r31
     4fc:	f3 e0       	ldi	r31, 0x03	; 3
     4fe:	ff 2e       	mov	r15, r31
     500:	f0 2d       	mov	r31, r0
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	a9 01       	movw	r20, r18
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	cb 01       	movw	r24, r22
     50e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  }
  // Om en bil kör in på bron från NORTH.
  if (sensor & NORTH_ENTRY) {
     512:	b1 fe       	sbrs	r11, 1
     514:	43 c0       	rjmp	.+134    	; 0x59c <__stack+0x9d>
    self->NorthQueue--;          // Minska NorthQueue.
     516:	88 85       	ldd	r24, Y+8	; 0x08
     518:	99 85       	ldd	r25, Y+9	; 0x09
     51a:	aa 85       	ldd	r26, Y+10	; 0x0a
     51c:	bb 85       	ldd	r27, Y+11	; 0x0b
     51e:	01 97       	sbiw	r24, 0x01	; 1
     520:	a1 09       	sbc	r26, r1
     522:	b1 09       	sbc	r27, r1
     524:	88 87       	std	Y+8, r24	; 0x08
     526:	99 87       	std	Y+9, r25	; 0x09
     528:	aa 87       	std	Y+10, r26	; 0x0a
     52a:	bb 87       	std	Y+11, r27	; 0x0b
    self->BridgeAmount++;        // Öka bilar på bron.
     52c:	88 89       	ldd	r24, Y+16	; 0x10
     52e:	99 89       	ldd	r25, Y+17	; 0x11
     530:	aa 89       	ldd	r26, Y+18	; 0x12
     532:	bb 89       	ldd	r27, Y+19	; 0x13
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	a1 1d       	adc	r26, r1
     538:	b1 1d       	adc	r27, r1
     53a:	88 8b       	std	Y+16, r24	; 0x10
     53c:	99 8b       	std	Y+17, r25	; 0x11
     53e:	aa 8b       	std	Y+18, r26	; 0x12
     540:	bb 8b       	std	Y+19, r27	; 0x13
    self->BridgePassedSameDir++; // Öka hur många bilar som har åkt i samma
     542:	8c 89       	ldd	r24, Y+20	; 0x14
     544:	9d 89       	ldd	r25, Y+21	; 0x15
     546:	ae 89       	ldd	r26, Y+22	; 0x16
     548:	bf 89       	ldd	r27, Y+23	; 0x17
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	a1 1d       	adc	r26, r1
     54e:	b1 1d       	adc	r27, r1
     550:	8c 8b       	std	Y+20, r24	; 0x14
     552:	9d 8b       	std	Y+21, r25	; 0x15
     554:	ae 8b       	std	Y+22, r26	; 0x16
     556:	bf 8b       	std	Y+23, r27	; 0x17
                                 // riktning.
    ASYNC(self->gui, updateDisplay, 0);
     558:	0e 81       	ldd	r16, Y+6	; 0x06
     55a:	1f 81       	ldd	r17, Y+7	; 0x07
     55c:	c1 2c       	mov	r12, r1
     55e:	d1 2c       	mov	r13, r1
     560:	0f 2e       	mov	r0, r31
     562:	ff ed       	ldi	r31, 0xDF	; 223
     564:	ef 2e       	mov	r14, r31
     566:	f3 e0       	ldi	r31, 0x03	; 3
     568:	ff 2e       	mov	r15, r31
     56a:	f0 2d       	mov	r31, r0
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	a9 01       	movw	r20, r18
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	cb 01       	movw	r24, r22
     578:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
    AFTER(SEC(BRIDGE_TIME), self, removeFromBridge,
     57c:	0f 2e       	mov	r0, r31
     57e:	f5 e7       	ldi	r31, 0x75	; 117
     580:	ef 2e       	mov	r14, r31
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ff 2e       	mov	r15, r31
     586:	f0 2d       	mov	r31, r0
     588:	8e 01       	movw	r16, r28
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	a9 01       	movw	r20, r18
     590:	6a e5       	ldi	r22, 0x5A	; 90
     592:	72 e6       	ldi	r23, 0x62	; 98
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
          0); // Minska antal bilar på bron när den kört över. (Tidsbaserat).
  }
  // Om en bil kör in på bron från SOUTH.
  if (sensor & SOUTH_ENTRY) {
     59c:	b3 fe       	sbrs	r11, 3
     59e:	43 c0       	rjmp	.+134    	; 0x626 <__stack+0x127>
    self->SouthQueue--;          // Minska SouthQueue
     5a0:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a2:	9d 85       	ldd	r25, Y+13	; 0x0d
     5a4:	ae 85       	ldd	r26, Y+14	; 0x0e
     5a6:	bf 85       	ldd	r27, Y+15	; 0x0f
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	a1 09       	sbc	r26, r1
     5ac:	b1 09       	sbc	r27, r1
     5ae:	8c 87       	std	Y+12, r24	; 0x0c
     5b0:	9d 87       	std	Y+13, r25	; 0x0d
     5b2:	ae 87       	std	Y+14, r26	; 0x0e
     5b4:	bf 87       	std	Y+15, r27	; 0x0f
    self->BridgeAmount++;        // Öka bilar på bron.
     5b6:	88 89       	ldd	r24, Y+16	; 0x10
     5b8:	99 89       	ldd	r25, Y+17	; 0x11
     5ba:	aa 89       	ldd	r26, Y+18	; 0x12
     5bc:	bb 89       	ldd	r27, Y+19	; 0x13
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	a1 1d       	adc	r26, r1
     5c2:	b1 1d       	adc	r27, r1
     5c4:	88 8b       	std	Y+16, r24	; 0x10
     5c6:	99 8b       	std	Y+17, r25	; 0x11
     5c8:	aa 8b       	std	Y+18, r26	; 0x12
     5ca:	bb 8b       	std	Y+19, r27	; 0x13
    self->BridgePassedSameDir++; // Öka hur många bilar som har åkt i samma
     5cc:	8c 89       	ldd	r24, Y+20	; 0x14
     5ce:	9d 89       	ldd	r25, Y+21	; 0x15
     5d0:	ae 89       	ldd	r26, Y+22	; 0x16
     5d2:	bf 89       	ldd	r27, Y+23	; 0x17
     5d4:	01 96       	adiw	r24, 0x01	; 1
     5d6:	a1 1d       	adc	r26, r1
     5d8:	b1 1d       	adc	r27, r1
     5da:	8c 8b       	std	Y+20, r24	; 0x14
     5dc:	9d 8b       	std	Y+21, r25	; 0x15
     5de:	ae 8b       	std	Y+22, r26	; 0x16
     5e0:	bf 8b       	std	Y+23, r27	; 0x17
                                 // riktning.
    ASYNC(self->gui, updateDisplay, 0);
     5e2:	0e 81       	ldd	r16, Y+6	; 0x06
     5e4:	1f 81       	ldd	r17, Y+7	; 0x07
     5e6:	c1 2c       	mov	r12, r1
     5e8:	d1 2c       	mov	r13, r1
     5ea:	0f 2e       	mov	r0, r31
     5ec:	ff ed       	ldi	r31, 0xDF	; 223
     5ee:	ef 2e       	mov	r14, r31
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	ff 2e       	mov	r15, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	a9 01       	movw	r20, r18
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	cb 01       	movw	r24, r22
     602:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
    AFTER(SEC(BRIDGE_TIME), self, removeFromBridge,
     606:	0f 2e       	mov	r0, r31
     608:	f5 e7       	ldi	r31, 0x75	; 117
     60a:	ef 2e       	mov	r14, r31
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	ff 2e       	mov	r15, r31
     610:	f0 2d       	mov	r31, r0
     612:	8e 01       	movw	r16, r28
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	a9 01       	movw	r20, r18
     61a:	6a e5       	ldi	r22, 0x5A	; 90
     61c:	72 e6       	ldi	r23, 0x62	; 98
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
          0); // Minska antal bilar på bron när den kört över. (Tidsbaserat).
  }

  return 0;
}
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	08 95       	ret

0000063e <getNorthQueue>:
          0); // Kontrollera igen om ingen bil har kört in.
  }
  return 0;
}

int getNorthQueue(Controller *self, int arg) { return self->NorthQueue; }
     63e:	fc 01       	movw	r30, r24
     640:	80 85       	ldd	r24, Z+8	; 0x08
     642:	91 85       	ldd	r25, Z+9	; 0x09
     644:	08 95       	ret

00000646 <getSouthQueue>:

int getSouthQueue(Controller *self, int arg) { return self->SouthQueue; }
     646:	fc 01       	movw	r30, r24
     648:	84 85       	ldd	r24, Z+12	; 0x0c
     64a:	95 85       	ldd	r25, Z+13	; 0x0d
     64c:	08 95       	ret

0000064e <getBridgeAmount>:

int getBridgeAmount(Controller *self, int arg) { return self->BridgeAmount; }
     64e:	fc 01       	movw	r30, r24
     650:	80 89       	ldd	r24, Z+16	; 0x10
     652:	91 89       	ldd	r25, Z+17	; 0x11
     654:	08 95       	ret

00000656 <lcd_init>:
// Starta LCD
void lcd_init() {
  // LCD Control Register A:
  // Turn on LCD (LCDEN = 1)
  // Low Power Waveform (LCDAB = 1)
  LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     656:	80 ec       	ldi	r24, 0xC0	; 192
     658:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  // 1/3 Bias (LCD2B = 0)
  // 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
  // 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
  // Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
  // Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
  LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     65c:	87 eb       	ldi	r24, 0xB7	; 183
     65e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

  // LCD Contrast Control Register:
  // Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
  // Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0
  // = 1)
  LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     662:	8f e0       	ldi	r24, 0x0F	; 15
     664:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     668:	08 95       	ret

0000066a <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
  if (pos < 0 || pos > 5)
     66a:	66 30       	cpi	r22, 0x06	; 6
     66c:	71 05       	cpc	r23, r1
     66e:	08 f0       	brcs	.+2      	; 0x672 <writeChar+0x8>
     670:	6b c0       	rjmp	.+214    	; 0x748 <writeChar+0xde>
    return;                     // Checka att position är korrekt.
  uint16_t segments = 0x0000;   // Default är tom.
  if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     672:	90 ed       	ldi	r25, 0xD0	; 208
     674:	98 0f       	add	r25, r24
     676:	9a 30       	cpi	r25, 0x0A	; 10
     678:	50 f4       	brcc	.+20     	; 0x68e <writeChar+0x24>
    segments =
        font[ch -
     67a:	e8 2f       	mov	r30, r24
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	f0 97       	sbiw	r30, 0x30	; 48
void writeChar(char ch, int pos) {
  if (pos < 0 || pos > 5)
    return;                     // Checka att position är korrekt.
  uint16_t segments = 0x0000;   // Default är tom.
  if (ch >= '0' && ch <= '9') { // Checka om det är siffra
    segments =
     680:	ee 0f       	add	r30, r30
     682:	ff 1f       	adc	r31, r31
     684:	e8 5f       	subi	r30, 0xF8	; 248
     686:	fe 4f       	sbci	r31, 0xFE	; 254
     688:	80 81       	ld	r24, Z
     68a:	91 81       	ldd	r25, Z+1	; 0x01
     68c:	02 c0       	rjmp	.+4      	; 0x692 <writeChar+0x28>

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
  if (pos < 0 || pos > 5)
    return;                     // Checka att position är korrekt.
  uint16_t segments = 0x0000;   // Default är tom.
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
             '0']; // Hämta font data för siffra array positionen, alltså t.ex
                   // ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
  }
  uint8_t *base =
      (uint8_t *)&LCDDR0 +
      pos / 2; // Beräkna basregistret för positionen. Displayen använder
     692:	fb 01       	movw	r30, r22
     694:	77 23       	and	r23, r23
     696:	0c f4       	brge	.+2      	; 0x69a <writeChar+0x30>
     698:	31 96       	adiw	r30, 0x01	; 1
     69a:	f5 95       	asr	r31
     69c:	e7 95       	ror	r30
    segments =
        font[ch -
             '0']; // Hämta font data för siffra array positionen, alltså t.ex
                   // ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
  }
  uint8_t *base =
     69e:	e4 51       	subi	r30, 0x14	; 20
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
  // av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos =
  // 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars
  // kan testa utan det fungerar säkert. Beräkna offset alltså low
  // eller high nibble för registret om den är jämn eller ojämn.
  // pos = 0,2,4 blir till 0 offset.
  int offset = (pos % 2) * 4;
     6a2:	61 70       	andi	r22, 0x01	; 1
     6a4:	70 78       	andi	r23, 0x80	; 128
     6a6:	77 23       	and	r23, r23
     6a8:	34 f4       	brge	.+12     	; 0x6b6 <writeChar+0x4c>
     6aa:	61 50       	subi	r22, 0x01	; 1
     6ac:	71 09       	sbc	r23, r1
     6ae:	6e 6f       	ori	r22, 0xFE	; 254
     6b0:	7f 6f       	ori	r23, 0xFF	; 255
     6b2:	6f 5f       	subi	r22, 0xFF	; 255
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	66 0f       	add	r22, r22
     6b8:	77 1f       	adc	r23, r23
     6ba:	66 0f       	add	r22, r22
     6bc:	77 1f       	adc	r23, r23

  base[0] = (base[0] & ~(0xF << offset)) |
     6be:	30 81       	ld	r19, Z
     6c0:	4f e0       	ldi	r20, 0x0F	; 15
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	06 2e       	mov	r0, r22
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <writeChar+0x62>
     6c8:	44 0f       	add	r20, r20
     6ca:	55 1f       	adc	r21, r21
     6cc:	0a 94       	dec	r0
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <writeChar+0x5e>
     6d0:	24 2f       	mov	r18, r20
     6d2:	20 95       	com	r18
            ((segments & 0xF) << offset); // Uppdatera nibble i första registret
     6d4:	ac 01       	movw	r20, r24
     6d6:	4f 70       	andi	r20, 0x0F	; 15
     6d8:	55 27       	eor	r21, r21
     6da:	06 2e       	mov	r0, r22
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <writeChar+0x78>
     6de:	44 0f       	add	r20, r20
     6e0:	55 1f       	adc	r21, r21
     6e2:	0a 94       	dec	r0
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <writeChar+0x74>
  // kan testa utan det fungerar säkert. Beräkna offset alltså low
  // eller high nibble för registret om den är jämn eller ojämn.
  // pos = 0,2,4 blir till 0 offset.
  int offset = (pos % 2) * 4;

  base[0] = (base[0] & ~(0xF << offset)) |
     6e6:	32 23       	and	r19, r18
     6e8:	43 2b       	or	r20, r19
     6ea:	40 83       	st	Z, r20
            ((segments & 0xF) << offset); // Uppdatera nibble i första registret
  base[5] = (base[5] & ~(0xF << offset)) |
     6ec:	35 81       	ldd	r19, Z+5	; 0x05
            (((segments >> 4) & 0xF)
     6ee:	ac 01       	movw	r20, r24
     6f0:	52 95       	swap	r21
     6f2:	42 95       	swap	r20
     6f4:	4f 70       	andi	r20, 0x0F	; 15
     6f6:	45 27       	eor	r20, r21
     6f8:	5f 70       	andi	r21, 0x0F	; 15
     6fa:	45 27       	eor	r20, r21
     6fc:	4f 70       	andi	r20, 0x0F	; 15
     6fe:	55 27       	eor	r21, r21
             << offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
     700:	06 2e       	mov	r0, r22
     702:	02 c0       	rjmp	.+4      	; 0x708 <writeChar+0x9e>
     704:	44 0f       	add	r20, r20
     706:	55 1f       	adc	r21, r21
     708:	0a 94       	dec	r0
     70a:	e2 f7       	brpl	.-8      	; 0x704 <writeChar+0x9a>
  // pos = 0,2,4 blir till 0 offset.
  int offset = (pos % 2) * 4;

  base[0] = (base[0] & ~(0xF << offset)) |
            ((segments & 0xF) << offset); // Uppdatera nibble i första registret
  base[5] = (base[5] & ~(0xF << offset)) |
     70c:	32 23       	and	r19, r18
     70e:	43 2b       	or	r20, r19
     710:	45 83       	std	Z+5, r20	; 0x05
            (((segments >> 4) & 0xF)
             << offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
  // pointer offset med base[5].
  base[10] =
      (base[10] & ~(0xF << offset)) |
     712:	32 85       	ldd	r19, Z+10	; 0x0a
      (((segments >> 8) & 0xF)
     714:	49 2f       	mov	r20, r25
     716:	55 27       	eor	r21, r21
     718:	4f 70       	andi	r20, 0x0F	; 15
     71a:	55 27       	eor	r21, r21
       << offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
     71c:	06 2e       	mov	r0, r22
     71e:	02 c0       	rjmp	.+4      	; 0x724 <writeChar+0xba>
     720:	44 0f       	add	r20, r20
     722:	55 1f       	adc	r21, r21
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <writeChar+0xb6>
            ((segments & 0xF) << offset); // Uppdatera nibble i första registret
  base[5] = (base[5] & ~(0xF << offset)) |
            (((segments >> 4) & 0xF)
             << offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
  // pointer offset med base[5].
  base[10] =
     728:	32 23       	and	r19, r18
     72a:	43 2b       	or	r20, r19
     72c:	42 87       	std	Z+10, r20	; 0x0a
      (base[10] & ~(0xF << offset)) |
      (((segments >> 8) & 0xF)
       << offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
  // sedan 00001111, och bitwise AND vilket gör de 4 bits som
  // har bestämts med offset till 0000.
  base[15] = (base[15] & ~(0xF << offset)) |
     72e:	37 85       	ldd	r19, Z+15	; 0x0f
             (((segments >> 12) & 0xF)
     730:	89 2f       	mov	r24, r25
     732:	99 27       	eor	r25, r25
     734:	82 95       	swap	r24
     736:	8f 70       	andi	r24, 0x0F	; 15
              << offset); // Sedan segments & 0xF blir 000000000000xxxx, AND med
     738:	02 c0       	rjmp	.+4      	; 0x73e <writeChar+0xd4>
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	6a 95       	dec	r22
     740:	e2 f7       	brpl	.-8      	; 0x73a <writeChar+0xd0>
      (base[10] & ~(0xF << offset)) |
      (((segments >> 8) & 0xF)
       << offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
  // sedan 00001111, och bitwise AND vilket gör de 4 bits som
  // har bestämts med offset till 0000.
  base[15] = (base[15] & ~(0xF << offset)) |
     742:	23 23       	and	r18, r19
     744:	82 2b       	or	r24, r18
     746:	87 87       	std	Z+15, r24	; 0x0f
     748:	08 95       	ret

0000074a <printAt>:
                          // vänster om det behövs. Sedan | OR för att kombinera
                          // med hälften tom och hälften redan fylld. Alltså
                          // 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     74a:	8f 92       	push	r8
     74c:	9f 92       	push	r9
     74e:	af 92       	push	r10
     750:	bf 92       	push	r11
     752:	cf 92       	push	r12
     754:	df 92       	push	r13
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	4b 01       	movw	r8, r22
     760:	5c 01       	movw	r10, r24
     762:	ea 01       	movw	r28, r20
  int pp = pos;
  writeChar((num % 100) / 10 + '0', pp);
     764:	24 e6       	ldi	r18, 0x64	; 100
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divmodsi4>
     770:	0f 2e       	mov	r0, r31
     772:	fa e0       	ldi	r31, 0x0A	; 10
     774:	cf 2e       	mov	r12, r31
     776:	d1 2c       	mov	r13, r1
     778:	e1 2c       	mov	r14, r1
     77a:	f1 2c       	mov	r15, r1
     77c:	f0 2d       	mov	r31, r0
     77e:	a7 01       	movw	r20, r14
     780:	96 01       	movw	r18, r12
     782:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divmodsi4>
     786:	be 01       	movw	r22, r28
     788:	80 e3       	ldi	r24, 0x30	; 48
     78a:	82 0f       	add	r24, r18
     78c:	0e 94 35 03 	call	0x66a	; 0x66a <writeChar>
  pp++;
     790:	21 96       	adiw	r28, 0x01	; 1
  writeChar(num % 10 + '0', pp);
     792:	c5 01       	movw	r24, r10
     794:	b4 01       	movw	r22, r8
     796:	a7 01       	movw	r20, r14
     798:	96 01       	movw	r18, r12
     79a:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__divmodsi4>
     79e:	86 2f       	mov	r24, r22
     7a0:	be 01       	movw	r22, r28
     7a2:	80 5d       	subi	r24, 0xD0	; 208
     7a4:	0e 94 35 03 	call	0x66a	; 0x66a <writeChar>
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	08 95       	ret

000007be <updateDisplay>:

// updateDisplay() Hämtar värden för NorthQueue, BridgeAmount, SouthQueue och
// skriver på LCD
int updateDisplay(GUI *self, int arg) {
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
  printAt(SYNC(self->controller, getNorthQueue, 0), 0);
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	6f e1       	ldi	r22, 0x1F	; 31
     7ca:	73 e0       	ldi	r23, 0x03	; 3
     7cc:	8c 81       	ldd	r24, Y+4	; 0x04
     7ce:	9d 81       	ldd	r25, Y+5	; 0x05
     7d0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sync>
     7d4:	bc 01       	movw	r22, r24
     7d6:	99 0f       	add	r25, r25
     7d8:	88 0b       	sbc	r24, r24
     7da:	99 0b       	sbc	r25, r25
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	0e 94 a5 03 	call	0x74a	; 0x74a <printAt>
  printAt(SYNC(self->controller, getBridgeAmount, 0), 2);
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	67 e2       	ldi	r22, 0x27	; 39
     7ea:	73 e0       	ldi	r23, 0x03	; 3
     7ec:	8c 81       	ldd	r24, Y+4	; 0x04
     7ee:	9d 81       	ldd	r25, Y+5	; 0x05
     7f0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sync>
     7f4:	bc 01       	movw	r22, r24
     7f6:	99 0f       	add	r25, r25
     7f8:	88 0b       	sbc	r24, r24
     7fa:	99 0b       	sbc	r25, r25
     7fc:	42 e0       	ldi	r20, 0x02	; 2
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	0e 94 a5 03 	call	0x74a	; 0x74a <printAt>
  printAt(SYNC(self->controller, getSouthQueue, 0), 4);
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	63 e2       	ldi	r22, 0x23	; 35
     80a:	73 e0       	ldi	r23, 0x03	; 3
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	9d 81       	ldd	r25, Y+5	; 0x05
     810:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sync>
     814:	bc 01       	movw	r22, r24
     816:	99 0f       	add	r25, r25
     818:	88 0b       	sbc	r24, r24
     81a:	99 0b       	sbc	r25, r25
     81c:	44 e0       	ldi	r20, 0x04	; 4
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	0e 94 a5 03 	call	0x74a	; 0x74a <printAt>
  return 0;
}
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <startProgram>:
#include "TinyTimber.h"
#include "avr_init.h"
#include "serialCom.h"
#include <avr/io.h>

int startProgram(GUI *self, int arg) {
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	ec 01       	movw	r28, r24
  ASYNC(self, updateDisplay, 0);
     840:	c1 2c       	mov	r12, r1
     842:	d1 2c       	mov	r13, r1
     844:	0f 2e       	mov	r0, r31
     846:	ff ed       	ldi	r31, 0xDF	; 223
     848:	ef 2e       	mov	r14, r31
     84a:	f3 e0       	ldi	r31, 0x03	; 3
     84c:	ff 2e       	mov	r15, r31
     84e:	f0 2d       	mov	r31, r0
     850:	8c 01       	movw	r16, r24
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	cb 01       	movw	r24, r22
     85e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  ASYNC(self->controller, idleState, 0);
     862:	0c 81       	ldd	r16, Y+4	; 0x04
     864:	1d 81       	ldd	r17, Y+5	; 0x05
     866:	0f 2e       	mov	r0, r31
     868:	f2 ea       	ldi	r31, 0xA2	; 162
     86a:	ef 2e       	mov	r14, r31
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	ff 2e       	mov	r15, r31
     870:	f0 2d       	mov	r31, r0
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	a9 01       	movw	r20, r18
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	cb 01       	movw	r24, r22
     87e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
  return 0;
}
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	08 95       	ret

00000898 <main>:

int main() {
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	a3 97       	sbiw	r28, 0x23	; 35
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
  avr_init();
     8b0:	0e 94 4d 00 	call	0x9a	; 0x9a <avr_init>
  lcd_init();
     8b4:	0e 94 2b 03 	call	0x656	; 0x656 <lcd_init>

  // Initializa serialCom.
  SerialCom serial = initSerialCom();
     8b8:	1a 82       	std	Y+2, r1	; 0x02
     8ba:	19 82       	std	Y+1, r1	; 0x01
     8bc:	1c 82       	std	Y+4, r1	; 0x04
     8be:	1b 82       	std	Y+3, r1	; 0x03

  // Initializa controller, med 0 för GUI
  Controller controller = initController(&serial, 0);
     8c0:	ce 01       	movw	r24, r28
     8c2:	05 96       	adiw	r24, 0x05	; 5
     8c4:	29 e1       	ldi	r18, 0x19	; 25
     8c6:	fc 01       	movw	r30, r24
     8c8:	11 92       	st	Z+, r1
     8ca:	2a 95       	dec	r18
     8cc:	e9 f7       	brne	.-6      	; 0x8c8 <main+0x30>
     8ce:	9e 01       	movw	r18, r28
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
     8d4:	3a 87       	std	Y+10, r19	; 0x0a
     8d6:	29 87       	std	Y+9, r18	; 0x09

  // Initializa GUI med controller.
  GUI gui = initGUI(&controller);
     8d8:	1f 8e       	std	Y+31, r1	; 0x1f
     8da:	1e 8e       	std	Y+30, r1	; 0x1e
     8dc:	19 a2       	std	Y+33, r1	; 0x21
     8de:	18 a2       	std	Y+32, r1	; 0x20
     8e0:	9b a3       	std	Y+35, r25	; 0x23
     8e2:	8a a3       	std	Y+34, r24	; 0x22

  // Och nu assigna guit till controller.
  controller.gui = &gui;
     8e4:	8e 01       	movw	r16, r28
     8e6:	02 5e       	subi	r16, 0xE2	; 226
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	1c 87       	std	Y+12, r17	; 0x0c
     8ec:	0b 87       	std	Y+11, r16	; 0x0b

  INSTALL(&controller, bitParser, IRQ_USART0_RX);
     8ee:	48 e0       	ldi	r20, 0x08	; 8
     8f0:	68 e3       	ldi	r22, 0x38	; 56
     8f2:	72 e0       	ldi	r23, 0x02	; 2
     8f4:	0e 94 2a 11 	call	0x2254	; 0x2254 <install>

  return TINYTIMBER(&gui, startProgram, 0);
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	67 e1       	ldi	r22, 0x17	; 23
     8fe:	74 e0       	ldi	r23, 0x04	; 4
     900:	c8 01       	movw	r24, r16
     902:	0e 94 45 11 	call	0x228a	; 0x228a <tinytimber>
}
     906:	a3 96       	adiw	r28, 0x23	; 35
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret

0000091c <USARTtransmit>:
#include "serialCom.h"

int USARTtransmit(SerialCom *self, int arg) {
  // Vänta tills send buffern är tom
  while (!(UCSR0A & (1 << UDRE0))) {
     91c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     920:	85 ff       	sbrs	r24, 5
     922:	fc cf       	rjmp	.-8      	; 0x91c <USARTtransmit>
  }
  // Skriv byten till UDR0 för sändning
  UDR0 = (uint8_t)arg;
     924:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
  return 0;
}
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret

0000092e <USARTreceive>:

int USARTreceive(SerialCom *self, int arg) {
  // Vänta tills data finns att läsa
  while (!(UCSR0A & (1 << RXC0))) {
     92e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     932:	88 23       	and	r24, r24
     934:	e4 f7       	brge	.-8      	; 0x92e <USARTreceive>
  }

  int bits = UDR0;
     936:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
  return bits;
}
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret

0000093e <initialize>:
    t->accum = STATUS() ? current->msg->baseline : timestamp;
}

Time T_SAMPLE(Timer *t) {
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
}
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	00 d0       	rcall	.+0      	; 0x944 <initialize+0x6>
     944:	00 d0       	rcall	.+0      	; 0x946 <initialize+0x8>
     946:	cd b7       	in	r28, 0x3d	; 61
     948:	de b7       	in	r29, 0x3e	; 62
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	18 c0       	rjmp	.+48     	; 0x980 <initialize+0x42>
     950:	ac 01       	movw	r20, r24
     952:	4f 5f       	subi	r20, 0xFF	; 255
     954:	5f 4f       	sbci	r21, 0xFF	; 255
     956:	9a 01       	movw	r18, r20
     958:	22 95       	swap	r18
     95a:	32 95       	swap	r19
     95c:	30 7f       	andi	r19, 0xF0	; 240
     95e:	32 27       	eor	r19, r18
     960:	20 7f       	andi	r18, 0xF0	; 240
     962:	32 27       	eor	r19, r18
     964:	21 50       	subi	r18, 0x01	; 1
     966:	3e 4f       	sbci	r19, 0xFE	; 254
     968:	82 95       	swap	r24
     96a:	92 95       	swap	r25
     96c:	90 7f       	andi	r25, 0xF0	; 240
     96e:	98 27       	eor	r25, r24
     970:	80 7f       	andi	r24, 0xF0	; 240
     972:	98 27       	eor	r25, r24
     974:	fc 01       	movw	r30, r24
     976:	e1 50       	subi	r30, 0x01	; 1
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	31 83       	std	Z+1, r19	; 0x01
     97c:	20 83       	st	Z, r18
     97e:	ca 01       	movw	r24, r20
     980:	8e 30       	cpi	r24, 0x0E	; 14
     982:	91 05       	cpc	r25, r1
     984:	2c f3       	brlt	.-54     	; 0x950 <initialize+0x12>
     986:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     98a:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	15 c0       	rjmp	.+42     	; 0x9be <initialize+0x80>
     994:	ac 01       	movw	r20, r24
     996:	4f 5f       	subi	r20, 0xFF	; 255
     998:	5f 4f       	sbci	r21, 0xFF	; 255
     99a:	6d e1       	ldi	r22, 0x1D	; 29
     99c:	64 9f       	mul	r22, r20
     99e:	90 01       	movw	r18, r0
     9a0:	65 9f       	mul	r22, r21
     9a2:	30 0d       	add	r19, r0
     9a4:	11 24       	eor	r1, r1
     9a6:	26 5b       	subi	r18, 0xB6	; 182
     9a8:	3e 4f       	sbci	r19, 0xFE	; 254
     9aa:	68 9f       	mul	r22, r24
     9ac:	f0 01       	movw	r30, r0
     9ae:	69 9f       	mul	r22, r25
     9b0:	f0 0d       	add	r31, r0
     9b2:	11 24       	eor	r1, r1
     9b4:	e6 5b       	subi	r30, 0xB6	; 182
     9b6:	fe 4f       	sbci	r31, 0xFE	; 254
     9b8:	31 83       	std	Z+1, r19	; 0x01
     9ba:	20 83       	st	Z, r18
     9bc:	ca 01       	movw	r24, r20
     9be:	83 30       	cpi	r24, 0x03	; 3
     9c0:	91 05       	cpc	r25, r1
     9c2:	44 f3       	brlt	.-48     	; 0x994 <initialize+0x56>
     9c4:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <threads+0x58>
     9c8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <threads+0x57>
     9cc:	1a 82       	std	Y+2, r1	; 0x02
     9ce:	19 82       	std	Y+1, r1	; 0x01
     9d0:	32 c0       	rjmp	.+100    	; 0xa36 <initialize+0xf8>
     9d2:	2d e1       	ldi	r18, 0x1D	; 29
     9d4:	49 81       	ldd	r20, Y+1	; 0x01
     9d6:	5a 81       	ldd	r21, Y+2	; 0x02
     9d8:	24 9f       	mul	r18, r20
     9da:	c0 01       	movw	r24, r0
     9dc:	25 9f       	mul	r18, r21
     9de:	90 0d       	add	r25, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	fc 01       	movw	r30, r24
     9e4:	e0 5b       	subi	r30, 0xB0	; 176
     9e6:	fe 4f       	sbci	r31, 0xFE	; 254
     9e8:	fc 83       	std	Y+4, r31	; 0x04
     9ea:	eb 83       	std	Y+3, r30	; 0x03
     9ec:	cf 01       	movw	r24, r30
     9ee:	0e 94 9d 11 	call	0x233a	; 0x233a <setjmp>
     9f2:	20 e6       	ldi	r18, 0x60	; 96
     9f4:	49 81       	ldd	r20, Y+1	; 0x01
     9f6:	5a 81       	ldd	r21, Y+2	; 0x02
     9f8:	24 9f       	mul	r18, r20
     9fa:	c0 01       	movw	r24, r0
     9fc:	25 9f       	mul	r18, r21
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	85 5b       	subi	r24, 0xB5	; 181
     a04:	9c 4f       	sbci	r25, 0xFC	; 252
     a06:	eb 81       	ldd	r30, Y+3	; 0x03
     a08:	fc 81       	ldd	r31, Y+4	; 0x04
     a0a:	91 8b       	std	Z+17, r25	; 0x11
     a0c:	80 8b       	std	Z+16, r24	; 0x10
     a0e:	93 8b       	std	Z+19, r25	; 0x13
     a10:	82 8b       	std	Z+18, r24	; 0x12
     a12:	8b e7       	ldi	r24, 0x7B	; 123
     a14:	90 e1       	ldi	r25, 0x10	; 16
     a16:	96 8b       	std	Z+22, r25	; 0x16
     a18:	85 8b       	std	Z+21, r24	; 0x15
     a1a:	8d e1       	ldi	r24, 0x1D	; 29
     a1c:	84 9f       	mul	r24, r20
     a1e:	f0 01       	movw	r30, r0
     a20:	85 9f       	mul	r24, r21
     a22:	f0 0d       	add	r31, r0
     a24:	11 24       	eor	r1, r1
     a26:	e6 5b       	subi	r30, 0xB6	; 182
     a28:	fe 4f       	sbci	r31, 0xFE	; 254
     a2a:	15 82       	std	Z+5, r1	; 0x05
     a2c:	14 82       	std	Z+4, r1	; 0x04
     a2e:	4f 5f       	subi	r20, 0xFF	; 255
     a30:	5f 4f       	sbci	r21, 0xFF	; 255
     a32:	5a 83       	std	Y+2, r21	; 0x02
     a34:	49 83       	std	Y+1, r20	; 0x01
     a36:	29 81       	ldd	r18, Y+1	; 0x01
     a38:	3a 81       	ldd	r19, Y+2	; 0x02
     a3a:	24 30       	cpi	r18, 0x04	; 4
     a3c:	31 05       	cpc	r19, r1
     a3e:	4c f2       	brlt	.-110    	; 0x9d2 <initialize+0x94>
     a40:	e2 ee       	ldi	r30, 0xE2	; 226
     a42:	f1 e0       	ldi	r31, 0x01	; 1
     a44:	11 82       	std	Z+1, r1	; 0x01
     a46:	10 82       	st	Z, r1
     a48:	15 82       	std	Z+5, r1	; 0x05
     a4a:	14 82       	std	Z+4, r1	; 0x04
     a4c:	13 82       	std	Z+3, r1	; 0x03
     a4e:	12 82       	std	Z+2, r1	; 0x02
     a50:	e1 e6       	ldi	r30, 0x61	; 97
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	80 83       	st	Z, r24
     a58:	10 82       	st	Z, r1
     a5a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a5e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	0f 90       	pop	r0
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	08 95       	ret

00000a7c <dispatch>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	00 d0       	rcall	.+0      	; 0xa82 <dispatch+0x6>
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a92:	06 96       	adiw	r24, 0x06	; 6
     a94:	0e 94 9d 11 	call	0x233a	; 0x233a <setjmp>
     a98:	89 2b       	or	r24, r25
     a9a:	59 f4       	brne	.+22     	; 0xab2 <dispatch+0x36>
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	9a 81       	ldd	r25, Y+2	; 0x02
     aa0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     aa4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	06 96       	adiw	r24, 0x06	; 6
     aae:	0e 94 bd 11 	call	0x237a	; 0x237a <longjmp>
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <enqueueByDeadline>:
     abc:	0f 93       	push	r16
     abe:	1f 93       	push	r17
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	eb 01       	movw	r28, r22
     aca:	e8 81       	ld	r30, Y
     acc:	f9 81       	ldd	r31, Y+1	; 0x01
     ace:	c0 e0       	ldi	r28, 0x00	; 0
     ad0:	d0 e0       	ldi	r29, 0x00	; 0
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <enqueueByDeadline+0x20>
     ad4:	ef 01       	movw	r28, r30
     ad6:	01 90       	ld	r0, Z+
     ad8:	f0 81       	ld	r31, Z
     ada:	e0 2d       	mov	r30, r0
     adc:	30 97       	sbiw	r30, 0x00	; 0
     ade:	79 f0       	breq	.+30     	; 0xafe <enqueueByDeadline+0x42>
     ae0:	06 81       	ldd	r16, Z+6	; 0x06
     ae2:	17 81       	ldd	r17, Z+7	; 0x07
     ae4:	20 85       	ldd	r18, Z+8	; 0x08
     ae6:	31 85       	ldd	r19, Z+9	; 0x09
     ae8:	16 96       	adiw	r26, 0x06	; 6
     aea:	4d 91       	ld	r20, X+
     aec:	5d 91       	ld	r21, X+
     aee:	6d 91       	ld	r22, X+
     af0:	7c 91       	ld	r23, X
     af2:	19 97       	sbiw	r26, 0x09	; 9
     af4:	40 17       	cp	r20, r16
     af6:	51 07       	cpc	r21, r17
     af8:	62 07       	cpc	r22, r18
     afa:	73 07       	cpc	r23, r19
     afc:	5c f7       	brge	.-42     	; 0xad4 <enqueueByDeadline+0x18>
     afe:	11 96       	adiw	r26, 0x01	; 1
     b00:	fc 93       	st	X, r31
     b02:	ee 93       	st	-X, r30
     b04:	20 97       	sbiw	r28, 0x00	; 0
     b06:	21 f4       	brne	.+8      	; 0xb10 <enqueueByDeadline+0x54>
     b08:	fc 01       	movw	r30, r24
     b0a:	b1 83       	std	Z+1, r27	; 0x01
     b0c:	a0 83       	st	Z, r26
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <enqueueByDeadline+0x58>
     b10:	b9 83       	std	Y+1, r27	; 0x01
     b12:	a8 83       	st	Y, r26
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	08 95       	ret

00000b1e <enqueueByBaseline>:
     b1e:	0f 93       	push	r16
     b20:	1f 93       	push	r17
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	eb 01       	movw	r28, r22
     b2c:	e8 81       	ld	r30, Y
     b2e:	f9 81       	ldd	r31, Y+1	; 0x01
     b30:	c0 e0       	ldi	r28, 0x00	; 0
     b32:	d0 e0       	ldi	r29, 0x00	; 0
     b34:	04 c0       	rjmp	.+8      	; 0xb3e <enqueueByBaseline+0x20>
     b36:	ef 01       	movw	r28, r30
     b38:	01 90       	ld	r0, Z+
     b3a:	f0 81       	ld	r31, Z
     b3c:	e0 2d       	mov	r30, r0
     b3e:	30 97       	sbiw	r30, 0x00	; 0
     b40:	79 f0       	breq	.+30     	; 0xb60 <enqueueByBaseline+0x42>
     b42:	02 81       	ldd	r16, Z+2	; 0x02
     b44:	13 81       	ldd	r17, Z+3	; 0x03
     b46:	24 81       	ldd	r18, Z+4	; 0x04
     b48:	35 81       	ldd	r19, Z+5	; 0x05
     b4a:	12 96       	adiw	r26, 0x02	; 2
     b4c:	4d 91       	ld	r20, X+
     b4e:	5d 91       	ld	r21, X+
     b50:	6d 91       	ld	r22, X+
     b52:	7c 91       	ld	r23, X
     b54:	15 97       	sbiw	r26, 0x05	; 5
     b56:	40 17       	cp	r20, r16
     b58:	51 07       	cpc	r21, r17
     b5a:	62 07       	cpc	r22, r18
     b5c:	73 07       	cpc	r23, r19
     b5e:	5c f7       	brge	.-42     	; 0xb36 <enqueueByBaseline+0x18>
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	fc 93       	st	X, r31
     b64:	ee 93       	st	-X, r30
     b66:	20 97       	sbiw	r28, 0x00	; 0
     b68:	21 f4       	brne	.+8      	; 0xb72 <enqueueByBaseline+0x54>
     b6a:	fc 01       	movw	r30, r24
     b6c:	b1 83       	std	Z+1, r27	; 0x01
     b6e:	a0 83       	st	Z, r26
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <enqueueByBaseline+0x58>
     b72:	b9 83       	std	Y+1, r27	; 0x01
     b74:	a8 83       	st	Y, r26
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	1f 91       	pop	r17
     b7c:	0f 91       	pop	r16
     b7e:	08 95       	ret

00000b80 <dequeue>:
     b80:	dc 01       	movw	r26, r24
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	11 97       	sbiw	r26, 0x01	; 1
     b88:	30 97       	sbiw	r30, 0x00	; 0
     b8a:	59 f4       	brne	.+22     	; 0xba2 <dequeue+0x22>
     b8c:	8f ef       	ldi	r24, 0xFF	; 255
     b8e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b92:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b96:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	83 bf       	out	0x33, r24	; 51
     b9e:	88 95       	sleep
     ba0:	fc cf       	rjmp	.-8      	; 0xb9a <dequeue+0x1a>
     ba2:	20 81       	ld	r18, Z
     ba4:	31 81       	ldd	r19, Z+1	; 0x01
     ba6:	2d 93       	st	X+, r18
     ba8:	3c 93       	st	X, r19
     baa:	cf 01       	movw	r24, r30
     bac:	08 95       	ret

00000bae <insert>:
     bae:	fb 01       	movw	r30, r22
     bb0:	20 81       	ld	r18, Z
     bb2:	31 81       	ldd	r19, Z+1	; 0x01
     bb4:	fc 01       	movw	r30, r24
     bb6:	31 83       	std	Z+1, r19	; 0x01
     bb8:	20 83       	st	Z, r18
     bba:	fb 01       	movw	r30, r22
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	80 83       	st	Z, r24
     bc0:	08 95       	ret

00000bc2 <push>:
     bc2:	fb 01       	movw	r30, r22
     bc4:	20 81       	ld	r18, Z
     bc6:	31 81       	ldd	r19, Z+1	; 0x01
     bc8:	fc 01       	movw	r30, r24
     bca:	31 83       	std	Z+1, r19	; 0x01
     bcc:	20 83       	st	Z, r18
     bce:	fb 01       	movw	r30, r22
     bd0:	91 83       	std	Z+1, r25	; 0x01
     bd2:	80 83       	st	Z, r24
     bd4:	08 95       	ret

00000bd6 <pop>:
     bd6:	dc 01       	movw	r26, r24
     bd8:	ed 91       	ld	r30, X+
     bda:	fc 91       	ld	r31, X
     bdc:	11 97       	sbiw	r26, 0x01	; 1
     bde:	20 81       	ld	r18, Z
     be0:	31 81       	ldd	r19, Z+1	; 0x01
     be2:	2d 93       	st	X+, r18
     be4:	3c 93       	st	X, r19
     be6:	cf 01       	movw	r24, r30
     be8:	08 95       	ret

00000bea <schedule>:
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     bf2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     bf6:	c2 81       	ldd	r28, Z+2	; 0x02
     bf8:	d3 81       	ldd	r29, Z+3	; 0x03
     bfa:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     bfe:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     c02:	30 97       	sbiw	r30, 0x00	; 0
     c04:	19 f1       	breq	.+70     	; 0xc4c <schedule+0x62>
     c06:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     c0a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     c0e:	89 2b       	or	r24, r25
     c10:	e9 f0       	breq	.+58     	; 0xc4c <schedule+0x62>
     c12:	20 97       	sbiw	r28, 0x00	; 0
     c14:	69 f0       	breq	.+26     	; 0xc30 <schedule+0x46>
     c16:	86 81       	ldd	r24, Z+6	; 0x06
     c18:	97 81       	ldd	r25, Z+7	; 0x07
     c1a:	a0 85       	ldd	r26, Z+8	; 0x08
     c1c:	b1 85       	ldd	r27, Z+9	; 0x09
     c1e:	4e 81       	ldd	r20, Y+6	; 0x06
     c20:	5f 81       	ldd	r21, Y+7	; 0x07
     c22:	68 85       	ldd	r22, Y+8	; 0x08
     c24:	79 85       	ldd	r23, Y+9	; 0x09
     c26:	84 1b       	sub	r24, r20
     c28:	95 0b       	sbc	r25, r21
     c2a:	a6 0b       	sbc	r26, r22
     c2c:	b7 0b       	sbc	r27, r23
     c2e:	72 f4       	brpl	.+28     	; 0xc4c <schedule+0x62>
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <pop>
     c38:	62 e0       	ldi	r22, 0x02	; 2
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <push>
     c40:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     c44:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     c48:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <__vector_1>:
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     c7c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     c80:	ac 01       	movw	r20, r24
     c82:	09 2e       	mov	r0, r25
     c84:	00 0c       	add	r0, r0
     c86:	66 0b       	sbc	r22, r22
     c88:	77 0b       	sbc	r23, r23
     c8a:	9a 01       	movw	r18, r20
     c8c:	11 27       	eor	r17, r17
     c8e:	00 27       	eor	r16, r16
     c90:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c94:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	40 2b       	or	r20, r16
     c9e:	51 2b       	or	r21, r17
     ca0:	62 2b       	or	r22, r18
     ca2:	73 2b       	or	r23, r19
     ca4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     ca8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     cac:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     cb0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     cb4:	b0 9b       	sbis	0x16, 0	; 22
     cb6:	1a c0       	rjmp	.+52     	; 0xcec <__vector_1+0x9a>
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	09 2e       	mov	r0, r25
     cbc:	00 0c       	add	r0, r0
     cbe:	aa 0b       	sbc	r26, r26
     cc0:	bb 0b       	sbc	r27, r27
     cc2:	bc 01       	movw	r22, r24
     cc4:	55 27       	eor	r21, r21
     cc6:	44 27       	eor	r20, r20
     cc8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ccc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cd0:	a0 e0       	ldi	r26, 0x00	; 0
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	84 2b       	or	r24, r20
     cd6:	95 2b       	or	r25, r21
     cd8:	a6 2b       	or	r26, r22
     cda:	b7 2b       	or	r27, r23
     cdc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ce0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ce4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ce8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cec:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     cf0:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     cf4:	30 97       	sbiw	r30, 0x00	; 0
     cf6:	39 f0       	breq	.+14     	; 0xd06 <__vector_1+0xb4>
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     d00:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     d04:	09 95       	icall
     d06:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
     d0a:	ff 91       	pop	r31
     d0c:	ef 91       	pop	r30
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	4f 91       	pop	r20
     d1e:	3f 91       	pop	r19
     d20:	2f 91       	pop	r18
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	0f 90       	pop	r0
     d28:	0f be       	out	0x3f, r0	; 63
     d2a:	0f 90       	pop	r0
     d2c:	1f 90       	pop	r1
     d2e:	18 95       	reti

00000d30 <__vector_2>:
     d30:	1f 92       	push	r1
     d32:	0f 92       	push	r0
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	0f 92       	push	r0
     d38:	11 24       	eor	r1, r1
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
     d56:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     d5a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     d5e:	ac 01       	movw	r20, r24
     d60:	09 2e       	mov	r0, r25
     d62:	00 0c       	add	r0, r0
     d64:	66 0b       	sbc	r22, r22
     d66:	77 0b       	sbc	r23, r23
     d68:	9a 01       	movw	r18, r20
     d6a:	11 27       	eor	r17, r17
     d6c:	00 27       	eor	r16, r16
     d6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	40 2b       	or	r20, r16
     d7c:	51 2b       	or	r21, r17
     d7e:	62 2b       	or	r22, r18
     d80:	73 2b       	or	r23, r19
     d82:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     d86:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     d8a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     d8e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     d92:	b0 9b       	sbis	0x16, 0	; 22
     d94:	1a c0       	rjmp	.+52     	; 0xdca <__vector_2+0x9a>
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	09 2e       	mov	r0, r25
     d9a:	00 0c       	add	r0, r0
     d9c:	aa 0b       	sbc	r26, r26
     d9e:	bb 0b       	sbc	r27, r27
     da0:	bc 01       	movw	r22, r24
     da2:	55 27       	eor	r21, r21
     da4:	44 27       	eor	r20, r20
     da6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     daa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	84 2b       	or	r24, r20
     db4:	95 2b       	or	r25, r21
     db6:	a6 2b       	or	r26, r22
     db8:	b7 2b       	or	r27, r23
     dba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     dbe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     dc2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     dc6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     dca:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     dce:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	39 f0       	breq	.+14     	; 0xde4 <__vector_2+0xb4>
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     dde:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     de2:	09 95       	icall
     de4:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <__vector_3>:
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	2f 93       	push	r18
     e1e:	3f 93       	push	r19
     e20:	4f 93       	push	r20
     e22:	5f 93       	push	r21
     e24:	6f 93       	push	r22
     e26:	7f 93       	push	r23
     e28:	8f 93       	push	r24
     e2a:	9f 93       	push	r25
     e2c:	af 93       	push	r26
     e2e:	bf 93       	push	r27
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     e38:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     e3c:	ac 01       	movw	r20, r24
     e3e:	09 2e       	mov	r0, r25
     e40:	00 0c       	add	r0, r0
     e42:	66 0b       	sbc	r22, r22
     e44:	77 0b       	sbc	r23, r23
     e46:	9a 01       	movw	r18, r20
     e48:	11 27       	eor	r17, r17
     e4a:	00 27       	eor	r16, r16
     e4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	40 2b       	or	r20, r16
     e5a:	51 2b       	or	r21, r17
     e5c:	62 2b       	or	r22, r18
     e5e:	73 2b       	or	r23, r19
     e60:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     e64:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     e68:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     e6c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     e70:	b0 9b       	sbis	0x16, 0	; 22
     e72:	1a c0       	rjmp	.+52     	; 0xea8 <__vector_3+0x9a>
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	09 2e       	mov	r0, r25
     e78:	00 0c       	add	r0, r0
     e7a:	aa 0b       	sbc	r26, r26
     e7c:	bb 0b       	sbc	r27, r27
     e7e:	bc 01       	movw	r22, r24
     e80:	55 27       	eor	r21, r21
     e82:	44 27       	eor	r20, r20
     e84:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e88:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e8c:	a0 e0       	ldi	r26, 0x00	; 0
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	84 2b       	or	r24, r20
     e92:	95 2b       	or	r25, r21
     e94:	a6 2b       	or	r26, r22
     e96:	b7 2b       	or	r27, r23
     e98:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e9c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ea0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ea4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ea8:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     eac:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     eb0:	30 97       	sbiw	r30, 0x00	; 0
     eb2:	39 f0       	breq	.+14     	; 0xec2 <__vector_3+0xb4>
     eb4:	62 e0       	ldi	r22, 0x02	; 2
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     ebc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     ec0:	09 95       	icall
     ec2:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
     ec6:	ff 91       	pop	r31
     ec8:	ef 91       	pop	r30
     eca:	bf 91       	pop	r27
     ecc:	af 91       	pop	r26
     ece:	9f 91       	pop	r25
     ed0:	8f 91       	pop	r24
     ed2:	7f 91       	pop	r23
     ed4:	6f 91       	pop	r22
     ed6:	5f 91       	pop	r21
     ed8:	4f 91       	pop	r20
     eda:	3f 91       	pop	r19
     edc:	2f 91       	pop	r18
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <__vector_4>:
     eec:	1f 92       	push	r1
     eee:	0f 92       	push	r0
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	0f 92       	push	r0
     ef4:	11 24       	eor	r1, r1
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	2f 93       	push	r18
     efc:	3f 93       	push	r19
     efe:	4f 93       	push	r20
     f00:	5f 93       	push	r21
     f02:	6f 93       	push	r22
     f04:	7f 93       	push	r23
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
     f0a:	af 93       	push	r26
     f0c:	bf 93       	push	r27
     f0e:	ef 93       	push	r30
     f10:	ff 93       	push	r31
     f12:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     f16:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     f1a:	ac 01       	movw	r20, r24
     f1c:	09 2e       	mov	r0, r25
     f1e:	00 0c       	add	r0, r0
     f20:	66 0b       	sbc	r22, r22
     f22:	77 0b       	sbc	r23, r23
     f24:	9a 01       	movw	r18, r20
     f26:	11 27       	eor	r17, r17
     f28:	00 27       	eor	r16, r16
     f2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	70 e0       	ldi	r23, 0x00	; 0
     f36:	40 2b       	or	r20, r16
     f38:	51 2b       	or	r21, r17
     f3a:	62 2b       	or	r22, r18
     f3c:	73 2b       	or	r23, r19
     f3e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     f42:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     f46:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     f4a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     f4e:	b0 9b       	sbis	0x16, 0	; 22
     f50:	1a c0       	rjmp	.+52     	; 0xf86 <__vector_4+0x9a>
     f52:	01 96       	adiw	r24, 0x01	; 1
     f54:	09 2e       	mov	r0, r25
     f56:	00 0c       	add	r0, r0
     f58:	aa 0b       	sbc	r26, r26
     f5a:	bb 0b       	sbc	r27, r27
     f5c:	bc 01       	movw	r22, r24
     f5e:	55 27       	eor	r21, r21
     f60:	44 27       	eor	r20, r20
     f62:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f66:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	84 2b       	or	r24, r20
     f70:	95 2b       	or	r25, r21
     f72:	a6 2b       	or	r26, r22
     f74:	b7 2b       	or	r27, r23
     f76:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f7a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f7e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f82:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f86:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     f8a:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     f8e:	30 97       	sbiw	r30, 0x00	; 0
     f90:	39 f0       	breq	.+14     	; 0xfa0 <__vector_4+0xb4>
     f92:	63 e0       	ldi	r22, 0x03	; 3
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     f9a:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     f9e:	09 95       	icall
     fa0:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
     fa4:	ff 91       	pop	r31
     fa6:	ef 91       	pop	r30
     fa8:	bf 91       	pop	r27
     faa:	af 91       	pop	r26
     fac:	9f 91       	pop	r25
     fae:	8f 91       	pop	r24
     fb0:	7f 91       	pop	r23
     fb2:	6f 91       	pop	r22
     fb4:	5f 91       	pop	r21
     fb6:	4f 91       	pop	r20
     fb8:	3f 91       	pop	r19
     fba:	2f 91       	pop	r18
     fbc:	1f 91       	pop	r17
     fbe:	0f 91       	pop	r16
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <__vector_5>:
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	2f 93       	push	r18
     fda:	3f 93       	push	r19
     fdc:	4f 93       	push	r20
     fde:	5f 93       	push	r21
     fe0:	6f 93       	push	r22
     fe2:	7f 93       	push	r23
     fe4:	8f 93       	push	r24
     fe6:	9f 93       	push	r25
     fe8:	af 93       	push	r26
     fea:	bf 93       	push	r27
     fec:	ef 93       	push	r30
     fee:	ff 93       	push	r31
     ff0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     ff4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     ff8:	ac 01       	movw	r20, r24
     ffa:	09 2e       	mov	r0, r25
     ffc:	00 0c       	add	r0, r0
     ffe:	66 0b       	sbc	r22, r22
    1000:	77 0b       	sbc	r23, r23
    1002:	9a 01       	movw	r18, r20
    1004:	11 27       	eor	r17, r17
    1006:	00 27       	eor	r16, r16
    1008:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    100c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	40 2b       	or	r20, r16
    1016:	51 2b       	or	r21, r17
    1018:	62 2b       	or	r22, r18
    101a:	73 2b       	or	r23, r19
    101c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1020:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1024:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1028:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    102c:	b0 9b       	sbis	0x16, 0	; 22
    102e:	1a c0       	rjmp	.+52     	; 0x1064 <__vector_5+0x9a>
    1030:	01 96       	adiw	r24, 0x01	; 1
    1032:	09 2e       	mov	r0, r25
    1034:	00 0c       	add	r0, r0
    1036:	aa 0b       	sbc	r26, r26
    1038:	bb 0b       	sbc	r27, r27
    103a:	bc 01       	movw	r22, r24
    103c:	55 27       	eor	r21, r21
    103e:	44 27       	eor	r20, r20
    1040:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1044:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	84 2b       	or	r24, r20
    104e:	95 2b       	or	r25, r21
    1050:	a6 2b       	or	r26, r22
    1052:	b7 2b       	or	r27, r23
    1054:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1058:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    105c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1060:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1064:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
    1068:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	39 f0       	breq	.+14     	; 0x107e <__vector_5+0xb4>
    1070:	64 e0       	ldi	r22, 0x04	; 4
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
    1078:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
    107c:	09 95       	icall
    107e:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1082:	ff 91       	pop	r31
    1084:	ef 91       	pop	r30
    1086:	bf 91       	pop	r27
    1088:	af 91       	pop	r26
    108a:	9f 91       	pop	r25
    108c:	8f 91       	pop	r24
    108e:	7f 91       	pop	r23
    1090:	6f 91       	pop	r22
    1092:	5f 91       	pop	r21
    1094:	4f 91       	pop	r20
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_10>:
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	2f 93       	push	r18
    10b8:	3f 93       	push	r19
    10ba:	4f 93       	push	r20
    10bc:	5f 93       	push	r21
    10be:	6f 93       	push	r22
    10c0:	7f 93       	push	r23
    10c2:	8f 93       	push	r24
    10c4:	9f 93       	push	r25
    10c6:	af 93       	push	r26
    10c8:	bf 93       	push	r27
    10ca:	ef 93       	push	r30
    10cc:	ff 93       	push	r31
    10ce:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    10d2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    10d6:	ac 01       	movw	r20, r24
    10d8:	09 2e       	mov	r0, r25
    10da:	00 0c       	add	r0, r0
    10dc:	66 0b       	sbc	r22, r22
    10de:	77 0b       	sbc	r23, r23
    10e0:	9a 01       	movw	r18, r20
    10e2:	11 27       	eor	r17, r17
    10e4:	00 27       	eor	r16, r16
    10e6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10ea:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	40 2b       	or	r20, r16
    10f4:	51 2b       	or	r21, r17
    10f6:	62 2b       	or	r22, r18
    10f8:	73 2b       	or	r23, r19
    10fa:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    10fe:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1102:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1106:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    110a:	b0 9b       	sbis	0x16, 0	; 22
    110c:	1a c0       	rjmp	.+52     	; 0x1142 <__vector_10+0x9a>
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	09 2e       	mov	r0, r25
    1112:	00 0c       	add	r0, r0
    1114:	aa 0b       	sbc	r26, r26
    1116:	bb 0b       	sbc	r27, r27
    1118:	bc 01       	movw	r22, r24
    111a:	55 27       	eor	r21, r21
    111c:	44 27       	eor	r20, r20
    111e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1122:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1126:	a0 e0       	ldi	r26, 0x00	; 0
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	84 2b       	or	r24, r20
    112c:	95 2b       	or	r25, r21
    112e:	a6 2b       	or	r26, r22
    1130:	b7 2b       	or	r27, r23
    1132:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1136:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    113a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    113e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1142:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
    1146:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
    114a:	30 97       	sbiw	r30, 0x00	; 0
    114c:	39 f0       	breq	.+14     	; 0x115c <__vector_10+0xb4>
    114e:	65 e0       	ldi	r22, 0x05	; 5
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
    1156:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
    115a:	09 95       	icall
    115c:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1160:	ff 91       	pop	r31
    1162:	ef 91       	pop	r30
    1164:	bf 91       	pop	r27
    1166:	af 91       	pop	r26
    1168:	9f 91       	pop	r25
    116a:	8f 91       	pop	r24
    116c:	7f 91       	pop	r23
    116e:	6f 91       	pop	r22
    1170:	5f 91       	pop	r21
    1172:	4f 91       	pop	r20
    1174:	3f 91       	pop	r19
    1176:	2f 91       	pop	r18
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_11>:
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
    11ac:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    11b0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    11b4:	ac 01       	movw	r20, r24
    11b6:	09 2e       	mov	r0, r25
    11b8:	00 0c       	add	r0, r0
    11ba:	66 0b       	sbc	r22, r22
    11bc:	77 0b       	sbc	r23, r23
    11be:	9a 01       	movw	r18, r20
    11c0:	11 27       	eor	r17, r17
    11c2:	00 27       	eor	r16, r16
    11c4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	40 2b       	or	r20, r16
    11d2:	51 2b       	or	r21, r17
    11d4:	62 2b       	or	r22, r18
    11d6:	73 2b       	or	r23, r19
    11d8:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    11dc:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    11e0:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    11e4:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    11e8:	b0 9b       	sbis	0x16, 0	; 22
    11ea:	1a c0       	rjmp	.+52     	; 0x1220 <__vector_11+0x9a>
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	09 2e       	mov	r0, r25
    11f0:	00 0c       	add	r0, r0
    11f2:	aa 0b       	sbc	r26, r26
    11f4:	bb 0b       	sbc	r27, r27
    11f6:	bc 01       	movw	r22, r24
    11f8:	55 27       	eor	r21, r21
    11fa:	44 27       	eor	r20, r20
    11fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1200:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	84 2b       	or	r24, r20
    120a:	95 2b       	or	r25, r21
    120c:	a6 2b       	or	r26, r22
    120e:	b7 2b       	or	r27, r23
    1210:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1214:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1218:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    121c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1220:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
    1224:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	39 f0       	breq	.+14     	; 0x123a <__vector_11+0xb4>
    122c:	66 e0       	ldi	r22, 0x06	; 6
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    1234:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    1238:	09 95       	icall
    123a:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_12>:
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	2f 93       	push	r18
    1274:	3f 93       	push	r19
    1276:	4f 93       	push	r20
    1278:	5f 93       	push	r21
    127a:	6f 93       	push	r22
    127c:	7f 93       	push	r23
    127e:	8f 93       	push	r24
    1280:	9f 93       	push	r25
    1282:	af 93       	push	r26
    1284:	bf 93       	push	r27
    1286:	ef 93       	push	r30
    1288:	ff 93       	push	r31
    128a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    128e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1292:	ac 01       	movw	r20, r24
    1294:	09 2e       	mov	r0, r25
    1296:	00 0c       	add	r0, r0
    1298:	66 0b       	sbc	r22, r22
    129a:	77 0b       	sbc	r23, r23
    129c:	9a 01       	movw	r18, r20
    129e:	11 27       	eor	r17, r17
    12a0:	00 27       	eor	r16, r16
    12a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	40 2b       	or	r20, r16
    12b0:	51 2b       	or	r21, r17
    12b2:	62 2b       	or	r22, r18
    12b4:	73 2b       	or	r23, r19
    12b6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    12ba:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    12be:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    12c2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    12c6:	b0 9b       	sbis	0x16, 0	; 22
    12c8:	1a c0       	rjmp	.+52     	; 0x12fe <__vector_12+0x9a>
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	09 2e       	mov	r0, r25
    12ce:	00 0c       	add	r0, r0
    12d0:	aa 0b       	sbc	r26, r26
    12d2:	bb 0b       	sbc	r27, r27
    12d4:	bc 01       	movw	r22, r24
    12d6:	55 27       	eor	r21, r21
    12d8:	44 27       	eor	r20, r20
    12da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	84 2b       	or	r24, r20
    12e8:	95 2b       	or	r25, r21
    12ea:	a6 2b       	or	r26, r22
    12ec:	b7 2b       	or	r27, r23
    12ee:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12f2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12f6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12fa:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12fe:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    1302:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    1306:	30 97       	sbiw	r30, 0x00	; 0
    1308:	39 f0       	breq	.+14     	; 0x1318 <__vector_12+0xb4>
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    1312:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1316:	09 95       	icall
    1318:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    131c:	ff 91       	pop	r31
    131e:	ef 91       	pop	r30
    1320:	bf 91       	pop	r27
    1322:	af 91       	pop	r26
    1324:	9f 91       	pop	r25
    1326:	8f 91       	pop	r24
    1328:	7f 91       	pop	r23
    132a:	6f 91       	pop	r22
    132c:	5f 91       	pop	r21
    132e:	4f 91       	pop	r20
    1330:	3f 91       	pop	r19
    1332:	2f 91       	pop	r18
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	0f 90       	pop	r0
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	0f 90       	pop	r0
    133e:	1f 90       	pop	r1
    1340:	18 95       	reti

00001342 <__vector_13>:
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    136c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1370:	ac 01       	movw	r20, r24
    1372:	09 2e       	mov	r0, r25
    1374:	00 0c       	add	r0, r0
    1376:	66 0b       	sbc	r22, r22
    1378:	77 0b       	sbc	r23, r23
    137a:	9a 01       	movw	r18, r20
    137c:	11 27       	eor	r17, r17
    137e:	00 27       	eor	r16, r16
    1380:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1384:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	40 2b       	or	r20, r16
    138e:	51 2b       	or	r21, r17
    1390:	62 2b       	or	r22, r18
    1392:	73 2b       	or	r23, r19
    1394:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1398:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    139c:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    13a0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    13a4:	b0 9b       	sbis	0x16, 0	; 22
    13a6:	1a c0       	rjmp	.+52     	; 0x13dc <__vector_13+0x9a>
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	09 2e       	mov	r0, r25
    13ac:	00 0c       	add	r0, r0
    13ae:	aa 0b       	sbc	r26, r26
    13b0:	bb 0b       	sbc	r27, r27
    13b2:	bc 01       	movw	r22, r24
    13b4:	55 27       	eor	r21, r21
    13b6:	44 27       	eor	r20, r20
    13b8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13bc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	84 2b       	or	r24, r20
    13c6:	95 2b       	or	r25, r21
    13c8:	a6 2b       	or	r26, r22
    13ca:	b7 2b       	or	r27, r23
    13cc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    13d0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    13d4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    13d8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13dc:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    13e0:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	39 f0       	breq	.+14     	; 0x13f6 <__vector_13+0xb4>
    13e8:	68 e0       	ldi	r22, 0x08	; 8
    13ea:	70 e0       	ldi	r23, 0x00	; 0
    13ec:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    13f0:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    13f4:	09 95       	icall
    13f6:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	0f 90       	pop	r0
    141c:	1f 90       	pop	r1
    141e:	18 95       	reti

00001420 <__vector_14>:
    1420:	1f 92       	push	r1
    1422:	0f 92       	push	r0
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	0f 92       	push	r0
    1428:	11 24       	eor	r1, r1
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	2f 93       	push	r18
    1430:	3f 93       	push	r19
    1432:	4f 93       	push	r20
    1434:	5f 93       	push	r21
    1436:	6f 93       	push	r22
    1438:	7f 93       	push	r23
    143a:	8f 93       	push	r24
    143c:	9f 93       	push	r25
    143e:	af 93       	push	r26
    1440:	bf 93       	push	r27
    1442:	ef 93       	push	r30
    1444:	ff 93       	push	r31
    1446:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    144a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    144e:	ac 01       	movw	r20, r24
    1450:	09 2e       	mov	r0, r25
    1452:	00 0c       	add	r0, r0
    1454:	66 0b       	sbc	r22, r22
    1456:	77 0b       	sbc	r23, r23
    1458:	9a 01       	movw	r18, r20
    145a:	11 27       	eor	r17, r17
    145c:	00 27       	eor	r16, r16
    145e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1462:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	40 2b       	or	r20, r16
    146c:	51 2b       	or	r21, r17
    146e:	62 2b       	or	r22, r18
    1470:	73 2b       	or	r23, r19
    1472:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1476:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    147a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    147e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1482:	b0 9b       	sbis	0x16, 0	; 22
    1484:	1a c0       	rjmp	.+52     	; 0x14ba <__vector_14+0x9a>
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	09 2e       	mov	r0, r25
    148a:	00 0c       	add	r0, r0
    148c:	aa 0b       	sbc	r26, r26
    148e:	bb 0b       	sbc	r27, r27
    1490:	bc 01       	movw	r22, r24
    1492:	55 27       	eor	r21, r21
    1494:	44 27       	eor	r20, r20
    1496:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    149a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	84 2b       	or	r24, r20
    14a4:	95 2b       	or	r25, r21
    14a6:	a6 2b       	or	r26, r22
    14a8:	b7 2b       	or	r27, r23
    14aa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14ae:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14b2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14b6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14ba:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    14be:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    14c2:	30 97       	sbiw	r30, 0x00	; 0
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <__vector_14+0xb4>
    14c6:	69 e0       	ldi	r22, 0x09	; 9
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    14ce:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    14d2:	09 95       	icall
    14d4:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    14d8:	ff 91       	pop	r31
    14da:	ef 91       	pop	r30
    14dc:	bf 91       	pop	r27
    14de:	af 91       	pop	r26
    14e0:	9f 91       	pop	r25
    14e2:	8f 91       	pop	r24
    14e4:	7f 91       	pop	r23
    14e6:	6f 91       	pop	r22
    14e8:	5f 91       	pop	r21
    14ea:	4f 91       	pop	r20
    14ec:	3f 91       	pop	r19
    14ee:	2f 91       	pop	r18
    14f0:	1f 91       	pop	r17
    14f2:	0f 91       	pop	r16
    14f4:	0f 90       	pop	r0
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	0f 90       	pop	r0
    14fa:	1f 90       	pop	r1
    14fc:	18 95       	reti

000014fe <__vector_15>:
    14fe:	1f 92       	push	r1
    1500:	0f 92       	push	r0
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	0f 92       	push	r0
    1506:	11 24       	eor	r1, r1
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1528:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    152c:	ac 01       	movw	r20, r24
    152e:	09 2e       	mov	r0, r25
    1530:	00 0c       	add	r0, r0
    1532:	66 0b       	sbc	r22, r22
    1534:	77 0b       	sbc	r23, r23
    1536:	9a 01       	movw	r18, r20
    1538:	11 27       	eor	r17, r17
    153a:	00 27       	eor	r16, r16
    153c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1540:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	40 2b       	or	r20, r16
    154a:	51 2b       	or	r21, r17
    154c:	62 2b       	or	r22, r18
    154e:	73 2b       	or	r23, r19
    1550:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1554:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1558:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    155c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1560:	b0 9b       	sbis	0x16, 0	; 22
    1562:	1a c0       	rjmp	.+52     	; 0x1598 <__vector_15+0x9a>
    1564:	01 96       	adiw	r24, 0x01	; 1
    1566:	09 2e       	mov	r0, r25
    1568:	00 0c       	add	r0, r0
    156a:	aa 0b       	sbc	r26, r26
    156c:	bb 0b       	sbc	r27, r27
    156e:	bc 01       	movw	r22, r24
    1570:	55 27       	eor	r21, r21
    1572:	44 27       	eor	r20, r20
    1574:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1578:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    157c:	a0 e0       	ldi	r26, 0x00	; 0
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	84 2b       	or	r24, r20
    1582:	95 2b       	or	r25, r21
    1584:	a6 2b       	or	r26, r22
    1586:	b7 2b       	or	r27, r23
    1588:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    158c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1590:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1594:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1598:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    159c:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    15a0:	30 97       	sbiw	r30, 0x00	; 0
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <__vector_15+0xb4>
    15a4:	6a e0       	ldi	r22, 0x0A	; 10
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    15ac:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    15b0:	09 95       	icall
    15b2:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_16>:
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1606:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    160a:	ac 01       	movw	r20, r24
    160c:	09 2e       	mov	r0, r25
    160e:	00 0c       	add	r0, r0
    1610:	66 0b       	sbc	r22, r22
    1612:	77 0b       	sbc	r23, r23
    1614:	9a 01       	movw	r18, r20
    1616:	11 27       	eor	r17, r17
    1618:	00 27       	eor	r16, r16
    161a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    161e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	40 2b       	or	r20, r16
    1628:	51 2b       	or	r21, r17
    162a:	62 2b       	or	r22, r18
    162c:	73 2b       	or	r23, r19
    162e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1632:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1636:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    163a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    163e:	b0 9b       	sbis	0x16, 0	; 22
    1640:	1a c0       	rjmp	.+52     	; 0x1676 <__vector_16+0x9a>
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	09 2e       	mov	r0, r25
    1646:	00 0c       	add	r0, r0
    1648:	aa 0b       	sbc	r26, r26
    164a:	bb 0b       	sbc	r27, r27
    164c:	bc 01       	movw	r22, r24
    164e:	55 27       	eor	r21, r21
    1650:	44 27       	eor	r20, r20
    1652:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1656:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	84 2b       	or	r24, r20
    1660:	95 2b       	or	r25, r21
    1662:	a6 2b       	or	r26, r22
    1664:	b7 2b       	or	r27, r23
    1666:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    166a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    166e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1672:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1676:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    167a:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    167e:	30 97       	sbiw	r30, 0x00	; 0
    1680:	39 f0       	breq	.+14     	; 0x1690 <__vector_16+0xb4>
    1682:	6b e0       	ldi	r22, 0x0B	; 11
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    168a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    168e:	09 95       	icall
    1690:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1694:	ff 91       	pop	r31
    1696:	ef 91       	pop	r30
    1698:	bf 91       	pop	r27
    169a:	af 91       	pop	r26
    169c:	9f 91       	pop	r25
    169e:	8f 91       	pop	r24
    16a0:	7f 91       	pop	r23
    16a2:	6f 91       	pop	r22
    16a4:	5f 91       	pop	r21
    16a6:	4f 91       	pop	r20
    16a8:	3f 91       	pop	r19
    16aa:	2f 91       	pop	r18
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	0f 90       	pop	r0
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	0f 90       	pop	r0
    16b6:	1f 90       	pop	r1
    16b8:	18 95       	reti

000016ba <__vector_17>:
    16ba:	1f 92       	push	r1
    16bc:	0f 92       	push	r0
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	0f 92       	push	r0
    16c2:	11 24       	eor	r1, r1
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	2f 93       	push	r18
    16ca:	3f 93       	push	r19
    16cc:	4f 93       	push	r20
    16ce:	5f 93       	push	r21
    16d0:	6f 93       	push	r22
    16d2:	7f 93       	push	r23
    16d4:	8f 93       	push	r24
    16d6:	9f 93       	push	r25
    16d8:	af 93       	push	r26
    16da:	bf 93       	push	r27
    16dc:	ef 93       	push	r30
    16de:	ff 93       	push	r31
    16e0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    16e4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    16e8:	ac 01       	movw	r20, r24
    16ea:	09 2e       	mov	r0, r25
    16ec:	00 0c       	add	r0, r0
    16ee:	66 0b       	sbc	r22, r22
    16f0:	77 0b       	sbc	r23, r23
    16f2:	9a 01       	movw	r18, r20
    16f4:	11 27       	eor	r17, r17
    16f6:	00 27       	eor	r16, r16
    16f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	40 2b       	or	r20, r16
    1706:	51 2b       	or	r21, r17
    1708:	62 2b       	or	r22, r18
    170a:	73 2b       	or	r23, r19
    170c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1710:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1714:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1718:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    171c:	b0 9b       	sbis	0x16, 0	; 22
    171e:	1a c0       	rjmp	.+52     	; 0x1754 <__vector_17+0x9a>
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	09 2e       	mov	r0, r25
    1724:	00 0c       	add	r0, r0
    1726:	aa 0b       	sbc	r26, r26
    1728:	bb 0b       	sbc	r27, r27
    172a:	bc 01       	movw	r22, r24
    172c:	55 27       	eor	r21, r21
    172e:	44 27       	eor	r20, r20
    1730:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1734:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1738:	a0 e0       	ldi	r26, 0x00	; 0
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	84 2b       	or	r24, r20
    173e:	95 2b       	or	r25, r21
    1740:	a6 2b       	or	r26, r22
    1742:	b7 2b       	or	r27, r23
    1744:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1748:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    174c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1750:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1754:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    1758:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	39 f0       	breq	.+14     	; 0x176e <__vector_17+0xb4>
    1760:	6c e0       	ldi	r22, 0x0C	; 12
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1768:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    176c:	09 95       	icall
    176e:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1772:	ff 91       	pop	r31
    1774:	ef 91       	pop	r30
    1776:	bf 91       	pop	r27
    1778:	af 91       	pop	r26
    177a:	9f 91       	pop	r25
    177c:	8f 91       	pop	r24
    177e:	7f 91       	pop	r23
    1780:	6f 91       	pop	r22
    1782:	5f 91       	pop	r21
    1784:	4f 91       	pop	r20
    1786:	3f 91       	pop	r19
    1788:	2f 91       	pop	r18
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	0f 90       	pop	r0
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	0f 90       	pop	r0
    1794:	1f 90       	pop	r1
    1796:	18 95       	reti

00001798 <__vector_18>:
    1798:	1f 92       	push	r1
    179a:	0f 92       	push	r0
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	0f 92       	push	r0
    17a0:	11 24       	eor	r1, r1
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
    17be:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    17c2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    17c6:	ac 01       	movw	r20, r24
    17c8:	09 2e       	mov	r0, r25
    17ca:	00 0c       	add	r0, r0
    17cc:	66 0b       	sbc	r22, r22
    17ce:	77 0b       	sbc	r23, r23
    17d0:	9a 01       	movw	r18, r20
    17d2:	11 27       	eor	r17, r17
    17d4:	00 27       	eor	r16, r16
    17d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	40 2b       	or	r20, r16
    17e4:	51 2b       	or	r21, r17
    17e6:	62 2b       	or	r22, r18
    17e8:	73 2b       	or	r23, r19
    17ea:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    17ee:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    17f2:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    17f6:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    17fa:	b0 9b       	sbis	0x16, 0	; 22
    17fc:	1a c0       	rjmp	.+52     	; 0x1832 <__vector_18+0x9a>
    17fe:	01 96       	adiw	r24, 0x01	; 1
    1800:	09 2e       	mov	r0, r25
    1802:	00 0c       	add	r0, r0
    1804:	aa 0b       	sbc	r26, r26
    1806:	bb 0b       	sbc	r27, r27
    1808:	bc 01       	movw	r22, r24
    180a:	55 27       	eor	r21, r21
    180c:	44 27       	eor	r20, r20
    180e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1812:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	84 2b       	or	r24, r20
    181c:	95 2b       	or	r25, r21
    181e:	a6 2b       	or	r26, r22
    1820:	b7 2b       	or	r27, r23
    1822:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1826:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    182a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    182e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1832:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1836:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    183a:	30 97       	sbiw	r30, 0x00	; 0
    183c:	39 f0       	breq	.+14     	; 0x184c <__vector_18+0xb4>
    183e:	6d e0       	ldi	r22, 0x0D	; 13
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    1846:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    184a:	09 95       	icall
    184c:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1850:	ff 91       	pop	r31
    1852:	ef 91       	pop	r30
    1854:	bf 91       	pop	r27
    1856:	af 91       	pop	r26
    1858:	9f 91       	pop	r25
    185a:	8f 91       	pop	r24
    185c:	7f 91       	pop	r23
    185e:	6f 91       	pop	r22
    1860:	5f 91       	pop	r21
    1862:	4f 91       	pop	r20
    1864:	3f 91       	pop	r19
    1866:	2f 91       	pop	r18
    1868:	1f 91       	pop	r17
    186a:	0f 91       	pop	r16
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_19>:
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	0f b6       	in	r0, 0x3f	; 63
    187c:	0f 92       	push	r0
    187e:	11 24       	eor	r1, r1
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	2f 93       	push	r18
    1886:	3f 93       	push	r19
    1888:	4f 93       	push	r20
    188a:	5f 93       	push	r21
    188c:	6f 93       	push	r22
    188e:	7f 93       	push	r23
    1890:	8f 93       	push	r24
    1892:	9f 93       	push	r25
    1894:	af 93       	push	r26
    1896:	bf 93       	push	r27
    1898:	ef 93       	push	r30
    189a:	ff 93       	push	r31
    189c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    18a0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    18a4:	ac 01       	movw	r20, r24
    18a6:	09 2e       	mov	r0, r25
    18a8:	00 0c       	add	r0, r0
    18aa:	66 0b       	sbc	r22, r22
    18ac:	77 0b       	sbc	r23, r23
    18ae:	9a 01       	movw	r18, r20
    18b0:	11 27       	eor	r17, r17
    18b2:	00 27       	eor	r16, r16
    18b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	40 2b       	or	r20, r16
    18c2:	51 2b       	or	r21, r17
    18c4:	62 2b       	or	r22, r18
    18c6:	73 2b       	or	r23, r19
    18c8:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    18cc:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    18d0:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    18d4:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    18d8:	b0 9b       	sbis	0x16, 0	; 22
    18da:	1a c0       	rjmp	.+52     	; 0x1910 <__vector_19+0x9a>
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	09 2e       	mov	r0, r25
    18e0:	00 0c       	add	r0, r0
    18e2:	aa 0b       	sbc	r26, r26
    18e4:	bb 0b       	sbc	r27, r27
    18e6:	bc 01       	movw	r22, r24
    18e8:	55 27       	eor	r21, r21
    18ea:	44 27       	eor	r20, r20
    18ec:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18f0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	84 2b       	or	r24, r20
    18fa:	95 2b       	or	r25, r21
    18fc:	a6 2b       	or	r26, r22
    18fe:	b7 2b       	or	r27, r23
    1900:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1904:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1908:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    190c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1910:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    1914:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    1918:	30 97       	sbiw	r30, 0x00	; 0
    191a:	39 f0       	breq	.+14     	; 0x192a <__vector_19+0xb4>
    191c:	6e e0       	ldi	r22, 0x0E	; 14
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1924:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    1928:	09 95       	icall
    192a:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <__vector_20>:
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	2f 93       	push	r18
    1964:	3f 93       	push	r19
    1966:	4f 93       	push	r20
    1968:	5f 93       	push	r21
    196a:	6f 93       	push	r22
    196c:	7f 93       	push	r23
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    197e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1982:	ac 01       	movw	r20, r24
    1984:	09 2e       	mov	r0, r25
    1986:	00 0c       	add	r0, r0
    1988:	66 0b       	sbc	r22, r22
    198a:	77 0b       	sbc	r23, r23
    198c:	9a 01       	movw	r18, r20
    198e:	11 27       	eor	r17, r17
    1990:	00 27       	eor	r16, r16
    1992:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1996:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	70 e0       	ldi	r23, 0x00	; 0
    199e:	40 2b       	or	r20, r16
    19a0:	51 2b       	or	r21, r17
    19a2:	62 2b       	or	r22, r18
    19a4:	73 2b       	or	r23, r19
    19a6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    19aa:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    19ae:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    19b2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    19b6:	b0 9b       	sbis	0x16, 0	; 22
    19b8:	1a c0       	rjmp	.+52     	; 0x19ee <__vector_20+0x9a>
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	09 2e       	mov	r0, r25
    19be:	00 0c       	add	r0, r0
    19c0:	aa 0b       	sbc	r26, r26
    19c2:	bb 0b       	sbc	r27, r27
    19c4:	bc 01       	movw	r22, r24
    19c6:	55 27       	eor	r21, r21
    19c8:	44 27       	eor	r20, r20
    19ca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d2:	a0 e0       	ldi	r26, 0x00	; 0
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	84 2b       	or	r24, r20
    19d8:	95 2b       	or	r25, r21
    19da:	a6 2b       	or	r26, r22
    19dc:	b7 2b       	or	r27, r23
    19de:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    19e2:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    19e6:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    19ea:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    19ee:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    19f2:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	39 f0       	breq	.+14     	; 0x1a08 <__vector_20+0xb4>
    19fa:	6f e0       	ldi	r22, 0x0F	; 15
    19fc:	70 e0       	ldi	r23, 0x00	; 0
    19fe:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1a02:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    1a06:	09 95       	icall
    1a08:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	1f 91       	pop	r17
    1a26:	0f 91       	pop	r16
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <__vector_21>:
    1a32:	1f 92       	push	r1
    1a34:	0f 92       	push	r0
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	0f 92       	push	r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	0f 93       	push	r16
    1a3e:	1f 93       	push	r17
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1a5c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1a60:	ac 01       	movw	r20, r24
    1a62:	09 2e       	mov	r0, r25
    1a64:	00 0c       	add	r0, r0
    1a66:	66 0b       	sbc	r22, r22
    1a68:	77 0b       	sbc	r23, r23
    1a6a:	9a 01       	movw	r18, r20
    1a6c:	11 27       	eor	r17, r17
    1a6e:	00 27       	eor	r16, r16
    1a70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a78:	60 e0       	ldi	r22, 0x00	; 0
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    1a7c:	40 2b       	or	r20, r16
    1a7e:	51 2b       	or	r21, r17
    1a80:	62 2b       	or	r22, r18
    1a82:	73 2b       	or	r23, r19
    1a84:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1a88:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1a8c:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1a90:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1a94:	b0 9b       	sbis	0x16, 0	; 22
    1a96:	1a c0       	rjmp	.+52     	; 0x1acc <__vector_21+0x9a>
    1a98:	01 96       	adiw	r24, 0x01	; 1
    1a9a:	09 2e       	mov	r0, r25
    1a9c:	00 0c       	add	r0, r0
    1a9e:	aa 0b       	sbc	r26, r26
    1aa0:	bb 0b       	sbc	r27, r27
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	55 27       	eor	r21, r21
    1aa6:	44 27       	eor	r20, r20
    1aa8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aac:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ab0:	a0 e0       	ldi	r26, 0x00	; 0
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	84 2b       	or	r24, r20
    1ab6:	95 2b       	or	r25, r21
    1ab8:	a6 2b       	or	r26, r22
    1aba:	b7 2b       	or	r27, r23
    1abc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1ac0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1ac4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1ac8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1acc:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1ad0:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    1ad4:	30 97       	sbiw	r30, 0x00	; 0
    1ad6:	39 f0       	breq	.+14     	; 0x1ae6 <__vector_21+0xb4>
    1ad8:	60 e1       	ldi	r22, 0x10	; 16
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1ae0:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1ae4:	09 95       	icall
    1ae6:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_22>:
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
    1b36:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1b3a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1b3e:	ac 01       	movw	r20, r24
    1b40:	09 2e       	mov	r0, r25
    1b42:	00 0c       	add	r0, r0
    1b44:	66 0b       	sbc	r22, r22
    1b46:	77 0b       	sbc	r23, r23
    1b48:	9a 01       	movw	r18, r20
    1b4a:	11 27       	eor	r17, r17
    1b4c:	00 27       	eor	r16, r16
    1b4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b56:	60 e0       	ldi	r22, 0x00	; 0
    1b58:	70 e0       	ldi	r23, 0x00	; 0
    1b5a:	40 2b       	or	r20, r16
    1b5c:	51 2b       	or	r21, r17
    1b5e:	62 2b       	or	r22, r18
    1b60:	73 2b       	or	r23, r19
    1b62:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1b66:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1b6a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1b6e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1b72:	b0 9b       	sbis	0x16, 0	; 22
    1b74:	1a c0       	rjmp	.+52     	; 0x1baa <__vector_22+0x9a>
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	09 2e       	mov	r0, r25
    1b7a:	00 0c       	add	r0, r0
    1b7c:	aa 0b       	sbc	r26, r26
    1b7e:	bb 0b       	sbc	r27, r27
    1b80:	bc 01       	movw	r22, r24
    1b82:	55 27       	eor	r21, r21
    1b84:	44 27       	eor	r20, r20
    1b86:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b8a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	84 2b       	or	r24, r20
    1b94:	95 2b       	or	r25, r21
    1b96:	a6 2b       	or	r26, r22
    1b98:	b7 2b       	or	r27, r23
    1b9a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1b9e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1ba2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1ba6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1baa:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    1bae:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    1bb2:	30 97       	sbiw	r30, 0x00	; 0
    1bb4:	39 f0       	breq	.+14     	; 0x1bc4 <__vector_22+0xb4>
    1bb6:	61 e1       	ldi	r22, 0x11	; 17
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    1bbe:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    1bc2:	09 95       	icall
    1bc4:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	bf 91       	pop	r27
    1bce:	af 91       	pop	r26
    1bd0:	9f 91       	pop	r25
    1bd2:	8f 91       	pop	r24
    1bd4:	7f 91       	pop	r23
    1bd6:	6f 91       	pop	r22
    1bd8:	5f 91       	pop	r21
    1bda:	4f 91       	pop	r20
    1bdc:	3f 91       	pop	r19
    1bde:	2f 91       	pop	r18
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	0f 90       	pop	r0
    1bea:	1f 90       	pop	r1
    1bec:	18 95       	reti

00001bee <idle>:
    1bee:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1bf2:	78 94       	sei
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	83 bf       	out	0x33, r24	; 51
    1bf8:	88 95       	sleep
    1bfa:	fc cf       	rjmp	.-8      	; 0x1bf4 <idle+0x6>

00001bfc <__vector_9>:
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31
    1c1a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1c1e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    1c28:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    1c2c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1c30:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	01 f1       	breq	.+64     	; 0x1c78 <__vector_9+0x7c>
    1c38:	42 81       	ldd	r20, Z+2	; 0x02
    1c3a:	53 81       	ldd	r21, Z+3	; 0x03
    1c3c:	64 81       	ldd	r22, Z+4	; 0x04
    1c3e:	75 81       	ldd	r23, Z+5	; 0x05
    1c40:	86 17       	cp	r24, r22
    1c42:	97 07       	cpc	r25, r23
    1c44:	c9 f4       	brne	.+50     	; 0x1c78 <__vector_9+0x7c>
    1c46:	ca 01       	movw	r24, r20
    1c48:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c4c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c50:	42 1b       	sub	r20, r18
    1c52:	53 0b       	sbc	r21, r19
    1c54:	41 30       	cpi	r20, 0x01	; 1
    1c56:	51 05       	cpc	r21, r1
    1c58:	29 f4       	brne	.+10     	; 0x1c64 <__vector_9+0x68>
    1c5a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c5e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c68:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c6c:	ef e6       	ldi	r30, 0x6F	; 111
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	82 60       	ori	r24, 0x02	; 2
    1c74:	80 83       	st	Z, r24
    1c76:	05 c0       	rjmp	.+10     	; 0x1c82 <__vector_9+0x86>
    1c78:	ef e6       	ldi	r30, 0x6F	; 111
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	80 83       	st	Z, r24
    1c82:	ff 91       	pop	r31
    1c84:	ef 91       	pop	r30
    1c86:	9f 91       	pop	r25
    1c88:	8f 91       	pop	r24
    1c8a:	7f 91       	pop	r23
    1c8c:	6f 91       	pop	r22
    1c8e:	5f 91       	pop	r21
    1c90:	4f 91       	pop	r20
    1c92:	3f 91       	pop	r19
    1c94:	2f 91       	pop	r18
    1c96:	0f 90       	pop	r0
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	0f 90       	pop	r0
    1c9c:	1f 90       	pop	r1
    1c9e:	18 95       	reti

00001ca0 <__vector_7>:
    1ca0:	1f 92       	push	r1
    1ca2:	0f 92       	push	r0
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	0f 92       	push	r0
    1ca8:	11 24       	eor	r1, r1
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	2f 93       	push	r18
    1cb4:	3f 93       	push	r19
    1cb6:	4f 93       	push	r20
    1cb8:	5f 93       	push	r21
    1cba:	6f 93       	push	r22
    1cbc:	7f 93       	push	r23
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	af 93       	push	r26
    1cc4:	bf 93       	push	r27
    1cc6:	ef 93       	push	r30
    1cc8:	ff 93       	push	r31
    1cca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1cce:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1cd2:	6c 01       	movw	r12, r24
    1cd4:	09 2e       	mov	r0, r25
    1cd6:	00 0c       	add	r0, r0
    1cd8:	ee 08       	sbc	r14, r14
    1cda:	ff 08       	sbc	r15, r15
    1cdc:	76 01       	movw	r14, r12
    1cde:	dd 24       	eor	r13, r13
    1ce0:	cc 24       	eor	r12, r12
    1ce2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ce6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	c4 2a       	or	r12, r20
    1cf0:	d5 2a       	or	r13, r21
    1cf2:	e6 2a       	or	r14, r22
    1cf4:	f7 2a       	or	r15, r23
    1cf6:	b0 9b       	sbis	0x16, 0	; 22
    1cf8:	1e c0       	rjmp	.+60     	; 0x1d36 <__vector_7+0x96>
    1cfa:	6c 01       	movw	r12, r24
    1cfc:	2f ef       	ldi	r18, 0xFF	; 255
    1cfe:	c2 1a       	sub	r12, r18
    1d00:	d2 0a       	sbc	r13, r18
    1d02:	0d 2c       	mov	r0, r13
    1d04:	00 0c       	add	r0, r0
    1d06:	ee 08       	sbc	r14, r14
    1d08:	ff 08       	sbc	r15, r15
    1d0a:	d6 01       	movw	r26, r12
    1d0c:	99 27       	eor	r25, r25
    1d0e:	88 27       	eor	r24, r24
    1d10:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d14:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d18:	e1 2c       	mov	r14, r1
    1d1a:	f1 2c       	mov	r15, r1
    1d1c:	c8 2a       	or	r12, r24
    1d1e:	d9 2a       	or	r13, r25
    1d20:	ea 2a       	or	r14, r26
    1d22:	fb 2a       	or	r15, r27
    1d24:	08 c0       	rjmp	.+16     	; 0x1d36 <__vector_7+0x96>
    1d26:	82 e2       	ldi	r24, 0x22	; 34
    1d28:	91 e0       	ldi	r25, 0x01	; 1
    1d2a:	0e 94 c0 05 	call	0xb80	; 0xb80 <dequeue>
    1d2e:	64 e2       	ldi	r22, 0x24	; 36
    1d30:	71 e0       	ldi	r23, 0x01	; 1
    1d32:	0e 94 5e 05 	call	0xabc	; 0xabc <enqueueByDeadline>
    1d36:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1d3a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1d3e:	30 97       	sbiw	r30, 0x00	; 0
    1d40:	69 f0       	breq	.+26     	; 0x1d5c <__vector_7+0xbc>
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	a4 81       	ldd	r26, Z+4	; 0x04
    1d48:	b5 81       	ldd	r27, Z+5	; 0x05
    1d4a:	8c 19       	sub	r24, r12
    1d4c:	9d 09       	sbc	r25, r13
    1d4e:	ae 09       	sbc	r26, r14
    1d50:	bf 09       	sbc	r27, r15
    1d52:	18 16       	cp	r1, r24
    1d54:	19 06       	cpc	r1, r25
    1d56:	1a 06       	cpc	r1, r26
    1d58:	1b 06       	cpc	r1, r27
    1d5a:	2c f7       	brge	.-54     	; 0x1d26 <__vector_7+0x86>
    1d5c:	30 97       	sbiw	r30, 0x00	; 0
    1d5e:	21 f1       	breq	.+72     	; 0x1da8 <__vector_7+0x108>
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	a4 81       	ldd	r26, Z+4	; 0x04
    1d66:	b5 81       	ldd	r27, Z+5	; 0x05
    1d68:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1d6c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1d70:	2a 17       	cp	r18, r26
    1d72:	3b 07       	cpc	r19, r27
    1d74:	c9 f4       	brne	.+50     	; 0x1da8 <__vector_7+0x108>
    1d76:	9c 01       	movw	r18, r24
    1d78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d80:	84 1b       	sub	r24, r20
    1d82:	95 0b       	sbc	r25, r21
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	31 f4       	brne	.+12     	; 0x1d94 <__vector_7+0xf4>
    1d88:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d8c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d90:	2f 5f       	subi	r18, 0xFF	; 255
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d98:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d9c:	ef e6       	ldi	r30, 0x6F	; 111
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	82 60       	ori	r24, 0x02	; 2
    1da4:	80 83       	st	Z, r24
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <__vector_7+0x112>
    1da8:	ef e6       	ldi	r30, 0x6F	; 111
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8d 7f       	andi	r24, 0xFD	; 253
    1db0:	80 83       	st	Z, r24
    1db2:	0e 94 f5 05 	call	0xbea	; 0xbea <schedule>
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	bf 91       	pop	r27
    1dbc:	af 91       	pop	r26
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	7f 91       	pop	r23
    1dc4:	6f 91       	pop	r22
    1dc6:	5f 91       	pop	r21
    1dc8:	4f 91       	pop	r20
    1dca:	3f 91       	pop	r19
    1dcc:	2f 91       	pop	r18
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	df 90       	pop	r13
    1dd4:	cf 90       	pop	r12
    1dd6:	0f 90       	pop	r0
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	0f 90       	pop	r0
    1ddc:	1f 90       	pop	r1
    1dde:	18 95       	reti

00001de0 <async>:
    1de0:	3f 92       	push	r3
    1de2:	4f 92       	push	r4
    1de4:	5f 92       	push	r5
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	2b 01       	movw	r4, r22
    1e04:	3c 01       	movw	r6, r24
    1e06:	49 01       	movw	r8, r18
    1e08:	5a 01       	movw	r10, r20
    1e0a:	8f b7       	in	r24, 0x3f	; 63
    1e0c:	80 78       	andi	r24, 0x80	; 128
    1e0e:	38 2e       	mov	r3, r24
    1e10:	f8 94       	cli
    1e12:	86 e0       	ldi	r24, 0x06	; 6
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	0e 94 c0 05 	call	0xb80	; 0xb80 <dequeue>
    1e1a:	ec 01       	movw	r28, r24
    1e1c:	1b 87       	std	Y+11, r17	; 0x0b
    1e1e:	0a 87       	std	Y+10, r16	; 0x0a
    1e20:	fd 86       	std	Y+13, r15	; 0x0d
    1e22:	ec 86       	std	Y+12, r14	; 0x0c
    1e24:	df 86       	std	Y+15, r13	; 0x0f
    1e26:	ce 86       	std	Y+14, r12	; 0x0e
    1e28:	33 20       	and	r3, r3
    1e2a:	61 f0       	breq	.+24     	; 0x1e44 <async+0x64>
    1e2c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e30:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e34:	02 80       	ldd	r0, Z+2	; 0x02
    1e36:	f3 81       	ldd	r31, Z+3	; 0x03
    1e38:	e0 2d       	mov	r30, r0
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	a4 81       	ldd	r26, Z+4	; 0x04
    1e40:	b5 81       	ldd	r27, Z+5	; 0x05
    1e42:	08 c0       	rjmp	.+16     	; 0x1e54 <async+0x74>
    1e44:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timestamp>
    1e48:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timestamp+0x1>
    1e4c:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timestamp+0x2>
    1e50:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timestamp+0x3>
    1e54:	48 0e       	add	r4, r24
    1e56:	59 1e       	adc	r5, r25
    1e58:	6a 1e       	adc	r6, r26
    1e5a:	7b 1e       	adc	r7, r27
    1e5c:	4a 82       	std	Y+2, r4	; 0x02
    1e5e:	5b 82       	std	Y+3, r5	; 0x03
    1e60:	6c 82       	std	Y+4, r6	; 0x04
    1e62:	7d 82       	std	Y+5, r7	; 0x05
    1e64:	18 14       	cp	r1, r8
    1e66:	19 04       	cpc	r1, r9
    1e68:	1a 04       	cpc	r1, r10
    1e6a:	1b 04       	cpc	r1, r11
    1e6c:	44 f0       	brlt	.+16     	; 0x1e7e <async+0x9e>
    1e6e:	0f 2e       	mov	r0, r31
    1e70:	88 24       	eor	r8, r8
    1e72:	8a 94       	dec	r8
    1e74:	98 2c       	mov	r9, r8
    1e76:	a8 2c       	mov	r10, r8
    1e78:	ff e7       	ldi	r31, 0x7F	; 127
    1e7a:	bf 2e       	mov	r11, r31
    1e7c:	f0 2d       	mov	r31, r0
    1e7e:	84 0c       	add	r8, r4
    1e80:	95 1c       	adc	r9, r5
    1e82:	a6 1c       	adc	r10, r6
    1e84:	b7 1c       	adc	r11, r7
    1e86:	8e 82       	std	Y+6, r8	; 0x06
    1e88:	9f 82       	std	Y+7, r9	; 0x07
    1e8a:	a8 86       	std	Y+8, r10	; 0x08
    1e8c:	b9 86       	std	Y+9, r11	; 0x09
    1e8e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1e92:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1e96:	c9 01       	movw	r24, r18
    1e98:	03 2e       	mov	r0, r19
    1e9a:	00 0c       	add	r0, r0
    1e9c:	aa 0b       	sbc	r26, r26
    1e9e:	bb 0b       	sbc	r27, r27
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	99 27       	eor	r25, r25
    1ea4:	88 27       	eor	r24, r24
    1ea6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eaa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eae:	60 e0       	ldi	r22, 0x00	; 0
    1eb0:	70 e0       	ldi	r23, 0x00	; 0
    1eb2:	84 2b       	or	r24, r20
    1eb4:	95 2b       	or	r25, r21
    1eb6:	a6 2b       	or	r26, r22
    1eb8:	b7 2b       	or	r27, r23
    1eba:	b0 9b       	sbis	0x16, 0	; 22
    1ebc:	13 c0       	rjmp	.+38     	; 0x1ee4 <async+0x104>
    1ebe:	c9 01       	movw	r24, r18
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	09 2e       	mov	r0, r25
    1ec4:	00 0c       	add	r0, r0
    1ec6:	aa 0b       	sbc	r26, r26
    1ec8:	bb 0b       	sbc	r27, r27
    1eca:	dc 01       	movw	r26, r24
    1ecc:	99 27       	eor	r25, r25
    1ece:	88 27       	eor	r24, r24
    1ed0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	84 2b       	or	r24, r20
    1ede:	95 2b       	or	r25, r21
    1ee0:	a6 2b       	or	r26, r22
    1ee2:	b7 2b       	or	r27, r23
    1ee4:	48 1a       	sub	r4, r24
    1ee6:	59 0a       	sbc	r5, r25
    1ee8:	6a 0a       	sbc	r6, r26
    1eea:	7b 0a       	sbc	r7, r27
    1eec:	14 14       	cp	r1, r4
    1eee:	15 04       	cpc	r1, r5
    1ef0:	16 04       	cpc	r1, r6
    1ef2:	17 04       	cpc	r1, r7
    1ef4:	ac f5       	brge	.+106    	; 0x1f60 <async+0x180>
    1ef6:	62 e2       	ldi	r22, 0x22	; 34
    1ef8:	71 e0       	ldi	r23, 0x01	; 1
    1efa:	ce 01       	movw	r24, r28
    1efc:	0e 94 8f 05 	call	0xb1e	; 0xb1e <enqueueByBaseline>
    1f00:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1f04:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1f08:	30 97       	sbiw	r30, 0x00	; 0
    1f0a:	21 f1       	breq	.+72     	; 0x1f54 <async+0x174>
    1f0c:	82 81       	ldd	r24, Z+2	; 0x02
    1f0e:	93 81       	ldd	r25, Z+3	; 0x03
    1f10:	a4 81       	ldd	r26, Z+4	; 0x04
    1f12:	b5 81       	ldd	r27, Z+5	; 0x05
    1f14:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1f18:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1f1c:	2a 17       	cp	r18, r26
    1f1e:	3b 07       	cpc	r19, r27
    1f20:	c9 f4       	brne	.+50     	; 0x1f54 <async+0x174>
    1f22:	9c 01       	movw	r18, r24
    1f24:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f28:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f2c:	84 1b       	sub	r24, r20
    1f2e:	95 0b       	sbc	r25, r21
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	31 f4       	brne	.+12     	; 0x1f40 <async+0x160>
    1f34:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f38:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f3c:	2f 5f       	subi	r18, 0xFF	; 255
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f44:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f48:	ef e6       	ldi	r30, 0x6F	; 111
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	82 60       	ori	r24, 0x02	; 2
    1f50:	80 83       	st	Z, r24
    1f52:	39 c0       	rjmp	.+114    	; 0x1fc6 <async+0x1e6>
    1f54:	ef e6       	ldi	r30, 0x6F	; 111
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	8d 7f       	andi	r24, 0xFD	; 253
    1f5c:	80 83       	st	Z, r24
    1f5e:	33 c0       	rjmp	.+102    	; 0x1fc6 <async+0x1e6>
    1f60:	64 e2       	ldi	r22, 0x24	; 36
    1f62:	71 e0       	ldi	r23, 0x01	; 1
    1f64:	ce 01       	movw	r24, r28
    1f66:	0e 94 5e 05 	call	0xabc	; 0xabc <enqueueByDeadline>
    1f6a:	33 20       	and	r3, r3
    1f6c:	61 f1       	breq	.+88     	; 0x1fc6 <async+0x1e6>
    1f6e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f72:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f76:	89 2b       	or	r24, r25
    1f78:	31 f1       	breq	.+76     	; 0x1fc6 <async+0x1e6>
    1f7a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1f7e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1f82:	86 81       	ldd	r24, Z+6	; 0x06
    1f84:	97 81       	ldd	r25, Z+7	; 0x07
    1f86:	a0 85       	ldd	r26, Z+8	; 0x08
    1f88:	b1 85       	ldd	r27, Z+9	; 0x09
    1f8a:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f8e:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f92:	02 80       	ldd	r0, Z+2	; 0x02
    1f94:	f3 81       	ldd	r31, Z+3	; 0x03
    1f96:	e0 2d       	mov	r30, r0
    1f98:	46 81       	ldd	r20, Z+6	; 0x06
    1f9a:	57 81       	ldd	r21, Z+7	; 0x07
    1f9c:	60 85       	ldd	r22, Z+8	; 0x08
    1f9e:	71 85       	ldd	r23, Z+9	; 0x09
    1fa0:	84 1b       	sub	r24, r20
    1fa2:	95 0b       	sbc	r25, r21
    1fa4:	a6 0b       	sbc	r26, r22
    1fa6:	b7 0b       	sbc	r27, r23
    1fa8:	72 f4       	brpl	.+28     	; 0x1fc6 <async+0x1e6>
    1faa:	84 e0       	ldi	r24, 0x04	; 4
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <pop>
    1fb2:	62 e0       	ldi	r22, 0x02	; 2
    1fb4:	71 e0       	ldi	r23, 0x01	; 1
    1fb6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <push>
    1fba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1fbe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1fc2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    1fc6:	33 20       	and	r3, r3
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <async+0x1ec>
    1fca:	78 94       	sei
    1fcc:	ce 01       	movw	r24, r28
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	7f 90       	pop	r7
    1fe8:	6f 90       	pop	r6
    1fea:	5f 90       	pop	r5
    1fec:	4f 90       	pop	r4
    1fee:	3f 90       	pop	r3
    1ff0:	08 95       	ret

00001ff2 <sync>:
    1ff2:	cf 92       	push	r12
    1ff4:	df 92       	push	r13
    1ff6:	ef 92       	push	r14
    1ff8:	ff 92       	push	r15
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	ec 01       	movw	r28, r24
    2004:	7b 01       	movw	r14, r22
    2006:	6a 01       	movw	r12, r20
    2008:	1f b7       	in	r17, 0x3f	; 63
    200a:	10 78       	andi	r17, 0x80	; 128
    200c:	f8 94       	cli
    200e:	a8 81       	ld	r26, Y
    2010:	b9 81       	ldd	r27, Y+1	; 0x01
    2012:	10 97       	sbiw	r26, 0x00	; 0
    2014:	19 f4       	brne	.+6      	; 0x201c <sync+0x2a>
    2016:	35 c0       	rjmp	.+106    	; 0x2082 <sync+0x90>
    2018:	a0 81       	ld	r26, Z
    201a:	b1 81       	ldd	r27, Z+1	; 0x01
    201c:	14 96       	adiw	r26, 0x04	; 4
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	15 97       	sbiw	r26, 0x05	; 5
    2024:	30 97       	sbiw	r30, 0x00	; 0
    2026:	c1 f7       	brne	.-16     	; 0x2018 <sync+0x26>
    2028:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    202c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2030:	a2 17       	cp	r26, r18
    2032:	b3 07       	cpc	r27, r19
    2034:	11 f0       	breq	.+4      	; 0x203a <sync+0x48>
    2036:	11 11       	cpse	r17, r1
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <sync+0x56>
    203a:	11 23       	and	r17, r17
    203c:	09 f4       	brne	.+2      	; 0x2040 <sync+0x4e>
    203e:	4a c0       	rjmp	.+148    	; 0x20d4 <sync+0xe2>
    2040:	78 94       	sei
    2042:	8f ef       	ldi	r24, 0xFF	; 255
    2044:	9f ef       	ldi	r25, 0xFF	; 255
    2046:	4e c0       	rjmp	.+156    	; 0x20e4 <sync+0xf2>
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	19 f0       	breq	.+6      	; 0x2056 <sync+0x64>
    2050:	fc 01       	movw	r30, r24
    2052:	15 82       	std	Z+5, r1	; 0x05
    2054:	14 82       	std	Z+4, r1	; 0x04
    2056:	3b 83       	std	Y+3, r19	; 0x03
    2058:	2a 83       	std	Y+2, r18	; 0x02
    205a:	f9 01       	movw	r30, r18
    205c:	d5 83       	std	Z+5, r29	; 0x05
    205e:	c4 83       	std	Z+4, r28	; 0x04
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    2066:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    206a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	89 2b       	or	r24, r25
    2074:	31 f4       	brne	.+12     	; 0x2082 <sync+0x90>
    2076:	11 23       	and	r17, r17
    2078:	81 f1       	breq	.+96     	; 0x20da <sync+0xe8>
    207a:	78 94       	sei
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	31 c0       	rjmp	.+98     	; 0x20e4 <sync+0xf2>
    2082:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2086:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    208a:	99 83       	std	Y+1, r25	; 0x01
    208c:	88 83       	st	Y, r24
    208e:	11 23       	and	r17, r17
    2090:	29 f0       	breq	.+10     	; 0x209c <sync+0xaa>
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	09 f0       	breq	.+2      	; 0x209c <sync+0xaa>
    209a:	78 94       	sei
    209c:	b6 01       	movw	r22, r12
    209e:	ce 01       	movw	r24, r28
    20a0:	f7 01       	movw	r30, r14
    20a2:	09 95       	icall
    20a4:	f8 2e       	mov	r15, r24
    20a6:	09 2f       	mov	r16, r25
    20a8:	8f b7       	in	r24, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	19 82       	std	Y+1, r1	; 0x01
    20ae:	18 82       	st	Y, r1
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	9b 81       	ldd	r25, Y+3	; 0x03
    20b4:	82 30       	cpi	r24, 0x02	; 2
    20b6:	91 05       	cpc	r25, r1
    20b8:	38 f0       	brcs	.+14     	; 0x20c8 <sync+0xd6>
    20ba:	1b 82       	std	Y+3, r1	; 0x03
    20bc:	1a 82       	std	Y+2, r1	; 0x02
    20be:	fc 01       	movw	r30, r24
    20c0:	15 82       	std	Z+5, r1	; 0x05
    20c2:	14 82       	std	Z+4, r1	; 0x04
    20c4:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    20c8:	11 23       	and	r17, r17
    20ca:	51 f0       	breq	.+20     	; 0x20e0 <sync+0xee>
    20cc:	78 94       	sei
    20ce:	8f 2d       	mov	r24, r15
    20d0:	90 2f       	mov	r25, r16
    20d2:	08 c0       	rjmp	.+16     	; 0x20e4 <sync+0xf2>
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	9f ef       	ldi	r25, 0xFF	; 255
    20d8:	05 c0       	rjmp	.+10     	; 0x20e4 <sync+0xf2>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <sync+0xf2>
    20e0:	8f 2d       	mov	r24, r15
    20e2:	90 2f       	mov	r25, r16
    20e4:	df 91       	pop	r29
    20e6:	cf 91       	pop	r28
    20e8:	1f 91       	pop	r17
    20ea:	0f 91       	pop	r16
    20ec:	ff 90       	pop	r15
    20ee:	ef 90       	pop	r14
    20f0:	df 90       	pop	r13
    20f2:	cf 90       	pop	r12
    20f4:	08 95       	ret

000020f6 <run>:
    20f6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20fa:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20fe:	84 e2       	ldi	r24, 0x24	; 36
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	0e 94 c0 05 	call	0xb80	; 0xb80 <dequeue>
    2106:	ec 01       	movw	r28, r24
    2108:	f8 01       	movw	r30, r16
    210a:	93 83       	std	Z+3, r25	; 0x03
    210c:	82 83       	std	Z+2, r24	; 0x02
    210e:	78 94       	sei
    2110:	6c 85       	ldd	r22, Y+12	; 0x0c
    2112:	7d 85       	ldd	r23, Y+13	; 0x0d
    2114:	4e 85       	ldd	r20, Y+14	; 0x0e
    2116:	5f 85       	ldd	r21, Y+15	; 0x0f
    2118:	8a 85       	ldd	r24, Y+10	; 0x0a
    211a:	9b 85       	ldd	r25, Y+11	; 0x0b
    211c:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <sync>
    2120:	8f b7       	in	r24, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	71 e0       	ldi	r23, 0x01	; 1
    2128:	ce 01       	movw	r24, r28
    212a:	0e 94 d7 05 	call	0xbae	; 0xbae <insert>
    212e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2132:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2136:	01 90       	ld	r0, Z+
    2138:	f0 81       	ld	r31, Z
    213a:	e0 2d       	mov	r30, r0
    213c:	c2 81       	ldd	r28, Z+2	; 0x02
    213e:	d3 81       	ldd	r29, Z+3	; 0x03
    2140:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    2144:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    2148:	30 97       	sbiw	r30, 0x00	; 0
    214a:	a1 f0       	breq	.+40     	; 0x2174 <run+0x7e>
    214c:	20 97       	sbiw	r28, 0x00	; 0
    214e:	99 f2       	breq	.-90     	; 0x20f6 <run>
    2150:	86 81       	ldd	r24, Z+6	; 0x06
    2152:	97 81       	ldd	r25, Z+7	; 0x07
    2154:	a0 85       	ldd	r26, Z+8	; 0x08
    2156:	b1 85       	ldd	r27, Z+9	; 0x09
    2158:	4e 81       	ldd	r20, Y+6	; 0x06
    215a:	5f 81       	ldd	r21, Y+7	; 0x07
    215c:	68 85       	ldd	r22, Y+8	; 0x08
    215e:	79 85       	ldd	r23, Y+9	; 0x09
    2160:	84 1b       	sub	r24, r20
    2162:	95 0b       	sbc	r25, r21
    2164:	a6 0b       	sbc	r26, r22
    2166:	b7 0b       	sbc	r27, r23
    2168:	18 16       	cp	r1, r24
    216a:	19 06       	cpc	r1, r25
    216c:	1a 06       	cpc	r1, r26
    216e:	1b 06       	cpc	r1, r27
    2170:	0c f0       	brlt	.+2      	; 0x2174 <run+0x7e>
    2172:	c1 cf       	rjmp	.-126    	; 0x20f6 <run>
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <pop>
    217c:	64 e0       	ldi	r22, 0x04	; 4
    217e:	71 e0       	ldi	r23, 0x01	; 1
    2180:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <push>
    2184:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    2188:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    218c:	02 c0       	rjmp	.+4      	; 0x2192 <run+0x9c>
    218e:	a0 81       	ld	r26, Z
    2190:	b1 81       	ldd	r27, Z+1	; 0x01
    2192:	14 96       	adiw	r26, 0x04	; 4
    2194:	ed 91       	ld	r30, X+
    2196:	fc 91       	ld	r31, X
    2198:	15 97       	sbiw	r26, 0x05	; 5
    219a:	30 97       	sbiw	r30, 0x00	; 0
    219c:	c1 f7       	brne	.-16     	; 0x218e <run+0x98>
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <dispatch>
    21a4:	a8 cf       	rjmp	.-176    	; 0x20f6 <run>

000021a6 <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
    21a6:	cf 92       	push	r12
    21a8:	df 92       	push	r13
    21aa:	ef 92       	push	r14
    21ac:	ff 92       	push	r15
    char status;
    Time now;
    DISABLE(status);
    21ae:	2f b7       	in	r18, 0x3f	; 63
    21b0:	20 78       	andi	r18, 0x80	; 128
    21b2:	f8 94       	cli
    TIMERGET(now);
    21b4:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
    21b8:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
    21bc:	ca 01       	movw	r24, r20
    21be:	05 2e       	mov	r0, r21
    21c0:	00 0c       	add	r0, r0
    21c2:	aa 0b       	sbc	r26, r26
    21c4:	bb 0b       	sbc	r27, r27
    21c6:	7c 01       	movw	r14, r24
    21c8:	dd 24       	eor	r13, r13
    21ca:	cc 24       	eor	r12, r12
    21cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	8c 29       	or	r24, r12
    21da:	9d 29       	or	r25, r13
    21dc:	ae 29       	or	r26, r14
    21de:	bf 29       	or	r27, r15
    21e0:	b0 9b       	sbis	0x16, 0	; 22
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <CURRENT_OFFSET+0x66>
    21e4:	ba 01       	movw	r22, r20
    21e6:	6f 5f       	subi	r22, 0xFF	; 255
    21e8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ea:	cb 01       	movw	r24, r22
    21ec:	77 0f       	add	r23, r23
    21ee:	aa 0b       	sbc	r26, r26
    21f0:	bb 0b       	sbc	r27, r27
    21f2:	bc 01       	movw	r22, r24
    21f4:	55 27       	eor	r21, r21
    21f6:	44 27       	eor	r20, r20
    21f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    2200:	a0 e0       	ldi	r26, 0x00	; 0
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	84 2b       	or	r24, r20
    2206:	95 2b       	or	r25, r21
    2208:	a6 2b       	or	r26, r22
    220a:	b7 2b       	or	r27, r23
    ENABLE(status);
    220c:	22 23       	and	r18, r18
    220e:	09 f0       	breq	.+2      	; 0x2212 <CURRENT_OFFSET+0x6c>
    2210:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
    2212:	22 23       	and	r18, r18
    2214:	61 f0       	breq	.+24     	; 0x222e <CURRENT_OFFSET+0x88>
    2216:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    221a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    221e:	02 80       	ldd	r0, Z+2	; 0x02
    2220:	f3 81       	ldd	r31, Z+3	; 0x03
    2222:	e0 2d       	mov	r30, r0
    2224:	c2 80       	ldd	r12, Z+2	; 0x02
    2226:	d3 80       	ldd	r13, Z+3	; 0x03
    2228:	e4 80       	ldd	r14, Z+4	; 0x04
    222a:	f5 80       	ldd	r15, Z+5	; 0x05
    222c:	08 c0       	rjmp	.+16     	; 0x223e <CURRENT_OFFSET+0x98>
    222e:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timestamp>
    2232:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timestamp+0x1>
    2236:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timestamp+0x2>
    223a:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timestamp+0x3>
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	6c 19       	sub	r22, r12
    2244:	7d 09       	sbc	r23, r13
    2246:	8e 09       	sbc	r24, r14
    2248:	9f 09       	sbc	r25, r15
}
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	08 95       	ret

00002254 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    2254:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    2256:	42 31       	cpi	r20, 0x12	; 18
    2258:	b8 f4       	brcc	.+46     	; 0x2288 <install+0x34>
        char status;
        DISABLE(status);
    225a:	9f b7       	in	r25, 0x3f	; 63
    225c:	90 78       	andi	r25, 0x80	; 128
    225e:	f8 94       	cli
        otable[i] = obj;
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	44 0f       	add	r20, r20
    2264:	55 1f       	adc	r21, r21
    2266:	da 01       	movw	r26, r20
    2268:	aa 5d       	subi	r26, 0xDA	; 218
    226a:	be 4f       	sbci	r27, 0xFE	; 254
    226c:	ed 93       	st	X+, r30
    226e:	fc 93       	st	X, r31
        mtable[i] = m;
    2270:	da 01       	movw	r26, r20
    2272:	a2 54       	subi	r26, 0x42	; 66
    2274:	be 4f       	sbci	r27, 0xFE	; 254
    2276:	6d 93       	st	X+, r22
    2278:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	33 83       	std	Z+3, r19	; 0x03
    2280:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2282:	99 23       	and	r25, r25
    2284:	09 f0       	breq	.+2      	; 0x2288 <install+0x34>
    2286:	78 94       	sei
    2288:	08 95       	ret

0000228a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    228a:	8c 01       	movw	r16, r24
    228c:	7b 01       	movw	r14, r22
    228e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2290:	8f b7       	in	r24, 0x3f	; 63
    2292:	f8 94       	cli
    initialize();
    2294:	0e 94 9f 04 	call	0x93e	; 0x93e <initialize>
    ENABLE(1);
    2298:	78 94       	sei
    if (m != NULL)
    229a:	e1 14       	cp	r14, r1
    229c:	f1 04       	cpc	r15, r1
    229e:	41 f0       	breq	.+16     	; 0x22b0 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	a9 01       	movw	r20, r18
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	70 e0       	ldi	r23, 0x00	; 0
    22aa:	cb 01       	movw	r24, r22
    22ac:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <async>
    DISABLE(status);
    22b0:	8f b7       	in	r24, 0x3f	; 63
    22b2:	f8 94       	cli
    idle();
    22b4:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <idle>

000022b8 <__divmodsi4>:
    22b8:	05 2e       	mov	r0, r21
    22ba:	97 fb       	bst	r25, 7
    22bc:	1e f4       	brtc	.+6      	; 0x22c4 <__divmodsi4+0xc>
    22be:	00 94       	com	r0
    22c0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__negsi2>
    22c4:	57 fd       	sbrc	r21, 7
    22c6:	07 d0       	rcall	.+14     	; 0x22d6 <__divmodsi4_neg2>
    22c8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <__udivmodsi4>
    22cc:	07 fc       	sbrc	r0, 7
    22ce:	03 d0       	rcall	.+6      	; 0x22d6 <__divmodsi4_neg2>
    22d0:	4e f4       	brtc	.+18     	; 0x22e4 <__divmodsi4_exit>
    22d2:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__negsi2>

000022d6 <__divmodsi4_neg2>:
    22d6:	50 95       	com	r21
    22d8:	40 95       	com	r20
    22da:	30 95       	com	r19
    22dc:	21 95       	neg	r18
    22de:	3f 4f       	sbci	r19, 0xFF	; 255
    22e0:	4f 4f       	sbci	r20, 0xFF	; 255
    22e2:	5f 4f       	sbci	r21, 0xFF	; 255

000022e4 <__divmodsi4_exit>:
    22e4:	08 95       	ret

000022e6 <__negsi2>:
    22e6:	90 95       	com	r25
    22e8:	80 95       	com	r24
    22ea:	70 95       	com	r23
    22ec:	61 95       	neg	r22
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	08 95       	ret

000022f6 <__udivmodsi4>:
    22f6:	a1 e2       	ldi	r26, 0x21	; 33
    22f8:	1a 2e       	mov	r1, r26
    22fa:	aa 1b       	sub	r26, r26
    22fc:	bb 1b       	sub	r27, r27
    22fe:	fd 01       	movw	r30, r26
    2300:	0d c0       	rjmp	.+26     	; 0x231c <__udivmodsi4_ep>

00002302 <__udivmodsi4_loop>:
    2302:	aa 1f       	adc	r26, r26
    2304:	bb 1f       	adc	r27, r27
    2306:	ee 1f       	adc	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	a2 17       	cp	r26, r18
    230c:	b3 07       	cpc	r27, r19
    230e:	e4 07       	cpc	r30, r20
    2310:	f5 07       	cpc	r31, r21
    2312:	20 f0       	brcs	.+8      	; 0x231c <__udivmodsi4_ep>
    2314:	a2 1b       	sub	r26, r18
    2316:	b3 0b       	sbc	r27, r19
    2318:	e4 0b       	sbc	r30, r20
    231a:	f5 0b       	sbc	r31, r21

0000231c <__udivmodsi4_ep>:
    231c:	66 1f       	adc	r22, r22
    231e:	77 1f       	adc	r23, r23
    2320:	88 1f       	adc	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	1a 94       	dec	r1
    2326:	69 f7       	brne	.-38     	; 0x2302 <__udivmodsi4_loop>
    2328:	60 95       	com	r22
    232a:	70 95       	com	r23
    232c:	80 95       	com	r24
    232e:	90 95       	com	r25
    2330:	9b 01       	movw	r18, r22
    2332:	ac 01       	movw	r20, r24
    2334:	bd 01       	movw	r22, r26
    2336:	cf 01       	movw	r24, r30
    2338:	08 95       	ret

0000233a <setjmp>:
    233a:	dc 01       	movw	r26, r24
    233c:	2d 92       	st	X+, r2
    233e:	3d 92       	st	X+, r3
    2340:	4d 92       	st	X+, r4
    2342:	5d 92       	st	X+, r5
    2344:	6d 92       	st	X+, r6
    2346:	7d 92       	st	X+, r7
    2348:	8d 92       	st	X+, r8
    234a:	9d 92       	st	X+, r9
    234c:	ad 92       	st	X+, r10
    234e:	bd 92       	st	X+, r11
    2350:	cd 92       	st	X+, r12
    2352:	dd 92       	st	X+, r13
    2354:	ed 92       	st	X+, r14
    2356:	fd 92       	st	X+, r15
    2358:	0d 93       	st	X+, r16
    235a:	1d 93       	st	X+, r17
    235c:	cd 93       	st	X+, r28
    235e:	dd 93       	st	X+, r29
    2360:	ff 91       	pop	r31
    2362:	ef 91       	pop	r30
    2364:	8d b7       	in	r24, 0x3d	; 61
    2366:	8d 93       	st	X+, r24
    2368:	8e b7       	in	r24, 0x3e	; 62
    236a:	8d 93       	st	X+, r24
    236c:	8f b7       	in	r24, 0x3f	; 63
    236e:	8d 93       	st	X+, r24
    2370:	ed 93       	st	X+, r30
    2372:	fd 93       	st	X+, r31
    2374:	88 27       	eor	r24, r24
    2376:	99 27       	eor	r25, r25
    2378:	09 94       	ijmp

0000237a <longjmp>:
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	91 05       	cpc	r25, r1
    2382:	81 1d       	adc	r24, r1
    2384:	2d 90       	ld	r2, X+
    2386:	3d 90       	ld	r3, X+
    2388:	4d 90       	ld	r4, X+
    238a:	5d 90       	ld	r5, X+
    238c:	6d 90       	ld	r6, X+
    238e:	7d 90       	ld	r7, X+
    2390:	8d 90       	ld	r8, X+
    2392:	9d 90       	ld	r9, X+
    2394:	ad 90       	ld	r10, X+
    2396:	bd 90       	ld	r11, X+
    2398:	cd 90       	ld	r12, X+
    239a:	dd 90       	ld	r13, X+
    239c:	ed 90       	ld	r14, X+
    239e:	fd 90       	ld	r15, X+
    23a0:	0d 91       	ld	r16, X+
    23a2:	1d 91       	ld	r17, X+
    23a4:	cd 91       	ld	r28, X+
    23a6:	dd 91       	ld	r29, X+
    23a8:	ed 91       	ld	r30, X+
    23aa:	fd 91       	ld	r31, X+
    23ac:	0d 90       	ld	r0, X+
    23ae:	f8 94       	cli
    23b0:	fe bf       	out	0x3e, r31	; 62
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	ed bf       	out	0x3d, r30	; 61
    23b6:	ed 91       	ld	r30, X+
    23b8:	fd 91       	ld	r31, X+
    23ba:	09 94       	ijmp

000023bc <_exit>:
    23bc:	f8 94       	cli

000023be <__stop_program>:
    23be:	ff cf       	rjmp	.-2      	; 0x23be <__stop_program>
