
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000214e  000021e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000214e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800142  00800142  00002224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d7c  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010fe  00000000  00000000  00005288  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000168f  00000000  00000000  00006386  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ca8  00000000  00000000  00007a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009de  00000000  00000000  000086c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002846  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000b8e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <__vector_1>
       8:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_2>
       c:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__vector_3>
      10:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_4>
      14:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_9>
      28:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__vector_10>
      2c:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__vector_11>
      30:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_12>
      34:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_13>
      38:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_14>
      3c:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_15>
      40:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_16>
      44:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_17>
      48:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_18>
      4c:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__vector_19>
      50:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__vector_20>
      54:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_21>
      58:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee e4       	ldi	r30, 0x4E	; 78
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 34       	cpi	r26, 0x42	; 66
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e4       	ldi	r26, 0x42	; 66
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 39       	cpi	r26, 0x99	; 153
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 a0 03 	call	0x740	; 0x740 <main>
      92:	0c 94 a5 10 	jmp	0x214a	; 0x214a <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <avr_init>:
#define MYUBRR FOSC/16/BAUD-1


// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
      a4:	e1 e8       	ldi	r30, 0x81	; 129
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8d 60       	ori	r24, 0x0D	; 13
      ac:	80 83       	st	Z, r24
	
	TCNT1 = 0;
      ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
      b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
      b6:	ef e6       	ldi	r30, 0x6F	; 111
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
      c0:	e2 ec       	ldi	r30, 0xC2	; 194
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
      c8:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	UBRR0H |= (MYUBRR>>8);
      cc:	a5 ec       	ldi	r26, 0xC5	; 197
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	8c 91       	ld	r24, X
      d2:	8c 93       	st	X, r24
	UBRR0L |= MYUBRR;
      d4:	a4 ec       	ldi	r26, 0xC4	; 196
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	8c 91       	ld	r24, X
      da:	83 63       	ori	r24, 0x33	; 51
      dc:	8c 93       	st	X, r24
	// Reciever, transmitter, och interrupt.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
      de:	88 e9       	ldi	r24, 0x98	; 152
      e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	// 8 Data, 1 stop bit
    UCSR0C = (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret

000000ea <trafficLightController>:
#include "Controller.h"

// trafficLightController: Bestämmer vilken sida som blir grön/röd utifrån aktuell kö och hur många bilar som finns på bron.
void trafficLightController(Controller *self, int arg)
{
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	fc 01       	movw	r30, r24
	// Om det redan är bilar på bron och vi precis forcade rött, vänta på afterRedGap
	if (self->BridgeAmount > 0) {
      f8:	86 85       	ldd	r24, Z+14	; 0x0e
      fa:	97 85       	ldd	r25, Z+15	; 0x0f
      fc:	a0 89       	ldd	r26, Z+16	; 0x10
      fe:	b1 89       	ldd	r27, Z+17	; 0x11
     100:	89 2b       	or	r24, r25
     102:	8a 2b       	or	r24, r26
     104:	8b 2b       	or	r24, r27
     106:	09 f0       	breq	.+2      	; 0x10a <trafficLightController+0x20>
     108:	44 c0       	rjmp	.+136    	; 0x192 <trafficLightController+0xa8>
		// Om vi är i "all-red gap", så avvaktar vi tills afterRedGap kallar funktionen
		// Om det redan är grönt, gör inget
		return;
	}

	unsigned long NQ = self->NorthQueue;
     10a:	86 81       	ldd	r24, Z+6	; 0x06
     10c:	97 81       	ldd	r25, Z+7	; 0x07
     10e:	a0 85       	ldd	r26, Z+8	; 0x08
     110:	b1 85       	ldd	r27, Z+9	; 0x09
	unsigned long SQ = self->SouthQueue;
     112:	42 85       	ldd	r20, Z+10	; 0x0a
     114:	53 85       	ldd	r21, Z+11	; 0x0b
     116:	64 85       	ldd	r22, Z+12	; 0x0c
     118:	75 85       	ldd	r23, Z+13	; 0x0d
	unsigned char newLights = NORTHRED_SOUTHRED;  // Standard: rött för båda

	// Inga bilar i någon kö -> båda röda
	if (NQ == 0 && SQ == 0) {
     11a:	00 97       	sbiw	r24, 0x00	; 0
     11c:	a1 05       	cpc	r26, r1
     11e:	b1 05       	cpc	r27, r1
     120:	29 f4       	brne	.+10     	; 0x12c <trafficLightController+0x42>
     122:	41 15       	cp	r20, r1
     124:	51 05       	cpc	r21, r1
     126:	61 05       	cpc	r22, r1
     128:	71 05       	cpc	r23, r1
     12a:	b1 f0       	breq	.+44     	; 0x158 <trafficLightController+0x6e>
		newLights = NORTHRED_SOUTHRED;
	}
	// Endast bilar i northbound
	else if (NQ > 0 && SQ == 0) {
     12c:	00 97       	sbiw	r24, 0x00	; 0
     12e:	a1 05       	cpc	r26, r1
     130:	b1 05       	cpc	r27, r1
     132:	29 f0       	breq	.+10     	; 0x13e <trafficLightController+0x54>
     134:	41 15       	cp	r20, r1
     136:	51 05       	cpc	r21, r1
     138:	61 05       	cpc	r22, r1
     13a:	71 05       	cpc	r23, r1
     13c:	79 f0       	breq	.+30     	; 0x15c <trafficLightController+0x72>
		newLights = NORTHGREEN_SOUTHRED;
	}
	// Endast bilar i southbound
	else if (SQ > 0 && NQ == 0) {
     13e:	45 2b       	or	r20, r21
     140:	46 2b       	or	r20, r22
     142:	47 2b       	or	r20, r23
     144:	21 f0       	breq	.+8      	; 0x14e <trafficLightController+0x64>
     146:	89 2b       	or	r24, r25
     148:	8a 2b       	or	r24, r26
     14a:	8b 2b       	or	r24, r27
     14c:	49 f0       	breq	.+18     	; 0x160 <trafficLightController+0x76>
		newLights = NORTHRED_SOUTHGREEN;
	}
	// Båda sidor har bilar i kö
	else {
		// Enkel logik: välj den senaste "queue sensor" (north eller south)
		if (self->lastQueueSensor) {
     14e:	80 8d       	ldd	r24, Z+24	; 0x18
     150:	88 23       	and	r24, r24
     152:	41 f0       	breq	.+16     	; 0x164 <trafficLightController+0x7a>
			// Senaste ankomst från northsound
			newLights = NORTHGREEN_SOUTHRED;
     154:	89 e0       	ldi	r24, 0x09	; 9
     156:	07 c0       	rjmp	.+14     	; 0x166 <trafficLightController+0x7c>
	unsigned long SQ = self->SouthQueue;
	unsigned char newLights = NORTHRED_SOUTHRED;  // Standard: rött för båda

	// Inga bilar i någon kö -> båda röda
	if (NQ == 0 && SQ == 0) {
		newLights = NORTHRED_SOUTHRED;
     158:	8a e0       	ldi	r24, 0x0A	; 10
     15a:	05 c0       	rjmp	.+10     	; 0x166 <trafficLightController+0x7c>
	}
	// Endast bilar i northbound
	else if (NQ > 0 && SQ == 0) {
		newLights = NORTHGREEN_SOUTHRED;
     15c:	89 e0       	ldi	r24, 0x09	; 9
     15e:	03 c0       	rjmp	.+6      	; 0x166 <trafficLightController+0x7c>
	}
	// Endast bilar i southbound
	else if (SQ > 0 && NQ == 0) {
		newLights = NORTHRED_SOUTHGREEN;
     160:	86 e0       	ldi	r24, 0x06	; 6
     162:	01 c0       	rjmp	.+2      	; 0x166 <trafficLightController+0x7c>
		if (self->lastQueueSensor) {
			// Senaste ankomst från northsound
			newLights = NORTHGREEN_SOUTHRED;
			} else {
			// Senaste ankomst från southbound
			newLights = NORTHRED_SOUTHGREEN;
     164:	86 e0       	ldi	r24, 0x06	; 6
		}
	}

	// Om de nya lampinställningarna skiljer sig, uppdatera och skicka via seriell
	if (newLights != self->LightStatus) {
     166:	92 89       	ldd	r25, Z+18	; 0x12
     168:	89 17       	cp	r24, r25
     16a:	99 f0       	breq	.+38     	; 0x192 <trafficLightController+0xa8>
		self->LightStatus = newLights;
     16c:	82 8b       	std	Z+18, r24	; 0x12
		ASYNC(self->serialCom, USARTtransmit, newLights);
     16e:	04 81       	ldd	r16, Z+4	; 0x04
     170:	15 81       	ldd	r17, Z+5	; 0x05
     172:	c8 2e       	mov	r12, r24
     174:	d1 2c       	mov	r13, r1
     176:	0f 2e       	mov	r0, r31
     178:	f4 eb       	ldi	r31, 0xB4	; 180
     17a:	ef 2e       	mov	r14, r31
     17c:	f3 e0       	ldi	r31, 0x03	; 3
     17e:	ff 2e       	mov	r15, r31
     180:	f0 2d       	mov	r31, r0
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	a9 01       	movw	r20, r18
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	70 e0       	ldi	r23, 0x00	; 0
     18c:	cb 01       	movw	r24, r22
     18e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	}
}
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	08 95       	ret

000001a0 <carLeavesBridge>:

// carLeavesBridge: AFTER 5 sekunder efter att en bil kör in.
int carLeavesBridge(Controller *self, int arg) {
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	0f 93       	push	r16
     1aa:	1f 93       	push	r17
	// Minskar antalet bilar på bron om det är minst 1
	if (self->BridgeAmount > 0) {
     1ac:	fc 01       	movw	r30, r24
     1ae:	46 85       	ldd	r20, Z+14	; 0x0e
     1b0:	57 85       	ldd	r21, Z+15	; 0x0f
     1b2:	60 89       	ldd	r22, Z+16	; 0x10
     1b4:	71 89       	ldd	r23, Z+17	; 0x11
     1b6:	41 15       	cp	r20, r1
     1b8:	51 05       	cpc	r21, r1
     1ba:	61 05       	cpc	r22, r1
     1bc:	71 05       	cpc	r23, r1
     1be:	41 f0       	breq	.+16     	; 0x1d0 <carLeavesBridge+0x30>
		self->BridgeAmount--;
     1c0:	41 50       	subi	r20, 0x01	; 1
     1c2:	51 09       	sbc	r21, r1
     1c4:	61 09       	sbc	r22, r1
     1c6:	71 09       	sbc	r23, r1
     1c8:	46 87       	std	Z+14, r20	; 0x0e
     1ca:	57 87       	std	Z+15, r21	; 0x0f
     1cc:	60 8b       	std	Z+16, r22	; 0x10
     1ce:	71 8b       	std	Z+17, r23	; 0x11
	}
	// Anropa trafficLightController för att uppdatera ljusen igen efter att bilen har lämnat
	ASYNC(self, trafficLightController, 0);
     1d0:	c1 2c       	mov	r12, r1
     1d2:	d1 2c       	mov	r13, r1
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f5 e7       	ldi	r31, 0x75	; 117
     1d8:	ef 2e       	mov	r14, r31
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	ff 2e       	mov	r15, r31
     1de:	f0 2d       	mov	r31, r0
     1e0:	8c 01       	movw	r16, r24
     1e2:	20 e0       	ldi	r18, 0x00	; 0
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	a9 01       	movw	r20, r18
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	cb 01       	movw	r24, r22
     1ee:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	return 0;
}
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	08 95       	ret

00000204 <afterRedGap>:

// afterRedGap: kort period med rött ljus på båda sidor efter att en bil har kört in
int afterRedGap(Controller *self, int arg) {
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
	// Anropa trafficLightController igen för att bestämma vilka lampor som ska lysa
	ASYNC(self, trafficLightController, 0);
     210:	c1 2c       	mov	r12, r1
     212:	d1 2c       	mov	r13, r1
     214:	0f 2e       	mov	r0, r31
     216:	f5 e7       	ldi	r31, 0x75	; 117
     218:	ef 2e       	mov	r14, r31
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 2d       	mov	r31, r0
     220:	8c 01       	movw	r16, r24
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	a9 01       	movw	r20, r18
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	cb 01       	movw	r24, r22
     22e:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	return 0;
}
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	ff 90       	pop	r15
     23c:	ef 90       	pop	r14
     23e:	df 90       	pop	r13
     240:	cf 90       	pop	r12
     242:	08 95       	ret

00000244 <bitParser>:

// bitParser: Hanterar inkommande bitar  (arrival och entry)
void bitParser(Controller *self, int arg)
{
     244:	bf 92       	push	r11
     246:	cf 92       	push	r12
     248:	df 92       	push	r13
     24a:	ef 92       	push	r14
     24c:	ff 92       	push	r15
     24e:	0f 93       	push	r16
     250:	1f 93       	push	r17
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
     256:	ec 01       	movw	r28, r24
     258:	b6 2e       	mov	r11, r22


	// HANTERA ANKOMSTER
	if ((arg & NORTH_ARRIVAL) == NORTH_ARRIVAL) {
     25a:	60 ff       	sbrs	r22, 0
     25c:	0d c0       	rjmp	.+26     	; 0x278 <bitParser+0x34>
		self->NorthQueue++;
     25e:	8e 81       	ldd	r24, Y+6	; 0x06
     260:	9f 81       	ldd	r25, Y+7	; 0x07
     262:	a8 85       	ldd	r26, Y+8	; 0x08
     264:	b9 85       	ldd	r27, Y+9	; 0x09
     266:	01 96       	adiw	r24, 0x01	; 1
     268:	a1 1d       	adc	r26, r1
     26a:	b1 1d       	adc	r27, r1
     26c:	8e 83       	std	Y+6, r24	; 0x06
     26e:	9f 83       	std	Y+7, r25	; 0x07
     270:	a8 87       	std	Y+8, r26	; 0x08
     272:	b9 87       	std	Y+9, r27	; 0x09
		self->lastQueueSensor = true;  // Senaste kön var från northbound.
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	88 8f       	std	Y+24, r24	; 0x18
	}
	if ((arg & SOUTH_ARRIVAL) == SOUTH_ARRIVAL) {
     278:	b2 fe       	sbrs	r11, 2
     27a:	0c c0       	rjmp	.+24     	; 0x294 <bitParser+0x50>
		self->SouthQueue++;
     27c:	8a 85       	ldd	r24, Y+10	; 0x0a
     27e:	9b 85       	ldd	r25, Y+11	; 0x0b
     280:	ac 85       	ldd	r26, Y+12	; 0x0c
     282:	bd 85       	ldd	r27, Y+13	; 0x0d
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	a1 1d       	adc	r26, r1
     288:	b1 1d       	adc	r27, r1
     28a:	8a 87       	std	Y+10, r24	; 0x0a
     28c:	9b 87       	std	Y+11, r25	; 0x0b
     28e:	ac 87       	std	Y+12, r26	; 0x0c
     290:	bd 87       	std	Y+13, r27	; 0x0d
		self->lastQueueSensor = false; // Senaste kön var från southbound.
     292:	18 8e       	std	Y+24, r1	; 0x18
	}

	// Hantera entries.
	if ((arg & NORTH_ENTRY) == NORTH_ENTRY) {
     294:	b1 fe       	sbrs	r11, 1
     296:	59 c0       	rjmp	.+178    	; 0x34a <bitParser+0x106>
		// Kolla om north ljuset är grönt
		if (self->LightStatus & NORTH_GREEN) {
     298:	8a 89       	ldd	r24, Y+18	; 0x12
     29a:	80 ff       	sbrs	r24, 0
     29c:	56 c0       	rjmp	.+172    	; 0x34a <bitParser+0x106>
			if (self->NorthQueue > 0) {
     29e:	8e 81       	ldd	r24, Y+6	; 0x06
     2a0:	9f 81       	ldd	r25, Y+7	; 0x07
     2a2:	a8 85       	ldd	r26, Y+8	; 0x08
     2a4:	b9 85       	ldd	r27, Y+9	; 0x09
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	a1 05       	cpc	r26, r1
     2aa:	b1 05       	cpc	r27, r1
     2ac:	39 f0       	breq	.+14     	; 0x2bc <bitParser+0x78>
				self->NorthQueue--;
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	a1 09       	sbc	r26, r1
     2b2:	b1 09       	sbc	r27, r1
     2b4:	8e 83       	std	Y+6, r24	; 0x06
     2b6:	9f 83       	std	Y+7, r25	; 0x07
     2b8:	a8 87       	std	Y+8, r26	; 0x08
     2ba:	b9 87       	std	Y+9, r27	; 0x09
			}
			self->BridgeAmount++;
     2bc:	8e 85       	ldd	r24, Y+14	; 0x0e
     2be:	9f 85       	ldd	r25, Y+15	; 0x0f
     2c0:	a8 89       	ldd	r26, Y+16	; 0x10
     2c2:	b9 89       	ldd	r27, Y+17	; 0x11
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	a1 1d       	adc	r26, r1
     2c8:	b1 1d       	adc	r27, r1
     2ca:	8e 87       	std	Y+14, r24	; 0x0e
     2cc:	9f 87       	std	Y+15, r25	; 0x0f
     2ce:	a8 8b       	std	Y+16, r26	; 0x10
     2d0:	b9 8b       	std	Y+17, r27	; 0x11
			// Planera att bilen lämnar bron efter 5 sek
			AFTER(MSEC(BRIDGE_TIME_MS), self, carLeavesBridge, 1);
     2d2:	cc 24       	eor	r12, r12
     2d4:	c3 94       	inc	r12
     2d6:	d1 2c       	mov	r13, r1
     2d8:	0f 2e       	mov	r0, r31
     2da:	f0 ed       	ldi	r31, 0xD0	; 208
     2dc:	ef 2e       	mov	r14, r31
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	ff 2e       	mov	r15, r31
     2e2:	f0 2d       	mov	r31, r0
     2e4:	8e 01       	movw	r16, r28
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	a9 01       	movw	r20, r18
     2ec:	6a e5       	ldi	r22, 0x5A	; 90
     2ee:	72 e6       	ldi	r23, 0x62	; 98
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

			// Sätt båda sidor till rött direkt när bilen gått in
			self->LightStatus = NORTHRED_SOUTHRED;
     2f8:	8a e0       	ldi	r24, 0x0A	; 10
     2fa:	8a 8b       	std	Y+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHRED);
     2fc:	0c 81       	ldd	r16, Y+4	; 0x04
     2fe:	1d 81       	ldd	r17, Y+5	; 0x05
     300:	0f 2e       	mov	r0, r31
     302:	fa e0       	ldi	r31, 0x0A	; 10
     304:	cf 2e       	mov	r12, r31
     306:	d1 2c       	mov	r13, r1
     308:	f0 2d       	mov	r31, r0
     30a:	0f 2e       	mov	r0, r31
     30c:	f4 eb       	ldi	r31, 0xB4	; 180
     30e:	ef 2e       	mov	r14, r31
     310:	f3 e0       	ldi	r31, 0x03	; 3
     312:	ff 2e       	mov	r15, r31
     314:	f0 2d       	mov	r31, r0
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	a9 01       	movw	r20, r18
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	cb 01       	movw	r24, r22
     322:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

			// Efter en kort bara rött period, anropas afterRedGap
			AFTER(MSEC(ALL_RED_GAP_MS), self, afterRedGap, 0);
     326:	c1 2c       	mov	r12, r1
     328:	d1 2c       	mov	r13, r1
     32a:	0f 2e       	mov	r0, r31
     32c:	f2 e0       	ldi	r31, 0x02	; 2
     32e:	ef 2e       	mov	r14, r31
     330:	f1 e0       	ldi	r31, 0x01	; 1
     332:	ff 2e       	mov	r15, r31
     334:	f0 2d       	mov	r31, r0
     336:	8e 01       	movw	r16, r28
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	a9 01       	movw	r20, r18
     33e:	62 e1       	ldi	r22, 0x12	; 18
     340:	7a e7       	ldi	r23, 0x7A	; 122
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
		}
	}

	if ((arg & SOUTH_ENTRY) == SOUTH_ENTRY) {
     34a:	b3 fe       	sbrs	r11, 3
     34c:	58 c0       	rjmp	.+176    	; 0x3fe <bitParser+0x1ba>
		// Kolla om det south ljuset är grönt
		if (self->LightStatus & SOUTH_GREEN) {
     34e:	8a 89       	ldd	r24, Y+18	; 0x12
     350:	82 ff       	sbrs	r24, 2
     352:	55 c0       	rjmp	.+170    	; 0x3fe <bitParser+0x1ba>
			if (self->SouthQueue > 0) {
     354:	8a 85       	ldd	r24, Y+10	; 0x0a
     356:	9b 85       	ldd	r25, Y+11	; 0x0b
     358:	ac 85       	ldd	r26, Y+12	; 0x0c
     35a:	bd 85       	ldd	r27, Y+13	; 0x0d
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	a1 05       	cpc	r26, r1
     360:	b1 05       	cpc	r27, r1
     362:	39 f0       	breq	.+14     	; 0x372 <bitParser+0x12e>
				self->SouthQueue--;
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	a1 09       	sbc	r26, r1
     368:	b1 09       	sbc	r27, r1
     36a:	8a 87       	std	Y+10, r24	; 0x0a
     36c:	9b 87       	std	Y+11, r25	; 0x0b
     36e:	ac 87       	std	Y+12, r26	; 0x0c
     370:	bd 87       	std	Y+13, r27	; 0x0d
			}
			self->BridgeAmount++;
     372:	8e 85       	ldd	r24, Y+14	; 0x0e
     374:	9f 85       	ldd	r25, Y+15	; 0x0f
     376:	a8 89       	ldd	r26, Y+16	; 0x10
     378:	b9 89       	ldd	r27, Y+17	; 0x11
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	a1 1d       	adc	r26, r1
     37e:	b1 1d       	adc	r27, r1
     380:	8e 87       	std	Y+14, r24	; 0x0e
     382:	9f 87       	std	Y+15, r25	; 0x0f
     384:	a8 8b       	std	Y+16, r26	; 0x10
     386:	b9 8b       	std	Y+17, r27	; 0x11
			// Planera att bilen lämnar bron efter 5 sek
			AFTER(MSEC(BRIDGE_TIME_MS), self, carLeavesBridge, 0);
     388:	c1 2c       	mov	r12, r1
     38a:	d1 2c       	mov	r13, r1
     38c:	0f 2e       	mov	r0, r31
     38e:	f0 ed       	ldi	r31, 0xD0	; 208
     390:	ef 2e       	mov	r14, r31
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	ff 2e       	mov	r15, r31
     396:	f0 2d       	mov	r31, r0
     398:	8e 01       	movw	r16, r28
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	a9 01       	movw	r20, r18
     3a0:	6a e5       	ldi	r22, 0x5A	; 90
     3a2:	72 e6       	ldi	r23, 0x62	; 98
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

			// Sätt båda sidor till rött när bilen precis gått in
			self->LightStatus = NORTHRED_SOUTHRED;
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	8a 8b       	std	Y+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHRED);
     3b0:	0c 81       	ldd	r16, Y+4	; 0x04
     3b2:	1d 81       	ldd	r17, Y+5	; 0x05
     3b4:	0f 2e       	mov	r0, r31
     3b6:	fa e0       	ldi	r31, 0x0A	; 10
     3b8:	cf 2e       	mov	r12, r31
     3ba:	d1 2c       	mov	r13, r1
     3bc:	f0 2d       	mov	r31, r0
     3be:	0f 2e       	mov	r0, r31
     3c0:	f4 eb       	ldi	r31, 0xB4	; 180
     3c2:	ef 2e       	mov	r14, r31
     3c4:	f3 e0       	ldi	r31, 0x03	; 3
     3c6:	ff 2e       	mov	r15, r31
     3c8:	f0 2d       	mov	r31, r0
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	a9 01       	movw	r20, r18
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	cb 01       	movw	r24, r22
     3d6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

			// Efter en kort bara rött period, anropas afterRedGap
			AFTER(MSEC(ALL_RED_GAP_MS), self, afterRedGap, 0);
     3da:	c1 2c       	mov	r12, r1
     3dc:	d1 2c       	mov	r13, r1
     3de:	0f 2e       	mov	r0, r31
     3e0:	f2 e0       	ldi	r31, 0x02	; 2
     3e2:	ef 2e       	mov	r14, r31
     3e4:	f1 e0       	ldi	r31, 0x01	; 1
     3e6:	ff 2e       	mov	r15, r31
     3e8:	f0 2d       	mov	r31, r0
     3ea:	8e 01       	movw	r16, r28
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	a9 01       	movw	r20, r18
     3f2:	62 e1       	ldi	r22, 0x12	; 18
     3f4:	7a e7       	ldi	r23, 0x7A	; 122
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
		}
	}

	// Anropa trafficLightController ifall nya bilar i kö ändrar logiken
	ASYNC(self, trafficLightController, 0);
     3fe:	c1 2c       	mov	r12, r1
     400:	d1 2c       	mov	r13, r1
     402:	0f 2e       	mov	r0, r31
     404:	f5 e7       	ldi	r31, 0x75	; 117
     406:	ef 2e       	mov	r14, r31
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ff 2e       	mov	r15, r31
     40c:	f0 2d       	mov	r31, r0
     40e:	8e 01       	movw	r16, r28
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	a9 01       	movw	r20, r18
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	cb 01       	movw	r24, r22
     41c:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	ef 90       	pop	r14
     42c:	df 90       	pop	r13
     42e:	cf 90       	pop	r12
     430:	bf 90       	pop	r11
     432:	08 95       	ret

00000434 <sensorEvent>:

int sensorEvent(Controller *self, int sensorData) {
	bitParser(self, (uint8_t) sensorData);
     434:	77 27       	eor	r23, r23
     436:	0e 94 22 01 	call	0x244	; 0x244 <bitParser>
	return 0;
}
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret

00000440 <getNorthQueue>:


int getNorthQueue(Controller *self, int unused) {
	return self->NorthQueue;
}
     440:	fc 01       	movw	r30, r24
     442:	86 81       	ldd	r24, Z+6	; 0x06
     444:	97 81       	ldd	r25, Z+7	; 0x07
     446:	08 95       	ret

00000448 <getSouthQueue>:

int getSouthQueue(Controller *self, int unused) {
	return self->SouthQueue;
}
     448:	fc 01       	movw	r30, r24
     44a:	82 85       	ldd	r24, Z+10	; 0x0a
     44c:	93 85       	ldd	r25, Z+11	; 0x0b
     44e:	08 95       	ret

00000450 <getBridgeAmount>:

int getBridgeAmount(Controller *self, int unused) {
	return self->BridgeAmount;
}
     450:	fc 01       	movw	r30, r24
     452:	86 85       	ldd	r24, Z+14	; 0x0e
     454:	97 85       	ldd	r25, Z+15	; 0x0f
     456:	08 95       	ret

00000458 <periodicUpdate>:
	printAt(SYNC(self->controller, getSouthQueue, 0), 4);
	return 0;
}

// periodicUpdate: uppdaterar displayen och schemalägger sig själv igen
int periodicUpdate(GUI *self, int arg) {
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
	// Uppdatera displayen omedelbart
	ASYNC(self, updateDisplay, 0);
     468:	c1 2c       	mov	r12, r1
     46a:	d1 2c       	mov	r13, r1
     46c:	0f 2e       	mov	r0, r31
     46e:	f3 e1       	ldi	r31, 0x13	; 19
     470:	ef 2e       	mov	r14, r31
     472:	f3 e0       	ldi	r31, 0x03	; 3
     474:	ff 2e       	mov	r15, r31
     476:	f0 2d       	mov	r31, r0
     478:	8c 01       	movw	r16, r24
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	a9 01       	movw	r20, r18
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	cb 01       	movw	r24, r22
     486:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

	// Schemalägg nästa uppdatering efter 500 ms
	AFTER(MSEC(500), self, periodicUpdate, 0);
     48a:	0f 2e       	mov	r0, r31
     48c:	fc e2       	ldi	r31, 0x2C	; 44
     48e:	ef 2e       	mov	r14, r31
     490:	f2 e0       	ldi	r31, 0x02	; 2
     492:	ff 2e       	mov	r15, r31
     494:	f0 2d       	mov	r31, r0
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	a9 01       	movw	r20, r18
     49c:	69 e0       	ldi	r22, 0x09	; 9
     49e:	7d e3       	ldi	r23, 0x3D	; 61
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	return 0;
}
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	ef 90       	pop	r14
     4b8:	df 90       	pop	r13
     4ba:	cf 90       	pop	r12
     4bc:	08 95       	ret

000004be <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     4be:	80 ec       	ldi	r24, 0xC0	; 192
     4c0:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     4c4:	87 eb       	ldi	r24, 0xB7	; 183
     4c6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     4ca:	8f e0       	ldi	r24, 0x0F	; 15
     4cc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     4d0:	08 95       	ret

000004d2 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     4d2:	66 30       	cpi	r22, 0x06	; 6
     4d4:	71 05       	cpc	r23, r1
     4d6:	08 f0       	brcs	.+2      	; 0x4da <writeChar+0x8>
     4d8:	6b c0       	rjmp	.+214    	; 0x5b0 <__stack+0xb1>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     4da:	90 ed       	ldi	r25, 0xD0	; 208
     4dc:	98 0f       	add	r25, r24
     4de:	9a 30       	cpi	r25, 0x0A	; 10
     4e0:	50 f4       	brcc	.+20     	; 0x4f6 <writeChar+0x24>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     4e2:	e8 2f       	mov	r30, r24
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	f0 97       	sbiw	r30, 0x30	; 48
     4e8:	ee 0f       	add	r30, r30
     4ea:	ff 1f       	adc	r31, r31
     4ec:	e3 5d       	subi	r30, 0xD3	; 211
     4ee:	fe 4f       	sbci	r31, 0xFE	; 254
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
     4f4:	02 c0       	rjmp	.+4      	; 0x4fa <writeChar+0x28>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     4fa:	fb 01       	movw	r30, r22
     4fc:	77 23       	and	r23, r23
     4fe:	0c f4       	brge	.+2      	; 0x502 <__stack+0x3>
     500:	31 96       	adiw	r30, 0x01	; 1
     502:	f5 95       	asr	r31
     504:	e7 95       	ror	r30
     506:	e4 51       	subi	r30, 0x14	; 20
     508:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     50a:	61 70       	andi	r22, 0x01	; 1
     50c:	70 78       	andi	r23, 0x80	; 128
     50e:	77 23       	and	r23, r23
     510:	34 f4       	brge	.+12     	; 0x51e <__stack+0x1f>
     512:	61 50       	subi	r22, 0x01	; 1
     514:	71 09       	sbc	r23, r1
     516:	6e 6f       	ori	r22, 0xFE	; 254
     518:	7f 6f       	ori	r23, 0xFF	; 255
     51a:	6f 5f       	subi	r22, 0xFF	; 255
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	66 0f       	add	r22, r22
     520:	77 1f       	adc	r23, r23
     522:	66 0f       	add	r22, r22
     524:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     526:	30 81       	ld	r19, Z
     528:	4f e0       	ldi	r20, 0x0F	; 15
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	06 2e       	mov	r0, r22
     52e:	02 c0       	rjmp	.+4      	; 0x534 <__stack+0x35>
     530:	44 0f       	add	r20, r20
     532:	55 1f       	adc	r21, r21
     534:	0a 94       	dec	r0
     536:	e2 f7       	brpl	.-8      	; 0x530 <__stack+0x31>
     538:	24 2f       	mov	r18, r20
     53a:	20 95       	com	r18
     53c:	ac 01       	movw	r20, r24
     53e:	4f 70       	andi	r20, 0x0F	; 15
     540:	55 27       	eor	r21, r21
     542:	06 2e       	mov	r0, r22
     544:	02 c0       	rjmp	.+4      	; 0x54a <__stack+0x4b>
     546:	44 0f       	add	r20, r20
     548:	55 1f       	adc	r21, r21
     54a:	0a 94       	dec	r0
     54c:	e2 f7       	brpl	.-8      	; 0x546 <__stack+0x47>
     54e:	32 23       	and	r19, r18
     550:	43 2b       	or	r20, r19
     552:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     554:	35 81       	ldd	r19, Z+5	; 0x05
     556:	ac 01       	movw	r20, r24
     558:	52 95       	swap	r21
     55a:	42 95       	swap	r20
     55c:	4f 70       	andi	r20, 0x0F	; 15
     55e:	45 27       	eor	r20, r21
     560:	5f 70       	andi	r21, 0x0F	; 15
     562:	45 27       	eor	r20, r21
     564:	4f 70       	andi	r20, 0x0F	; 15
     566:	55 27       	eor	r21, r21
     568:	06 2e       	mov	r0, r22
     56a:	02 c0       	rjmp	.+4      	; 0x570 <__stack+0x71>
     56c:	44 0f       	add	r20, r20
     56e:	55 1f       	adc	r21, r21
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <__stack+0x6d>
     574:	32 23       	and	r19, r18
     576:	43 2b       	or	r20, r19
     578:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     57a:	32 85       	ldd	r19, Z+10	; 0x0a
     57c:	49 2f       	mov	r20, r25
     57e:	55 27       	eor	r21, r21
     580:	4f 70       	andi	r20, 0x0F	; 15
     582:	55 27       	eor	r21, r21
     584:	06 2e       	mov	r0, r22
     586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x8d>
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	0a 94       	dec	r0
     58e:	e2 f7       	brpl	.-8      	; 0x588 <__stack+0x89>
     590:	32 23       	and	r19, r18
     592:	43 2b       	or	r20, r19
     594:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     596:	37 85       	ldd	r19, Z+15	; 0x0f
     598:	89 2f       	mov	r24, r25
     59a:	99 27       	eor	r25, r25
     59c:	82 95       	swap	r24
     59e:	8f 70       	andi	r24, 0x0F	; 15
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <__stack+0xa7>
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	6a 95       	dec	r22
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <__stack+0xa3>
     5aa:	23 23       	and	r18, r19
     5ac:	82 2b       	or	r24, r18
     5ae:	87 87       	std	Z+15, r24	; 0x0f
     5b0:	08 95       	ret

000005b2 <printAt>:
}

void printAt(long num, int pos) {
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	4b 01       	movw	r8, r22
     5c8:	5c 01       	movw	r10, r24
     5ca:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     5cc:	24 e6       	ldi	r18, 0x64	; 100
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	50 e0       	ldi	r21, 0x00	; 0
     5d4:	0e 94 23 10 	call	0x2046	; 0x2046 <__divmodsi4>
     5d8:	0f 2e       	mov	r0, r31
     5da:	fa e0       	ldi	r31, 0x0A	; 10
     5dc:	cf 2e       	mov	r12, r31
     5de:	d1 2c       	mov	r13, r1
     5e0:	e1 2c       	mov	r14, r1
     5e2:	f1 2c       	mov	r15, r1
     5e4:	f0 2d       	mov	r31, r0
     5e6:	a7 01       	movw	r20, r14
     5e8:	96 01       	movw	r18, r12
     5ea:	0e 94 23 10 	call	0x2046	; 0x2046 <__divmodsi4>
     5ee:	be 01       	movw	r22, r28
     5f0:	80 e3       	ldi	r24, 0x30	; 48
     5f2:	82 0f       	add	r24, r18
     5f4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <writeChar>
	pp++;
     5f8:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     5fa:	c5 01       	movw	r24, r10
     5fc:	b4 01       	movw	r22, r8
     5fe:	a7 01       	movw	r20, r14
     600:	96 01       	movw	r18, r12
     602:	0e 94 23 10 	call	0x2046	; 0x2046 <__divmodsi4>
     606:	86 2f       	mov	r24, r22
     608:	be 01       	movw	r22, r28
     60a:	80 5d       	subi	r24, 0xD0	; 208
     60c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <writeChar>
	
}
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	ff 90       	pop	r15
     616:	ef 90       	pop	r14
     618:	df 90       	pop	r13
     61a:	cf 90       	pop	r12
     61c:	bf 90       	pop	r11
     61e:	af 90       	pop	r10
     620:	9f 90       	pop	r9
     622:	8f 90       	pop	r8
     624:	08 95       	ret

00000626 <updateDisplay>:

// updateDisplay: Hämtar värden för NorthQueue, BridgeAmount, SouthQueue och skriver på LCD
int updateDisplay(GUI *self, int arg) {
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	ec 01       	movw	r28, r24
	printAt(SYNC(self->controller, getNorthQueue, 0), 0);
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	60 e2       	ldi	r22, 0x20	; 32
     632:	72 e0       	ldi	r23, 0x02	; 2
     634:	8c 81       	ldd	r24, Y+4	; 0x04
     636:	9d 81       	ldd	r25, Y+5	; 0x05
     638:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <sync>
     63c:	bc 01       	movw	r22, r24
     63e:	99 0f       	add	r25, r25
     640:	88 0b       	sbc	r24, r24
     642:	99 0b       	sbc	r25, r25
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printAt>
	printAt(SYNC(self->controller, getBridgeAmount, 0), 2);
     64c:	40 e0       	ldi	r20, 0x00	; 0
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	68 e2       	ldi	r22, 0x28	; 40
     652:	72 e0       	ldi	r23, 0x02	; 2
     654:	8c 81       	ldd	r24, Y+4	; 0x04
     656:	9d 81       	ldd	r25, Y+5	; 0x05
     658:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <sync>
     65c:	bc 01       	movw	r22, r24
     65e:	99 0f       	add	r25, r25
     660:	88 0b       	sbc	r24, r24
     662:	99 0b       	sbc	r25, r25
     664:	42 e0       	ldi	r20, 0x02	; 2
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printAt>
	printAt(SYNC(self->controller, getSouthQueue, 0), 4);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	64 e2       	ldi	r22, 0x24	; 36
     672:	72 e0       	ldi	r23, 0x02	; 2
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	9d 81       	ldd	r25, Y+5	; 0x05
     678:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <sync>
     67c:	bc 01       	movw	r22, r24
     67e:	99 0f       	add	r25, r25
     680:	88 0b       	sbc	r24, r24
     682:	99 0b       	sbc	r25, r25
     684:	44 e0       	ldi	r20, 0x04	; 4
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <printAt>
	return 0;
}
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <interruptreceiver>:
#include "interruptHandler.h"

// interruptreceiver: Hanterar avbrott från USART RX, arg = IRQ-index, men i detta fall ignoreras det. Den inlästa byten finns i UDR0.
int interruptreceiver(Interrupthandler *self, int arg) {
     696:	cf 92       	push	r12
     698:	df 92       	push	r13
     69a:	ef 92       	push	r14
     69c:	ff 92       	push	r15
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
	// Läs tecknet från UDR0
	char sensorByte = UDR0;
     6a2:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>

	// Skicka vidare till Controller som ett sensorEvent
	ASYNC(self->controller, sensorEvent, sensorByte);
     6a6:	fc 01       	movw	r30, r24
     6a8:	04 81       	ldd	r16, Z+4	; 0x04
     6aa:	15 81       	ldd	r17, Z+5	; 0x05
     6ac:	d1 2c       	mov	r13, r1
     6ae:	0f 2e       	mov	r0, r31
     6b0:	fa e1       	ldi	r31, 0x1A	; 26
     6b2:	ef 2e       	mov	r14, r31
     6b4:	f2 e0       	ldi	r31, 0x02	; 2
     6b6:	ff 2e       	mov	r15, r31
     6b8:	f0 2d       	mov	r31, r0
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	a9 01       	movw	r20, r18
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	cb 01       	movw	r24, r22
     6c6:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>

	return 0;
}
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	08 95       	ret

000006dc <startProgram>:
Controller controller = initController(&serial);
GUI	gui = initGUI(&controller);
Interrupthandler ih = initInterruptHandler(&controller);

// startProgram() körs vid uppstart. Uppdatera bara displayen.
int startProgram(GUI *self, int arg) {
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	// Skriv initial display
	ASYNC(self, updateDisplay, 0);
     6ec:	c1 2c       	mov	r12, r1
     6ee:	d1 2c       	mov	r13, r1
     6f0:	0f 2e       	mov	r0, r31
     6f2:	f3 e1       	ldi	r31, 0x13	; 19
     6f4:	ef 2e       	mov	r14, r31
     6f6:	f3 e0       	ldi	r31, 0x03	; 3
     6f8:	ff 2e       	mov	r15, r31
     6fa:	f0 2d       	mov	r31, r0
     6fc:	8c 01       	movw	r16, r24
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
     702:	a9 01       	movw	r20, r18
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	cb 01       	movw	r24, r22
     70a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	// Starta uppdatering varje 500 ms
	ASYNC(self, periodicUpdate, 0);
     70e:	0f 2e       	mov	r0, r31
     710:	fc e2       	ldi	r31, 0x2C	; 44
     712:	ef 2e       	mov	r14, r31
     714:	f2 e0       	ldi	r31, 0x02	; 2
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	a9 01       	movw	r20, r18
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	cb 01       	movw	r24, r22
     726:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
	return 0;
}
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	df 91       	pop	r29
     730:	cf 91       	pop	r28
     732:	1f 91       	pop	r17
     734:	0f 91       	pop	r16
     736:	ff 90       	pop	r15
     738:	ef 90       	pop	r14
     73a:	df 90       	pop	r13
     73c:	cf 90       	pop	r12
     73e:	08 95       	ret

00000740 <main>:

int main(void) {
	// Initiera timer/klocka via avr_init().
	avr_init();
     740:	0e 94 4d 00 	call	0x9a	; 0x9a <avr_init>
	
	// Initiera LCD innan vi börjar skriva ut.
	lcd_init();
     744:	0e 94 5f 02 	call	0x4be	; 0x4be <lcd_init>

	// Installera USART som interrupthandler.
	INSTALL(&ih, interruptreceiver, IRQ_USART0_RX);
     748:	48 e0       	ldi	r20, 0x08	; 8
     74a:	6b e4       	ldi	r22, 0x4B	; 75
     74c:	73 e0       	ldi	r23, 0x03	; 3
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <install>
	
	// TINYTIMBER startar kernel. Vi anropar startProgram på gui som första metod.
	return TINYTIMBER(&gui, startProgram, 0);
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	6e e6       	ldi	r22, 0x6E	; 110
     75c:	73 e0       	ldi	r23, 0x03	; 3
     75e:	86 e0       	ldi	r24, 0x06	; 6
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 0c 10 	call	0x2018	; 0x2018 <tinytimber>
}
     766:	08 95       	ret

00000768 <USARTtransmit>:
#include "serialCom.h"

// USARTtransmit: Skickar en byte via USART
int USARTtransmit(SerialCom *self, int arg) {
	// Vänta tills send buffern är tom
	while (!(UCSR0A & (1 << UDRE0))) {
     768:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     76c:	85 ff       	sbrs	r24, 5
     76e:	fc cf       	rjmp	.-8      	; 0x768 <USARTtransmit>
	}
	// Skriv byten till UDR0 för sändning
	UDR0 = (uint8_t) arg;
     770:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	return 0;
}
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 95       	ret

0000077a <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <initialize+0x6>
     780:	00 d0       	rcall	.+0      	; 0x782 <initialize+0x8>
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	18 c0       	rjmp	.+48     	; 0x7bc <initialize+0x42>
     78c:	ac 01       	movw	r20, r24
     78e:	4f 5f       	subi	r20, 0xFF	; 255
     790:	5f 4f       	sbci	r21, 0xFF	; 255
     792:	9a 01       	movw	r18, r20
     794:	22 95       	swap	r18
     796:	32 95       	swap	r19
     798:	30 7f       	andi	r19, 0xF0	; 240
     79a:	32 27       	eor	r19, r18
     79c:	20 7f       	andi	r18, 0xF0	; 240
     79e:	32 27       	eor	r19, r18
     7a0:	27 5d       	subi	r18, 0xD7	; 215
     7a2:	3d 4f       	sbci	r19, 0xFD	; 253
     7a4:	82 95       	swap	r24
     7a6:	92 95       	swap	r25
     7a8:	90 7f       	andi	r25, 0xF0	; 240
     7aa:	98 27       	eor	r25, r24
     7ac:	80 7f       	andi	r24, 0xF0	; 240
     7ae:	98 27       	eor	r25, r24
     7b0:	fc 01       	movw	r30, r24
     7b2:	e7 5d       	subi	r30, 0xD7	; 215
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	31 83       	std	Z+1, r19	; 0x01
     7b8:	20 83       	st	Z, r18
     7ba:	ca 01       	movw	r24, r20
     7bc:	8e 30       	cpi	r24, 0x0E	; 14
     7be:	91 05       	cpc	r25, r1
     7c0:	2c f3       	brlt	.-54     	; 0x78c <initialize+0x12>
     7c2:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <messages+0xe1>
     7c6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <messages+0xe0>
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	15 c0       	rjmp	.+42     	; 0x7fa <initialize+0x80>
     7d0:	ac 01       	movw	r20, r24
     7d2:	4f 5f       	subi	r20, 0xFF	; 255
     7d4:	5f 4f       	sbci	r21, 0xFF	; 255
     7d6:	6d e1       	ldi	r22, 0x1D	; 29
     7d8:	64 9f       	mul	r22, r20
     7da:	90 01       	movw	r18, r0
     7dc:	65 9f       	mul	r22, r21
     7de:	30 0d       	add	r19, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	2c 58       	subi	r18, 0x8C	; 140
     7e4:	3e 4f       	sbci	r19, 0xFE	; 254
     7e6:	68 9f       	mul	r22, r24
     7e8:	f0 01       	movw	r30, r0
     7ea:	69 9f       	mul	r22, r25
     7ec:	f0 0d       	add	r31, r0
     7ee:	11 24       	eor	r1, r1
     7f0:	ec 58       	subi	r30, 0x8C	; 140
     7f2:	fe 4f       	sbci	r31, 0xFE	; 254
     7f4:	31 83       	std	Z+1, r19	; 0x01
     7f6:	20 83       	st	Z, r18
     7f8:	ca 01       	movw	r24, r20
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	91 05       	cpc	r25, r1
     7fe:	44 f3       	brlt	.-48     	; 0x7d0 <initialize+0x56>
     800:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <threads+0x58>
     804:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <threads+0x57>
     808:	1a 82       	std	Y+2, r1	; 0x02
     80a:	19 82       	std	Y+1, r1	; 0x01
     80c:	32 c0       	rjmp	.+100    	; 0x872 <initialize+0xf8>
     80e:	2d e1       	ldi	r18, 0x1D	; 29
     810:	49 81       	ldd	r20, Y+1	; 0x01
     812:	5a 81       	ldd	r21, Y+2	; 0x02
     814:	24 9f       	mul	r18, r20
     816:	c0 01       	movw	r24, r0
     818:	25 9f       	mul	r18, r21
     81a:	90 0d       	add	r25, r0
     81c:	11 24       	eor	r1, r1
     81e:	fc 01       	movw	r30, r24
     820:	e6 58       	subi	r30, 0x86	; 134
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	fc 83       	std	Y+4, r31	; 0x04
     826:	eb 83       	std	Y+3, r30	; 0x03
     828:	cf 01       	movw	r24, r30
     82a:	0e 94 64 10 	call	0x20c8	; 0x20c8 <setjmp>
     82e:	20 e6       	ldi	r18, 0x60	; 96
     830:	49 81       	ldd	r20, Y+1	; 0x01
     832:	5a 81       	ldd	r21, Y+2	; 0x02
     834:	24 9f       	mul	r18, r20
     836:	c0 01       	movw	r24, r0
     838:	25 9f       	mul	r18, r21
     83a:	90 0d       	add	r25, r0
     83c:	11 24       	eor	r1, r1
     83e:	8b 58       	subi	r24, 0x8B	; 139
     840:	9c 4f       	sbci	r25, 0xFC	; 252
     842:	eb 81       	ldd	r30, Y+3	; 0x03
     844:	fc 81       	ldd	r31, Y+4	; 0x04
     846:	91 8b       	std	Z+17, r25	; 0x11
     848:	80 8b       	std	Z+16, r24	; 0x10
     84a:	93 8b       	std	Z+19, r25	; 0x13
     84c:	82 8b       	std	Z+18, r24	; 0x12
     84e:	89 e9       	ldi	r24, 0x99	; 153
     850:	9f e0       	ldi	r25, 0x0F	; 15
     852:	96 8b       	std	Z+22, r25	; 0x16
     854:	85 8b       	std	Z+21, r24	; 0x15
     856:	8d e1       	ldi	r24, 0x1D	; 29
     858:	84 9f       	mul	r24, r20
     85a:	f0 01       	movw	r30, r0
     85c:	85 9f       	mul	r24, r21
     85e:	f0 0d       	add	r31, r0
     860:	11 24       	eor	r1, r1
     862:	ec 58       	subi	r30, 0x8C	; 140
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	15 82       	std	Z+5, r1	; 0x05
     868:	14 82       	std	Z+4, r1	; 0x04
     86a:	4f 5f       	subi	r20, 0xFF	; 255
     86c:	5f 4f       	sbci	r21, 0xFF	; 255
     86e:	5a 83       	std	Y+2, r21	; 0x02
     870:	49 83       	std	Y+1, r20	; 0x01
     872:	29 81       	ldd	r18, Y+1	; 0x01
     874:	3a 81       	ldd	r19, Y+2	; 0x02
     876:	24 30       	cpi	r18, 0x04	; 4
     878:	31 05       	cpc	r19, r1
     87a:	4c f2       	brlt	.-110    	; 0x80e <initialize+0x94>
     87c:	ec e0       	ldi	r30, 0x0C	; 12
     87e:	f2 e0       	ldi	r31, 0x02	; 2
     880:	11 82       	std	Z+1, r1	; 0x01
     882:	10 82       	st	Z, r1
     884:	15 82       	std	Z+5, r1	; 0x05
     886:	14 82       	std	Z+4, r1	; 0x04
     888:	13 82       	std	Z+3, r1	; 0x03
     88a:	12 82       	std	Z+2, r1	; 0x02
     88c:	e1 e6       	ldi	r30, 0x61	; 97
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	80 83       	st	Z, r24
     894:	10 82       	st	Z, r1
     896:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     89a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     89e:	84 e0       	ldi	r24, 0x04	; 4
     8a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <dispatch>:
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <dispatch+0x6>
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
     8c6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
     8ca:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
     8ce:	06 96       	adiw	r24, 0x06	; 6
     8d0:	0e 94 64 10 	call	0x20c8	; 0x20c8 <setjmp>
     8d4:	89 2b       	or	r24, r25
     8d6:	59 f4       	brne	.+22     	; 0x8ee <dispatch+0x36>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <current+0x1>
     8e0:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <current>
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	06 96       	adiw	r24, 0x06	; 6
     8ea:	0e 94 84 10 	call	0x2108	; 0x2108 <longjmp>
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <enqueueByDeadline>:
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	dc 01       	movw	r26, r24
     902:	cb 01       	movw	r24, r22
     904:	eb 01       	movw	r28, r22
     906:	e8 81       	ld	r30, Y
     908:	f9 81       	ldd	r31, Y+1	; 0x01
     90a:	c0 e0       	ldi	r28, 0x00	; 0
     90c:	d0 e0       	ldi	r29, 0x00	; 0
     90e:	04 c0       	rjmp	.+8      	; 0x918 <enqueueByDeadline+0x20>
     910:	ef 01       	movw	r28, r30
     912:	01 90       	ld	r0, Z+
     914:	f0 81       	ld	r31, Z
     916:	e0 2d       	mov	r30, r0
     918:	30 97       	sbiw	r30, 0x00	; 0
     91a:	79 f0       	breq	.+30     	; 0x93a <enqueueByDeadline+0x42>
     91c:	06 81       	ldd	r16, Z+6	; 0x06
     91e:	17 81       	ldd	r17, Z+7	; 0x07
     920:	20 85       	ldd	r18, Z+8	; 0x08
     922:	31 85       	ldd	r19, Z+9	; 0x09
     924:	16 96       	adiw	r26, 0x06	; 6
     926:	4d 91       	ld	r20, X+
     928:	5d 91       	ld	r21, X+
     92a:	6d 91       	ld	r22, X+
     92c:	7c 91       	ld	r23, X
     92e:	19 97       	sbiw	r26, 0x09	; 9
     930:	40 17       	cp	r20, r16
     932:	51 07       	cpc	r21, r17
     934:	62 07       	cpc	r22, r18
     936:	73 07       	cpc	r23, r19
     938:	5c f7       	brge	.-42     	; 0x910 <enqueueByDeadline+0x18>
     93a:	11 96       	adiw	r26, 0x01	; 1
     93c:	fc 93       	st	X, r31
     93e:	ee 93       	st	-X, r30
     940:	20 97       	sbiw	r28, 0x00	; 0
     942:	21 f4       	brne	.+8      	; 0x94c <enqueueByDeadline+0x54>
     944:	fc 01       	movw	r30, r24
     946:	b1 83       	std	Z+1, r27	; 0x01
     948:	a0 83       	st	Z, r26
     94a:	02 c0       	rjmp	.+4      	; 0x950 <enqueueByDeadline+0x58>
     94c:	b9 83       	std	Y+1, r27	; 0x01
     94e:	a8 83       	st	Y, r26
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <enqueueByBaseline>:
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	eb 01       	movw	r28, r22
     968:	e8 81       	ld	r30, Y
     96a:	f9 81       	ldd	r31, Y+1	; 0x01
     96c:	c0 e0       	ldi	r28, 0x00	; 0
     96e:	d0 e0       	ldi	r29, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <enqueueByBaseline+0x20>
     972:	ef 01       	movw	r28, r30
     974:	01 90       	ld	r0, Z+
     976:	f0 81       	ld	r31, Z
     978:	e0 2d       	mov	r30, r0
     97a:	30 97       	sbiw	r30, 0x00	; 0
     97c:	79 f0       	breq	.+30     	; 0x99c <enqueueByBaseline+0x42>
     97e:	02 81       	ldd	r16, Z+2	; 0x02
     980:	13 81       	ldd	r17, Z+3	; 0x03
     982:	24 81       	ldd	r18, Z+4	; 0x04
     984:	35 81       	ldd	r19, Z+5	; 0x05
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	4d 91       	ld	r20, X+
     98a:	5d 91       	ld	r21, X+
     98c:	6d 91       	ld	r22, X+
     98e:	7c 91       	ld	r23, X
     990:	15 97       	sbiw	r26, 0x05	; 5
     992:	40 17       	cp	r20, r16
     994:	51 07       	cpc	r21, r17
     996:	62 07       	cpc	r22, r18
     998:	73 07       	cpc	r23, r19
     99a:	5c f7       	brge	.-42     	; 0x972 <enqueueByBaseline+0x18>
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	fc 93       	st	X, r31
     9a0:	ee 93       	st	-X, r30
     9a2:	20 97       	sbiw	r28, 0x00	; 0
     9a4:	21 f4       	brne	.+8      	; 0x9ae <enqueueByBaseline+0x54>
     9a6:	fc 01       	movw	r30, r24
     9a8:	b1 83       	std	Z+1, r27	; 0x01
     9aa:	a0 83       	st	Z, r26
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <enqueueByBaseline+0x58>
     9ae:	b9 83       	std	Y+1, r27	; 0x01
     9b0:	a8 83       	st	Y, r26
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	08 95       	ret

000009bc <dequeue>:
     9bc:	dc 01       	movw	r26, r24
     9be:	ed 91       	ld	r30, X+
     9c0:	fc 91       	ld	r31, X
     9c2:	11 97       	sbiw	r26, 0x01	; 1
     9c4:	30 97       	sbiw	r30, 0x00	; 0
     9c6:	59 f4       	brne	.+22     	; 0x9de <dequeue+0x22>
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9ce:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     9d2:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	83 bf       	out	0x33, r24	; 51
     9da:	88 95       	sleep
     9dc:	fc cf       	rjmp	.-8      	; 0x9d6 <dequeue+0x1a>
     9de:	20 81       	ld	r18, Z
     9e0:	31 81       	ldd	r19, Z+1	; 0x01
     9e2:	2d 93       	st	X+, r18
     9e4:	3c 93       	st	X, r19
     9e6:	cf 01       	movw	r24, r30
     9e8:	08 95       	ret

000009ea <insert>:
     9ea:	fb 01       	movw	r30, r22
     9ec:	20 81       	ld	r18, Z
     9ee:	31 81       	ldd	r19, Z+1	; 0x01
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 83       	std	Z+1, r19	; 0x01
     9f4:	20 83       	st	Z, r18
     9f6:	fb 01       	movw	r30, r22
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	80 83       	st	Z, r24
     9fc:	08 95       	ret

000009fe <push>:
     9fe:	fb 01       	movw	r30, r22
     a00:	20 81       	ld	r18, Z
     a02:	31 81       	ldd	r19, Z+1	; 0x01
     a04:	fc 01       	movw	r30, r24
     a06:	31 83       	std	Z+1, r19	; 0x01
     a08:	20 83       	st	Z, r18
     a0a:	fb 01       	movw	r30, r22
     a0c:	91 83       	std	Z+1, r25	; 0x01
     a0e:	80 83       	st	Z, r24
     a10:	08 95       	ret

00000a12 <pop>:
     a12:	dc 01       	movw	r26, r24
     a14:	ed 91       	ld	r30, X+
     a16:	fc 91       	ld	r31, X
     a18:	11 97       	sbiw	r26, 0x01	; 1
     a1a:	20 81       	ld	r18, Z
     a1c:	31 81       	ldd	r19, Z+1	; 0x01
     a1e:	2d 93       	st	X+, r18
     a20:	3c 93       	st	X, r19
     a22:	cf 01       	movw	r24, r30
     a24:	08 95       	ret

00000a26 <schedule>:
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
     a2e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
     a32:	c2 81       	ldd	r28, Z+2	; 0x02
     a34:	d3 81       	ldd	r29, Z+3	; 0x03
     a36:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
     a3a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
     a3e:	30 97       	sbiw	r30, 0x00	; 0
     a40:	19 f1       	breq	.+70     	; 0xa88 <schedule+0x62>
     a42:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
     a46:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
     a4a:	89 2b       	or	r24, r25
     a4c:	e9 f0       	breq	.+58     	; 0xa88 <schedule+0x62>
     a4e:	20 97       	sbiw	r28, 0x00	; 0
     a50:	69 f0       	breq	.+26     	; 0xa6c <schedule+0x46>
     a52:	86 81       	ldd	r24, Z+6	; 0x06
     a54:	97 81       	ldd	r25, Z+7	; 0x07
     a56:	a0 85       	ldd	r26, Z+8	; 0x08
     a58:	b1 85       	ldd	r27, Z+9	; 0x09
     a5a:	4e 81       	ldd	r20, Y+6	; 0x06
     a5c:	5f 81       	ldd	r21, Y+7	; 0x07
     a5e:	68 85       	ldd	r22, Y+8	; 0x08
     a60:	79 85       	ldd	r23, Y+9	; 0x09
     a62:	84 1b       	sub	r24, r20
     a64:	95 0b       	sbc	r25, r21
     a66:	a6 0b       	sbc	r26, r22
     a68:	b7 0b       	sbc	r27, r23
     a6a:	72 f4       	brpl	.+28     	; 0xa88 <schedule+0x62>
     a6c:	89 e2       	ldi	r24, 0x29	; 41
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 09 05 	call	0xa12	; 0xa12 <pop>
     a74:	67 e2       	ldi	r22, 0x27	; 39
     a76:	71 e0       	ldi	r23, 0x01	; 1
     a78:	0e 94 ff 04 	call	0x9fe	; 0x9fe <push>
     a7c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <activeStack>
     a80:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <activeStack+0x1>
     a84:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <dispatch>
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <__vector_1>:
     a8e:	1f 92       	push	r1
     a90:	0f 92       	push	r0
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	0f 92       	push	r0
     a96:	11 24       	eor	r1, r1
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
     ab4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     ab8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     abc:	ac 01       	movw	r20, r24
     abe:	09 2e       	mov	r0, r25
     ac0:	00 0c       	add	r0, r0
     ac2:	66 0b       	sbc	r22, r22
     ac4:	77 0b       	sbc	r23, r23
     ac6:	9a 01       	movw	r18, r20
     ac8:	11 27       	eor	r17, r17
     aca:	00 27       	eor	r16, r16
     acc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ad0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	40 2b       	or	r20, r16
     ada:	51 2b       	or	r21, r17
     adc:	62 2b       	or	r22, r18
     ade:	73 2b       	or	r23, r19
     ae0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     ae4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     ae8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     aec:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     af0:	b0 9b       	sbis	0x16, 0	; 22
     af2:	1a c0       	rjmp	.+52     	; 0xb28 <__vector_1+0x9a>
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	09 2e       	mov	r0, r25
     af8:	00 0c       	add	r0, r0
     afa:	aa 0b       	sbc	r26, r26
     afc:	bb 0b       	sbc	r27, r27
     afe:	bc 01       	movw	r22, r24
     b00:	55 27       	eor	r21, r21
     b02:	44 27       	eor	r20, r20
     b04:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b08:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	84 2b       	or	r24, r20
     b12:	95 2b       	or	r25, r21
     b14:	a6 2b       	or	r26, r22
     b16:	b7 2b       	or	r27, r23
     b18:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     b1c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     b20:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     b24:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     b28:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable>
     b2c:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x1>
     b30:	30 97       	sbiw	r30, 0x00	; 0
     b32:	39 f0       	breq	.+14     	; 0xb42 <__vector_1+0xb4>
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable>
     b3c:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x1>
     b40:	09 95       	icall
     b42:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	1f 91       	pop	r17
     b60:	0f 91       	pop	r16
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_2>:
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	2f 93       	push	r18
     b7c:	3f 93       	push	r19
     b7e:	4f 93       	push	r20
     b80:	5f 93       	push	r21
     b82:	6f 93       	push	r22
     b84:	7f 93       	push	r23
     b86:	8f 93       	push	r24
     b88:	9f 93       	push	r25
     b8a:	af 93       	push	r26
     b8c:	bf 93       	push	r27
     b8e:	ef 93       	push	r30
     b90:	ff 93       	push	r31
     b92:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     b96:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     b9a:	ac 01       	movw	r20, r24
     b9c:	09 2e       	mov	r0, r25
     b9e:	00 0c       	add	r0, r0
     ba0:	66 0b       	sbc	r22, r22
     ba2:	77 0b       	sbc	r23, r23
     ba4:	9a 01       	movw	r18, r20
     ba6:	11 27       	eor	r17, r17
     ba8:	00 27       	eor	r16, r16
     baa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	40 2b       	or	r20, r16
     bb8:	51 2b       	or	r21, r17
     bba:	62 2b       	or	r22, r18
     bbc:	73 2b       	or	r23, r19
     bbe:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     bc2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     bc6:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     bca:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     bce:	b0 9b       	sbis	0x16, 0	; 22
     bd0:	1a c0       	rjmp	.+52     	; 0xc06 <__vector_2+0x9a>
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	09 2e       	mov	r0, r25
     bd6:	00 0c       	add	r0, r0
     bd8:	aa 0b       	sbc	r26, r26
     bda:	bb 0b       	sbc	r27, r27
     bdc:	bc 01       	movw	r22, r24
     bde:	55 27       	eor	r21, r21
     be0:	44 27       	eor	r20, r20
     be2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     be6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	84 2b       	or	r24, r20
     bf0:	95 2b       	or	r25, r21
     bf2:	a6 2b       	or	r26, r22
     bf4:	b7 2b       	or	r27, r23
     bf6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     bfa:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     bfe:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     c02:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     c06:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x2>
     c0a:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x3>
     c0e:	30 97       	sbiw	r30, 0x00	; 0
     c10:	39 f0       	breq	.+14     	; 0xc20 <__vector_2+0xb4>
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x2>
     c1a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x3>
     c1e:	09 95       	icall
     c20:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	0f 90       	pop	r0
     c42:	0f be       	out	0x3f, r0	; 63
     c44:	0f 90       	pop	r0
     c46:	1f 90       	pop	r1
     c48:	18 95       	reti

00000c4a <__vector_3>:
     c4a:	1f 92       	push	r1
     c4c:	0f 92       	push	r0
     c4e:	0f b6       	in	r0, 0x3f	; 63
     c50:	0f 92       	push	r0
     c52:	11 24       	eor	r1, r1
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	2f 93       	push	r18
     c5a:	3f 93       	push	r19
     c5c:	4f 93       	push	r20
     c5e:	5f 93       	push	r21
     c60:	6f 93       	push	r22
     c62:	7f 93       	push	r23
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
     c68:	af 93       	push	r26
     c6a:	bf 93       	push	r27
     c6c:	ef 93       	push	r30
     c6e:	ff 93       	push	r31
     c70:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     c74:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     c78:	ac 01       	movw	r20, r24
     c7a:	09 2e       	mov	r0, r25
     c7c:	00 0c       	add	r0, r0
     c7e:	66 0b       	sbc	r22, r22
     c80:	77 0b       	sbc	r23, r23
     c82:	9a 01       	movw	r18, r20
     c84:	11 27       	eor	r17, r17
     c86:	00 27       	eor	r16, r16
     c88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	40 2b       	or	r20, r16
     c96:	51 2b       	or	r21, r17
     c98:	62 2b       	or	r22, r18
     c9a:	73 2b       	or	r23, r19
     c9c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     ca0:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     ca4:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     ca8:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     cac:	b0 9b       	sbis	0x16, 0	; 22
     cae:	1a c0       	rjmp	.+52     	; 0xce4 <__vector_3+0x9a>
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	09 2e       	mov	r0, r25
     cb4:	00 0c       	add	r0, r0
     cb6:	aa 0b       	sbc	r26, r26
     cb8:	bb 0b       	sbc	r27, r27
     cba:	bc 01       	movw	r22, r24
     cbc:	55 27       	eor	r21, r21
     cbe:	44 27       	eor	r20, r20
     cc0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cc4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	84 2b       	or	r24, r20
     cce:	95 2b       	or	r25, r21
     cd0:	a6 2b       	or	r26, r22
     cd2:	b7 2b       	or	r27, r23
     cd4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     cd8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     cdc:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     ce0:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     ce4:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x4>
     ce8:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x5>
     cec:	30 97       	sbiw	r30, 0x00	; 0
     cee:	39 f0       	breq	.+14     	; 0xcfe <__vector_3+0xb4>
     cf0:	62 e0       	ldi	r22, 0x02	; 2
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x4>
     cf8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x5>
     cfc:	09 95       	icall
     cfe:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     d02:	ff 91       	pop	r31
     d04:	ef 91       	pop	r30
     d06:	bf 91       	pop	r27
     d08:	af 91       	pop	r26
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_4>:
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	2f 93       	push	r18
     d38:	3f 93       	push	r19
     d3a:	4f 93       	push	r20
     d3c:	5f 93       	push	r21
     d3e:	6f 93       	push	r22
     d40:	7f 93       	push	r23
     d42:	8f 93       	push	r24
     d44:	9f 93       	push	r25
     d46:	af 93       	push	r26
     d48:	bf 93       	push	r27
     d4a:	ef 93       	push	r30
     d4c:	ff 93       	push	r31
     d4e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     d52:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     d56:	ac 01       	movw	r20, r24
     d58:	09 2e       	mov	r0, r25
     d5a:	00 0c       	add	r0, r0
     d5c:	66 0b       	sbc	r22, r22
     d5e:	77 0b       	sbc	r23, r23
     d60:	9a 01       	movw	r18, r20
     d62:	11 27       	eor	r17, r17
     d64:	00 27       	eor	r16, r16
     d66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	40 2b       	or	r20, r16
     d74:	51 2b       	or	r21, r17
     d76:	62 2b       	or	r22, r18
     d78:	73 2b       	or	r23, r19
     d7a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     d7e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     d82:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     d86:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     d8a:	b0 9b       	sbis	0x16, 0	; 22
     d8c:	1a c0       	rjmp	.+52     	; 0xdc2 <__vector_4+0x9a>
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	09 2e       	mov	r0, r25
     d92:	00 0c       	add	r0, r0
     d94:	aa 0b       	sbc	r26, r26
     d96:	bb 0b       	sbc	r27, r27
     d98:	bc 01       	movw	r22, r24
     d9a:	55 27       	eor	r21, r21
     d9c:	44 27       	eor	r20, r20
     d9e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	84 2b       	or	r24, r20
     dac:	95 2b       	or	r25, r21
     dae:	a6 2b       	or	r26, r22
     db0:	b7 2b       	or	r27, r23
     db2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     db6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     dba:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     dbe:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     dc2:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x6>
     dc6:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x7>
     dca:	30 97       	sbiw	r30, 0x00	; 0
     dcc:	39 f0       	breq	.+14     	; 0xddc <__vector_4+0xb4>
     dce:	63 e0       	ldi	r22, 0x03	; 3
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x6>
     dd6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x7>
     dda:	09 95       	icall
     ddc:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_5>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     e30:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     e34:	ac 01       	movw	r20, r24
     e36:	09 2e       	mov	r0, r25
     e38:	00 0c       	add	r0, r0
     e3a:	66 0b       	sbc	r22, r22
     e3c:	77 0b       	sbc	r23, r23
     e3e:	9a 01       	movw	r18, r20
     e40:	11 27       	eor	r17, r17
     e42:	00 27       	eor	r16, r16
     e44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	40 2b       	or	r20, r16
     e52:	51 2b       	or	r21, r17
     e54:	62 2b       	or	r22, r18
     e56:	73 2b       	or	r23, r19
     e58:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     e5c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     e60:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     e64:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     e68:	b0 9b       	sbis	0x16, 0	; 22
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <__vector_5+0x9a>
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	09 2e       	mov	r0, r25
     e70:	00 0c       	add	r0, r0
     e72:	aa 0b       	sbc	r26, r26
     e74:	bb 0b       	sbc	r27, r27
     e76:	bc 01       	movw	r22, r24
     e78:	55 27       	eor	r21, r21
     e7a:	44 27       	eor	r20, r20
     e7c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e80:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	84 2b       	or	r24, r20
     e8a:	95 2b       	or	r25, r21
     e8c:	a6 2b       	or	r26, r22
     e8e:	b7 2b       	or	r27, r23
     e90:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     e94:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     e98:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     e9c:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     ea0:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x8>
     ea4:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x9>
     ea8:	30 97       	sbiw	r30, 0x00	; 0
     eaa:	39 f0       	breq	.+14     	; 0xeba <__vector_5+0xb4>
     eac:	64 e0       	ldi	r22, 0x04	; 4
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x8>
     eb4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x9>
     eb8:	09 95       	icall
     eba:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	bf 91       	pop	r27
     ec4:	af 91       	pop	r26
     ec6:	9f 91       	pop	r25
     ec8:	8f 91       	pop	r24
     eca:	7f 91       	pop	r23
     ecc:	6f 91       	pop	r22
     ece:	5f 91       	pop	r21
     ed0:	4f 91       	pop	r20
     ed2:	3f 91       	pop	r19
     ed4:	2f 91       	pop	r18
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <__vector_10>:
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	2f 93       	push	r18
     ef4:	3f 93       	push	r19
     ef6:	4f 93       	push	r20
     ef8:	5f 93       	push	r21
     efa:	6f 93       	push	r22
     efc:	7f 93       	push	r23
     efe:	8f 93       	push	r24
     f00:	9f 93       	push	r25
     f02:	af 93       	push	r26
     f04:	bf 93       	push	r27
     f06:	ef 93       	push	r30
     f08:	ff 93       	push	r31
     f0a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     f0e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     f12:	ac 01       	movw	r20, r24
     f14:	09 2e       	mov	r0, r25
     f16:	00 0c       	add	r0, r0
     f18:	66 0b       	sbc	r22, r22
     f1a:	77 0b       	sbc	r23, r23
     f1c:	9a 01       	movw	r18, r20
     f1e:	11 27       	eor	r17, r17
     f20:	00 27       	eor	r16, r16
     f22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	40 2b       	or	r20, r16
     f30:	51 2b       	or	r21, r17
     f32:	62 2b       	or	r22, r18
     f34:	73 2b       	or	r23, r19
     f36:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     f3a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     f3e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     f42:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     f46:	b0 9b       	sbis	0x16, 0	; 22
     f48:	1a c0       	rjmp	.+52     	; 0xf7e <__vector_10+0x9a>
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	09 2e       	mov	r0, r25
     f4e:	00 0c       	add	r0, r0
     f50:	aa 0b       	sbc	r26, r26
     f52:	bb 0b       	sbc	r27, r27
     f54:	bc 01       	movw	r22, r24
     f56:	55 27       	eor	r21, r21
     f58:	44 27       	eor	r20, r20
     f5a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f5e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f62:	a0 e0       	ldi	r26, 0x00	; 0
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	84 2b       	or	r24, r20
     f68:	95 2b       	or	r25, r21
     f6a:	a6 2b       	or	r26, r22
     f6c:	b7 2b       	or	r27, r23
     f6e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     f72:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     f76:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     f7a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     f7e:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0xa>
     f82:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0xb>
     f86:	30 97       	sbiw	r30, 0x00	; 0
     f88:	39 f0       	breq	.+14     	; 0xf98 <__vector_10+0xb4>
     f8a:	65 e0       	ldi	r22, 0x05	; 5
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0xa>
     f92:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0xb>
     f96:	09 95       	icall
     f98:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
     f9c:	ff 91       	pop	r31
     f9e:	ef 91       	pop	r30
     fa0:	bf 91       	pop	r27
     fa2:	af 91       	pop	r26
     fa4:	9f 91       	pop	r25
     fa6:	8f 91       	pop	r24
     fa8:	7f 91       	pop	r23
     faa:	6f 91       	pop	r22
     fac:	5f 91       	pop	r21
     fae:	4f 91       	pop	r20
     fb0:	3f 91       	pop	r19
     fb2:	2f 91       	pop	r18
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	0f 90       	pop	r0
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	0f 90       	pop	r0
     fbe:	1f 90       	pop	r1
     fc0:	18 95       	reti

00000fc2 <__vector_11>:
     fc2:	1f 92       	push	r1
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	11 24       	eor	r1, r1
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	2f 93       	push	r18
     fd2:	3f 93       	push	r19
     fd4:	4f 93       	push	r20
     fd6:	5f 93       	push	r21
     fd8:	6f 93       	push	r22
     fda:	7f 93       	push	r23
     fdc:	8f 93       	push	r24
     fde:	9f 93       	push	r25
     fe0:	af 93       	push	r26
     fe2:	bf 93       	push	r27
     fe4:	ef 93       	push	r30
     fe6:	ff 93       	push	r31
     fe8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     fec:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     ff0:	ac 01       	movw	r20, r24
     ff2:	09 2e       	mov	r0, r25
     ff4:	00 0c       	add	r0, r0
     ff6:	66 0b       	sbc	r22, r22
     ff8:	77 0b       	sbc	r23, r23
     ffa:	9a 01       	movw	r18, r20
     ffc:	11 27       	eor	r17, r17
     ffe:	00 27       	eor	r16, r16
    1000:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1004:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	40 2b       	or	r20, r16
    100e:	51 2b       	or	r21, r17
    1010:	62 2b       	or	r22, r18
    1012:	73 2b       	or	r23, r19
    1014:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1018:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    101c:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1020:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1024:	b0 9b       	sbis	0x16, 0	; 22
    1026:	1a c0       	rjmp	.+52     	; 0x105c <__vector_11+0x9a>
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	09 2e       	mov	r0, r25
    102c:	00 0c       	add	r0, r0
    102e:	aa 0b       	sbc	r26, r26
    1030:	bb 0b       	sbc	r27, r27
    1032:	bc 01       	movw	r22, r24
    1034:	55 27       	eor	r21, r21
    1036:	44 27       	eor	r20, r20
    1038:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    103c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	84 2b       	or	r24, r20
    1046:	95 2b       	or	r25, r21
    1048:	a6 2b       	or	r26, r22
    104a:	b7 2b       	or	r27, r23
    104c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1050:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1054:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1058:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    105c:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0xc>
    1060:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0xd>
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	39 f0       	breq	.+14     	; 0x1076 <__vector_11+0xb4>
    1068:	66 e0       	ldi	r22, 0x06	; 6
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0xc>
    1070:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0xd>
    1074:	09 95       	icall
    1076:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	0f 90       	pop	r0
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	0f 90       	pop	r0
    109c:	1f 90       	pop	r1
    109e:	18 95       	reti

000010a0 <__vector_12>:
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	2f 93       	push	r18
    10b0:	3f 93       	push	r19
    10b2:	4f 93       	push	r20
    10b4:	5f 93       	push	r21
    10b6:	6f 93       	push	r22
    10b8:	7f 93       	push	r23
    10ba:	8f 93       	push	r24
    10bc:	9f 93       	push	r25
    10be:	af 93       	push	r26
    10c0:	bf 93       	push	r27
    10c2:	ef 93       	push	r30
    10c4:	ff 93       	push	r31
    10c6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    10ca:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    10ce:	ac 01       	movw	r20, r24
    10d0:	09 2e       	mov	r0, r25
    10d2:	00 0c       	add	r0, r0
    10d4:	66 0b       	sbc	r22, r22
    10d6:	77 0b       	sbc	r23, r23
    10d8:	9a 01       	movw	r18, r20
    10da:	11 27       	eor	r17, r17
    10dc:	00 27       	eor	r16, r16
    10de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	40 2b       	or	r20, r16
    10ec:	51 2b       	or	r21, r17
    10ee:	62 2b       	or	r22, r18
    10f0:	73 2b       	or	r23, r19
    10f2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    10f6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    10fa:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    10fe:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1102:	b0 9b       	sbis	0x16, 0	; 22
    1104:	1a c0       	rjmp	.+52     	; 0x113a <__vector_12+0x9a>
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	09 2e       	mov	r0, r25
    110a:	00 0c       	add	r0, r0
    110c:	aa 0b       	sbc	r26, r26
    110e:	bb 0b       	sbc	r27, r27
    1110:	bc 01       	movw	r22, r24
    1112:	55 27       	eor	r21, r21
    1114:	44 27       	eor	r20, r20
    1116:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    111a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	84 2b       	or	r24, r20
    1124:	95 2b       	or	r25, r21
    1126:	a6 2b       	or	r26, r22
    1128:	b7 2b       	or	r27, r23
    112a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    112e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1132:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1136:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    113a:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0xe>
    113e:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0xf>
    1142:	30 97       	sbiw	r30, 0x00	; 0
    1144:	39 f0       	breq	.+14     	; 0x1154 <__vector_12+0xb4>
    1146:	67 e0       	ldi	r22, 0x07	; 7
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0xe>
    114e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0xf>
    1152:	09 95       	icall
    1154:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	1f 91       	pop	r17
    1172:	0f 91       	pop	r16
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	1f 90       	pop	r1
    117c:	18 95       	reti

0000117e <__vector_13>:
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	2f 93       	push	r18
    118e:	3f 93       	push	r19
    1190:	4f 93       	push	r20
    1192:	5f 93       	push	r21
    1194:	6f 93       	push	r22
    1196:	7f 93       	push	r23
    1198:	8f 93       	push	r24
    119a:	9f 93       	push	r25
    119c:	af 93       	push	r26
    119e:	bf 93       	push	r27
    11a0:	ef 93       	push	r30
    11a2:	ff 93       	push	r31
    11a4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    11a8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    11ac:	ac 01       	movw	r20, r24
    11ae:	09 2e       	mov	r0, r25
    11b0:	00 0c       	add	r0, r0
    11b2:	66 0b       	sbc	r22, r22
    11b4:	77 0b       	sbc	r23, r23
    11b6:	9a 01       	movw	r18, r20
    11b8:	11 27       	eor	r17, r17
    11ba:	00 27       	eor	r16, r16
    11bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	40 2b       	or	r20, r16
    11ca:	51 2b       	or	r21, r17
    11cc:	62 2b       	or	r22, r18
    11ce:	73 2b       	or	r23, r19
    11d0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    11d4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    11d8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    11dc:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    11e0:	b0 9b       	sbis	0x16, 0	; 22
    11e2:	1a c0       	rjmp	.+52     	; 0x1218 <__vector_13+0x9a>
    11e4:	01 96       	adiw	r24, 0x01	; 1
    11e6:	09 2e       	mov	r0, r25
    11e8:	00 0c       	add	r0, r0
    11ea:	aa 0b       	sbc	r26, r26
    11ec:	bb 0b       	sbc	r27, r27
    11ee:	bc 01       	movw	r22, r24
    11f0:	55 27       	eor	r21, r21
    11f2:	44 27       	eor	r20, r20
    11f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	84 2b       	or	r24, r20
    1202:	95 2b       	or	r25, r21
    1204:	a6 2b       	or	r26, r22
    1206:	b7 2b       	or	r27, r23
    1208:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    120c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1210:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1214:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1218:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x10>
    121c:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x11>
    1220:	30 97       	sbiw	r30, 0x00	; 0
    1222:	39 f0       	breq	.+14     	; 0x1232 <__vector_13+0xb4>
    1224:	68 e0       	ldi	r22, 0x08	; 8
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x10>
    122c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x11>
    1230:	09 95       	icall
    1232:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_14>:
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1286:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    128a:	ac 01       	movw	r20, r24
    128c:	09 2e       	mov	r0, r25
    128e:	00 0c       	add	r0, r0
    1290:	66 0b       	sbc	r22, r22
    1292:	77 0b       	sbc	r23, r23
    1294:	9a 01       	movw	r18, r20
    1296:	11 27       	eor	r17, r17
    1298:	00 27       	eor	r16, r16
    129a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    129e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	40 2b       	or	r20, r16
    12a8:	51 2b       	or	r21, r17
    12aa:	62 2b       	or	r22, r18
    12ac:	73 2b       	or	r23, r19
    12ae:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    12b2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    12b6:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    12ba:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    12be:	b0 9b       	sbis	0x16, 0	; 22
    12c0:	1a c0       	rjmp	.+52     	; 0x12f6 <__vector_14+0x9a>
    12c2:	01 96       	adiw	r24, 0x01	; 1
    12c4:	09 2e       	mov	r0, r25
    12c6:	00 0c       	add	r0, r0
    12c8:	aa 0b       	sbc	r26, r26
    12ca:	bb 0b       	sbc	r27, r27
    12cc:	bc 01       	movw	r22, r24
    12ce:	55 27       	eor	r21, r21
    12d0:	44 27       	eor	r20, r20
    12d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	84 2b       	or	r24, r20
    12e0:	95 2b       	or	r25, r21
    12e2:	a6 2b       	or	r26, r22
    12e4:	b7 2b       	or	r27, r23
    12e6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    12ea:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    12ee:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    12f2:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    12f6:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x12>
    12fa:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x13>
    12fe:	30 97       	sbiw	r30, 0x00	; 0
    1300:	39 f0       	breq	.+14     	; 0x1310 <__vector_14+0xb4>
    1302:	69 e0       	ldi	r22, 0x09	; 9
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x12>
    130a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x13>
    130e:	09 95       	icall
    1310:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1314:	ff 91       	pop	r31
    1316:	ef 91       	pop	r30
    1318:	bf 91       	pop	r27
    131a:	af 91       	pop	r26
    131c:	9f 91       	pop	r25
    131e:	8f 91       	pop	r24
    1320:	7f 91       	pop	r23
    1322:	6f 91       	pop	r22
    1324:	5f 91       	pop	r21
    1326:	4f 91       	pop	r20
    1328:	3f 91       	pop	r19
    132a:	2f 91       	pop	r18
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_15>:
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	2f 93       	push	r18
    134a:	3f 93       	push	r19
    134c:	4f 93       	push	r20
    134e:	5f 93       	push	r21
    1350:	6f 93       	push	r22
    1352:	7f 93       	push	r23
    1354:	8f 93       	push	r24
    1356:	9f 93       	push	r25
    1358:	af 93       	push	r26
    135a:	bf 93       	push	r27
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
    1360:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1364:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1368:	ac 01       	movw	r20, r24
    136a:	09 2e       	mov	r0, r25
    136c:	00 0c       	add	r0, r0
    136e:	66 0b       	sbc	r22, r22
    1370:	77 0b       	sbc	r23, r23
    1372:	9a 01       	movw	r18, r20
    1374:	11 27       	eor	r17, r17
    1376:	00 27       	eor	r16, r16
    1378:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    137c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	40 2b       	or	r20, r16
    1386:	51 2b       	or	r21, r17
    1388:	62 2b       	or	r22, r18
    138a:	73 2b       	or	r23, r19
    138c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1390:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1394:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1398:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    139c:	b0 9b       	sbis	0x16, 0	; 22
    139e:	1a c0       	rjmp	.+52     	; 0x13d4 <__vector_15+0x9a>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	09 2e       	mov	r0, r25
    13a4:	00 0c       	add	r0, r0
    13a6:	aa 0b       	sbc	r26, r26
    13a8:	bb 0b       	sbc	r27, r27
    13aa:	bc 01       	movw	r22, r24
    13ac:	55 27       	eor	r21, r21
    13ae:	44 27       	eor	r20, r20
    13b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13b4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13b8:	a0 e0       	ldi	r26, 0x00	; 0
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	84 2b       	or	r24, r20
    13be:	95 2b       	or	r25, r21
    13c0:	a6 2b       	or	r26, r22
    13c2:	b7 2b       	or	r27, r23
    13c4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    13c8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    13cc:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    13d0:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    13d4:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x14>
    13d8:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x15>
    13dc:	30 97       	sbiw	r30, 0x00	; 0
    13de:	39 f0       	breq	.+14     	; 0x13ee <__vector_15+0xb4>
    13e0:	6a e0       	ldi	r22, 0x0A	; 10
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x14>
    13e8:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x15>
    13ec:	09 95       	icall
    13ee:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_16>:
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
    143e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1442:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1446:	ac 01       	movw	r20, r24
    1448:	09 2e       	mov	r0, r25
    144a:	00 0c       	add	r0, r0
    144c:	66 0b       	sbc	r22, r22
    144e:	77 0b       	sbc	r23, r23
    1450:	9a 01       	movw	r18, r20
    1452:	11 27       	eor	r17, r17
    1454:	00 27       	eor	r16, r16
    1456:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    145a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	40 2b       	or	r20, r16
    1464:	51 2b       	or	r21, r17
    1466:	62 2b       	or	r22, r18
    1468:	73 2b       	or	r23, r19
    146a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    146e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1472:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1476:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    147a:	b0 9b       	sbis	0x16, 0	; 22
    147c:	1a c0       	rjmp	.+52     	; 0x14b2 <__vector_16+0x9a>
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	09 2e       	mov	r0, r25
    1482:	00 0c       	add	r0, r0
    1484:	aa 0b       	sbc	r26, r26
    1486:	bb 0b       	sbc	r27, r27
    1488:	bc 01       	movw	r22, r24
    148a:	55 27       	eor	r21, r21
    148c:	44 27       	eor	r20, r20
    148e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1492:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	84 2b       	or	r24, r20
    149c:	95 2b       	or	r25, r21
    149e:	a6 2b       	or	r26, r22
    14a0:	b7 2b       	or	r27, r23
    14a2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    14a6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    14aa:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    14ae:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    14b2:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x16>
    14b6:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x17>
    14ba:	30 97       	sbiw	r30, 0x00	; 0
    14bc:	39 f0       	breq	.+14     	; 0x14cc <__vector_16+0xb4>
    14be:	6b e0       	ldi	r22, 0x0B	; 11
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x16>
    14c6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x17>
    14ca:	09 95       	icall
    14cc:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    14d0:	ff 91       	pop	r31
    14d2:	ef 91       	pop	r30
    14d4:	bf 91       	pop	r27
    14d6:	af 91       	pop	r26
    14d8:	9f 91       	pop	r25
    14da:	8f 91       	pop	r24
    14dc:	7f 91       	pop	r23
    14de:	6f 91       	pop	r22
    14e0:	5f 91       	pop	r21
    14e2:	4f 91       	pop	r20
    14e4:	3f 91       	pop	r19
    14e6:	2f 91       	pop	r18
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	0f 90       	pop	r0
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	0f 90       	pop	r0
    14f2:	1f 90       	pop	r1
    14f4:	18 95       	reti

000014f6 <__vector_17>:
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	2f 93       	push	r18
    1506:	3f 93       	push	r19
    1508:	4f 93       	push	r20
    150a:	5f 93       	push	r21
    150c:	6f 93       	push	r22
    150e:	7f 93       	push	r23
    1510:	8f 93       	push	r24
    1512:	9f 93       	push	r25
    1514:	af 93       	push	r26
    1516:	bf 93       	push	r27
    1518:	ef 93       	push	r30
    151a:	ff 93       	push	r31
    151c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1520:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1524:	ac 01       	movw	r20, r24
    1526:	09 2e       	mov	r0, r25
    1528:	00 0c       	add	r0, r0
    152a:	66 0b       	sbc	r22, r22
    152c:	77 0b       	sbc	r23, r23
    152e:	9a 01       	movw	r18, r20
    1530:	11 27       	eor	r17, r17
    1532:	00 27       	eor	r16, r16
    1534:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1538:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	40 2b       	or	r20, r16
    1542:	51 2b       	or	r21, r17
    1544:	62 2b       	or	r22, r18
    1546:	73 2b       	or	r23, r19
    1548:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    154c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1550:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1554:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1558:	b0 9b       	sbis	0x16, 0	; 22
    155a:	1a c0       	rjmp	.+52     	; 0x1590 <__vector_17+0x9a>
    155c:	01 96       	adiw	r24, 0x01	; 1
    155e:	09 2e       	mov	r0, r25
    1560:	00 0c       	add	r0, r0
    1562:	aa 0b       	sbc	r26, r26
    1564:	bb 0b       	sbc	r27, r27
    1566:	bc 01       	movw	r22, r24
    1568:	55 27       	eor	r21, r21
    156a:	44 27       	eor	r20, r20
    156c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1570:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1574:	a0 e0       	ldi	r26, 0x00	; 0
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	84 2b       	or	r24, r20
    157a:	95 2b       	or	r25, r21
    157c:	a6 2b       	or	r26, r22
    157e:	b7 2b       	or	r27, r23
    1580:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1584:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1588:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    158c:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1590:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x18>
    1594:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x19>
    1598:	30 97       	sbiw	r30, 0x00	; 0
    159a:	39 f0       	breq	.+14     	; 0x15aa <__vector_17+0xb4>
    159c:	6c e0       	ldi	r22, 0x0C	; 12
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x18>
    15a4:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x19>
    15a8:	09 95       	icall
    15aa:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    15ae:	ff 91       	pop	r31
    15b0:	ef 91       	pop	r30
    15b2:	bf 91       	pop	r27
    15b4:	af 91       	pop	r26
    15b6:	9f 91       	pop	r25
    15b8:	8f 91       	pop	r24
    15ba:	7f 91       	pop	r23
    15bc:	6f 91       	pop	r22
    15be:	5f 91       	pop	r21
    15c0:	4f 91       	pop	r20
    15c2:	3f 91       	pop	r19
    15c4:	2f 91       	pop	r18
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	0f 90       	pop	r0
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	0f 90       	pop	r0
    15d0:	1f 90       	pop	r1
    15d2:	18 95       	reti

000015d4 <__vector_18>:
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	11 24       	eor	r1, r1
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	2f 93       	push	r18
    15e4:	3f 93       	push	r19
    15e6:	4f 93       	push	r20
    15e8:	5f 93       	push	r21
    15ea:	6f 93       	push	r22
    15ec:	7f 93       	push	r23
    15ee:	8f 93       	push	r24
    15f0:	9f 93       	push	r25
    15f2:	af 93       	push	r26
    15f4:	bf 93       	push	r27
    15f6:	ef 93       	push	r30
    15f8:	ff 93       	push	r31
    15fa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    15fe:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1602:	ac 01       	movw	r20, r24
    1604:	09 2e       	mov	r0, r25
    1606:	00 0c       	add	r0, r0
    1608:	66 0b       	sbc	r22, r22
    160a:	77 0b       	sbc	r23, r23
    160c:	9a 01       	movw	r18, r20
    160e:	11 27       	eor	r17, r17
    1610:	00 27       	eor	r16, r16
    1612:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1616:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	40 2b       	or	r20, r16
    1620:	51 2b       	or	r21, r17
    1622:	62 2b       	or	r22, r18
    1624:	73 2b       	or	r23, r19
    1626:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    162a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    162e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1632:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1636:	b0 9b       	sbis	0x16, 0	; 22
    1638:	1a c0       	rjmp	.+52     	; 0x166e <__vector_18+0x9a>
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	09 2e       	mov	r0, r25
    163e:	00 0c       	add	r0, r0
    1640:	aa 0b       	sbc	r26, r26
    1642:	bb 0b       	sbc	r27, r27
    1644:	bc 01       	movw	r22, r24
    1646:	55 27       	eor	r21, r21
    1648:	44 27       	eor	r20, r20
    164a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    164e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1652:	a0 e0       	ldi	r26, 0x00	; 0
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	84 2b       	or	r24, r20
    1658:	95 2b       	or	r25, r21
    165a:	a6 2b       	or	r26, r22
    165c:	b7 2b       	or	r27, r23
    165e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1662:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1666:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    166a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    166e:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x1a>
    1672:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1b>
    1676:	30 97       	sbiw	r30, 0x00	; 0
    1678:	39 f0       	breq	.+14     	; 0x1688 <__vector_18+0xb4>
    167a:	6d e0       	ldi	r22, 0x0D	; 13
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x1a>
    1682:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1b>
    1686:	09 95       	icall
    1688:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    168c:	ff 91       	pop	r31
    168e:	ef 91       	pop	r30
    1690:	bf 91       	pop	r27
    1692:	af 91       	pop	r26
    1694:	9f 91       	pop	r25
    1696:	8f 91       	pop	r24
    1698:	7f 91       	pop	r23
    169a:	6f 91       	pop	r22
    169c:	5f 91       	pop	r21
    169e:	4f 91       	pop	r20
    16a0:	3f 91       	pop	r19
    16a2:	2f 91       	pop	r18
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	0f 90       	pop	r0
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	0f 90       	pop	r0
    16ae:	1f 90       	pop	r1
    16b0:	18 95       	reti

000016b2 <__vector_19>:
    16b2:	1f 92       	push	r1
    16b4:	0f 92       	push	r0
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	0f 92       	push	r0
    16ba:	11 24       	eor	r1, r1
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	2f 93       	push	r18
    16c2:	3f 93       	push	r19
    16c4:	4f 93       	push	r20
    16c6:	5f 93       	push	r21
    16c8:	6f 93       	push	r22
    16ca:	7f 93       	push	r23
    16cc:	8f 93       	push	r24
    16ce:	9f 93       	push	r25
    16d0:	af 93       	push	r26
    16d2:	bf 93       	push	r27
    16d4:	ef 93       	push	r30
    16d6:	ff 93       	push	r31
    16d8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    16dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    16e0:	ac 01       	movw	r20, r24
    16e2:	09 2e       	mov	r0, r25
    16e4:	00 0c       	add	r0, r0
    16e6:	66 0b       	sbc	r22, r22
    16e8:	77 0b       	sbc	r23, r23
    16ea:	9a 01       	movw	r18, r20
    16ec:	11 27       	eor	r17, r17
    16ee:	00 27       	eor	r16, r16
    16f0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16f4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	40 2b       	or	r20, r16
    16fe:	51 2b       	or	r21, r17
    1700:	62 2b       	or	r22, r18
    1702:	73 2b       	or	r23, r19
    1704:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1708:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    170c:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1710:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1714:	b0 9b       	sbis	0x16, 0	; 22
    1716:	1a c0       	rjmp	.+52     	; 0x174c <__vector_19+0x9a>
    1718:	01 96       	adiw	r24, 0x01	; 1
    171a:	09 2e       	mov	r0, r25
    171c:	00 0c       	add	r0, r0
    171e:	aa 0b       	sbc	r26, r26
    1720:	bb 0b       	sbc	r27, r27
    1722:	bc 01       	movw	r22, r24
    1724:	55 27       	eor	r21, r21
    1726:	44 27       	eor	r20, r20
    1728:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    172c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1730:	a0 e0       	ldi	r26, 0x00	; 0
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	84 2b       	or	r24, r20
    1736:	95 2b       	or	r25, r21
    1738:	a6 2b       	or	r26, r22
    173a:	b7 2b       	or	r27, r23
    173c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1740:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1744:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1748:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    174c:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x1c>
    1750:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x1d>
    1754:	30 97       	sbiw	r30, 0x00	; 0
    1756:	39 f0       	breq	.+14     	; 0x1766 <__vector_19+0xb4>
    1758:	6e e0       	ldi	r22, 0x0E	; 14
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x1c>
    1760:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x1d>
    1764:	09 95       	icall
    1766:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    176a:	ff 91       	pop	r31
    176c:	ef 91       	pop	r30
    176e:	bf 91       	pop	r27
    1770:	af 91       	pop	r26
    1772:	9f 91       	pop	r25
    1774:	8f 91       	pop	r24
    1776:	7f 91       	pop	r23
    1778:	6f 91       	pop	r22
    177a:	5f 91       	pop	r21
    177c:	4f 91       	pop	r20
    177e:	3f 91       	pop	r19
    1780:	2f 91       	pop	r18
    1782:	1f 91       	pop	r17
    1784:	0f 91       	pop	r16
    1786:	0f 90       	pop	r0
    1788:	0f be       	out	0x3f, r0	; 63
    178a:	0f 90       	pop	r0
    178c:	1f 90       	pop	r1
    178e:	18 95       	reti

00001790 <__vector_20>:
    1790:	1f 92       	push	r1
    1792:	0f 92       	push	r0
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	0f 92       	push	r0
    1798:	11 24       	eor	r1, r1
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	2f 93       	push	r18
    17a0:	3f 93       	push	r19
    17a2:	4f 93       	push	r20
    17a4:	5f 93       	push	r21
    17a6:	6f 93       	push	r22
    17a8:	7f 93       	push	r23
    17aa:	8f 93       	push	r24
    17ac:	9f 93       	push	r25
    17ae:	af 93       	push	r26
    17b0:	bf 93       	push	r27
    17b2:	ef 93       	push	r30
    17b4:	ff 93       	push	r31
    17b6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    17ba:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    17be:	ac 01       	movw	r20, r24
    17c0:	09 2e       	mov	r0, r25
    17c2:	00 0c       	add	r0, r0
    17c4:	66 0b       	sbc	r22, r22
    17c6:	77 0b       	sbc	r23, r23
    17c8:	9a 01       	movw	r18, r20
    17ca:	11 27       	eor	r17, r17
    17cc:	00 27       	eor	r16, r16
    17ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	40 2b       	or	r20, r16
    17dc:	51 2b       	or	r21, r17
    17de:	62 2b       	or	r22, r18
    17e0:	73 2b       	or	r23, r19
    17e2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    17e6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    17ea:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    17ee:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    17f2:	b0 9b       	sbis	0x16, 0	; 22
    17f4:	1a c0       	rjmp	.+52     	; 0x182a <__vector_20+0x9a>
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	09 2e       	mov	r0, r25
    17fa:	00 0c       	add	r0, r0
    17fc:	aa 0b       	sbc	r26, r26
    17fe:	bb 0b       	sbc	r27, r27
    1800:	bc 01       	movw	r22, r24
    1802:	55 27       	eor	r21, r21
    1804:	44 27       	eor	r20, r20
    1806:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    180a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    180e:	a0 e0       	ldi	r26, 0x00	; 0
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	84 2b       	or	r24, r20
    1814:	95 2b       	or	r25, r21
    1816:	a6 2b       	or	r26, r22
    1818:	b7 2b       	or	r27, r23
    181a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    181e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1822:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1826:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    182a:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x1e>
    182e:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x1f>
    1832:	30 97       	sbiw	r30, 0x00	; 0
    1834:	39 f0       	breq	.+14     	; 0x1844 <__vector_20+0xb4>
    1836:	6f e0       	ldi	r22, 0x0F	; 15
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x1e>
    183e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x1f>
    1842:	09 95       	icall
    1844:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	0f 90       	pop	r0
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	0f 90       	pop	r0
    186a:	1f 90       	pop	r1
    186c:	18 95       	reti

0000186e <__vector_21>:
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	2f 93       	push	r18
    187e:	3f 93       	push	r19
    1880:	4f 93       	push	r20
    1882:	5f 93       	push	r21
    1884:	6f 93       	push	r22
    1886:	7f 93       	push	r23
    1888:	8f 93       	push	r24
    188a:	9f 93       	push	r25
    188c:	af 93       	push	r26
    188e:	bf 93       	push	r27
    1890:	ef 93       	push	r30
    1892:	ff 93       	push	r31
    1894:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1898:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    189c:	ac 01       	movw	r20, r24
    189e:	09 2e       	mov	r0, r25
    18a0:	00 0c       	add	r0, r0
    18a2:	66 0b       	sbc	r22, r22
    18a4:	77 0b       	sbc	r23, r23
    18a6:	9a 01       	movw	r18, r20
    18a8:	11 27       	eor	r17, r17
    18aa:	00 27       	eor	r16, r16
    18ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	40 2b       	or	r20, r16
    18ba:	51 2b       	or	r21, r17
    18bc:	62 2b       	or	r22, r18
    18be:	73 2b       	or	r23, r19
    18c0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    18c4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    18c8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    18cc:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    18d0:	b0 9b       	sbis	0x16, 0	; 22
    18d2:	1a c0       	rjmp	.+52     	; 0x1908 <__vector_21+0x9a>
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	09 2e       	mov	r0, r25
    18d8:	00 0c       	add	r0, r0
    18da:	aa 0b       	sbc	r26, r26
    18dc:	bb 0b       	sbc	r27, r27
    18de:	bc 01       	movw	r22, r24
    18e0:	55 27       	eor	r21, r21
    18e2:	44 27       	eor	r20, r20
    18e4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18e8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ec:	a0 e0       	ldi	r26, 0x00	; 0
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	84 2b       	or	r24, r20
    18f2:	95 2b       	or	r25, r21
    18f4:	a6 2b       	or	r26, r22
    18f6:	b7 2b       	or	r27, r23
    18f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    18fc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1900:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1904:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1908:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x20>
    190c:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x21>
    1910:	30 97       	sbiw	r30, 0x00	; 0
    1912:	39 f0       	breq	.+14     	; 0x1922 <__vector_21+0xb4>
    1914:	60 e1       	ldi	r22, 0x10	; 16
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x20>
    191c:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x21>
    1920:	09 95       	icall
    1922:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1926:	ff 91       	pop	r31
    1928:	ef 91       	pop	r30
    192a:	bf 91       	pop	r27
    192c:	af 91       	pop	r26
    192e:	9f 91       	pop	r25
    1930:	8f 91       	pop	r24
    1932:	7f 91       	pop	r23
    1934:	6f 91       	pop	r22
    1936:	5f 91       	pop	r21
    1938:	4f 91       	pop	r20
    193a:	3f 91       	pop	r19
    193c:	2f 91       	pop	r18
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	0f 90       	pop	r0
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	0f 90       	pop	r0
    1948:	1f 90       	pop	r1
    194a:	18 95       	reti

0000194c <__vector_22>:
    194c:	1f 92       	push	r1
    194e:	0f 92       	push	r0
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	0f 92       	push	r0
    1954:	11 24       	eor	r1, r1
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
    1972:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1976:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    197a:	ac 01       	movw	r20, r24
    197c:	09 2e       	mov	r0, r25
    197e:	00 0c       	add	r0, r0
    1980:	66 0b       	sbc	r22, r22
    1982:	77 0b       	sbc	r23, r23
    1984:	9a 01       	movw	r18, r20
    1986:	11 27       	eor	r17, r17
    1988:	00 27       	eor	r16, r16
    198a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    198e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	40 2b       	or	r20, r16
    1998:	51 2b       	or	r21, r17
    199a:	62 2b       	or	r22, r18
    199c:	73 2b       	or	r23, r19
    199e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    19a2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    19a6:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    19aa:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    19ae:	b0 9b       	sbis	0x16, 0	; 22
    19b0:	1a c0       	rjmp	.+52     	; 0x19e6 <__vector_22+0x9a>
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	09 2e       	mov	r0, r25
    19b6:	00 0c       	add	r0, r0
    19b8:	aa 0b       	sbc	r26, r26
    19ba:	bb 0b       	sbc	r27, r27
    19bc:	bc 01       	movw	r22, r24
    19be:	55 27       	eor	r21, r21
    19c0:	44 27       	eor	r20, r20
    19c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	84 2b       	or	r24, r20
    19d0:	95 2b       	or	r25, r21
    19d2:	a6 2b       	or	r26, r22
    19d4:	b7 2b       	or	r27, r23
    19d6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    19da:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    19de:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    19e2:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    19e6:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x22>
    19ea:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x23>
    19ee:	30 97       	sbiw	r30, 0x00	; 0
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <__vector_22+0xb4>
    19f2:	61 e1       	ldi	r22, 0x11	; 17
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x22>
    19fa:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x23>
    19fe:	09 95       	icall
    1a00:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <idle>:
    1a2a:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1a2e:	78 94       	sei
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	83 bf       	out	0x33, r24	; 51
    1a34:	88 95       	sleep
    1a36:	fc cf       	rjmp	.-8      	; 0x1a30 <idle+0x6>

00001a38 <__vector_9>:
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	0f 92       	push	r0
    1a40:	11 24       	eor	r1, r1
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1a5a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1a5e:	01 96       	adiw	r24, 0x01	; 1
    1a60:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <overflows+0x1>
    1a64:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <overflows>
    1a68:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1a6c:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1a70:	30 97       	sbiw	r30, 0x00	; 0
    1a72:	01 f1       	breq	.+64     	; 0x1ab4 <__vector_9+0x7c>
    1a74:	42 81       	ldd	r20, Z+2	; 0x02
    1a76:	53 81       	ldd	r21, Z+3	; 0x03
    1a78:	64 81       	ldd	r22, Z+4	; 0x04
    1a7a:	75 81       	ldd	r23, Z+5	; 0x05
    1a7c:	86 17       	cp	r24, r22
    1a7e:	97 07       	cpc	r25, r23
    1a80:	c9 f4       	brne	.+50     	; 0x1ab4 <__vector_9+0x7c>
    1a82:	ca 01       	movw	r24, r20
    1a84:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a88:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a8c:	42 1b       	sub	r20, r18
    1a8e:	53 0b       	sbc	r21, r19
    1a90:	41 30       	cpi	r20, 0x01	; 1
    1a92:	51 05       	cpc	r21, r1
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <__vector_9+0x68>
    1a96:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a9a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1aa4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1aa8:	ef e6       	ldi	r30, 0x6F	; 111
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	82 60       	ori	r24, 0x02	; 2
    1ab0:	80 83       	st	Z, r24
    1ab2:	05 c0       	rjmp	.+10     	; 0x1abe <__vector_9+0x86>
    1ab4:	ef e6       	ldi	r30, 0x6F	; 111
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 7f       	andi	r24, 0xFD	; 253
    1abc:	80 83       	st	Z, r24
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	9f 91       	pop	r25
    1ac4:	8f 91       	pop	r24
    1ac6:	7f 91       	pop	r23
    1ac8:	6f 91       	pop	r22
    1aca:	5f 91       	pop	r21
    1acc:	4f 91       	pop	r20
    1ace:	3f 91       	pop	r19
    1ad0:	2f 91       	pop	r18
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <__vector_7>:
    1adc:	1f 92       	push	r1
    1ade:	0f 92       	push	r0
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	0f 92       	push	r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
    1b06:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1b0a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1b0e:	6c 01       	movw	r12, r24
    1b10:	09 2e       	mov	r0, r25
    1b12:	00 0c       	add	r0, r0
    1b14:	ee 08       	sbc	r14, r14
    1b16:	ff 08       	sbc	r15, r15
    1b18:	76 01       	movw	r14, r12
    1b1a:	dd 24       	eor	r13, r13
    1b1c:	cc 24       	eor	r12, r12
    1b1e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b22:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	c4 2a       	or	r12, r20
    1b2c:	d5 2a       	or	r13, r21
    1b2e:	e6 2a       	or	r14, r22
    1b30:	f7 2a       	or	r15, r23
    1b32:	b0 9b       	sbis	0x16, 0	; 22
    1b34:	1e c0       	rjmp	.+60     	; 0x1b72 <__vector_7+0x96>
    1b36:	6c 01       	movw	r12, r24
    1b38:	2f ef       	ldi	r18, 0xFF	; 255
    1b3a:	c2 1a       	sub	r12, r18
    1b3c:	d2 0a       	sbc	r13, r18
    1b3e:	0d 2c       	mov	r0, r13
    1b40:	00 0c       	add	r0, r0
    1b42:	ee 08       	sbc	r14, r14
    1b44:	ff 08       	sbc	r15, r15
    1b46:	d6 01       	movw	r26, r12
    1b48:	99 27       	eor	r25, r25
    1b4a:	88 27       	eor	r24, r24
    1b4c:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b50:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b54:	e1 2c       	mov	r14, r1
    1b56:	f1 2c       	mov	r15, r1
    1b58:	c8 2a       	or	r12, r24
    1b5a:	d9 2a       	or	r13, r25
    1b5c:	ea 2a       	or	r14, r26
    1b5e:	fb 2a       	or	r15, r27
    1b60:	08 c0       	rjmp	.+16     	; 0x1b72 <__vector_7+0x96>
    1b62:	8c e4       	ldi	r24, 0x4C	; 76
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 de 04 	call	0x9bc	; 0x9bc <dequeue>
    1b6a:	6e e4       	ldi	r22, 0x4E	; 78
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <enqueueByDeadline>
    1b72:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1b76:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1b7a:	30 97       	sbiw	r30, 0x00	; 0
    1b7c:	69 f0       	breq	.+26     	; 0x1b98 <__vector_7+0xbc>
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	a4 81       	ldd	r26, Z+4	; 0x04
    1b84:	b5 81       	ldd	r27, Z+5	; 0x05
    1b86:	8c 19       	sub	r24, r12
    1b88:	9d 09       	sbc	r25, r13
    1b8a:	ae 09       	sbc	r26, r14
    1b8c:	bf 09       	sbc	r27, r15
    1b8e:	18 16       	cp	r1, r24
    1b90:	19 06       	cpc	r1, r25
    1b92:	1a 06       	cpc	r1, r26
    1b94:	1b 06       	cpc	r1, r27
    1b96:	2c f7       	brge	.-54     	; 0x1b62 <__vector_7+0x86>
    1b98:	30 97       	sbiw	r30, 0x00	; 0
    1b9a:	21 f1       	breq	.+72     	; 0x1be4 <__vector_7+0x108>
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	a4 81       	ldd	r26, Z+4	; 0x04
    1ba2:	b5 81       	ldd	r27, Z+5	; 0x05
    1ba4:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1ba8:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1bac:	2a 17       	cp	r18, r26
    1bae:	3b 07       	cpc	r19, r27
    1bb0:	c9 f4       	brne	.+50     	; 0x1be4 <__vector_7+0x108>
    1bb2:	9c 01       	movw	r18, r24
    1bb4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bb8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bbc:	84 1b       	sub	r24, r20
    1bbe:	95 0b       	sbc	r25, r21
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	31 f4       	brne	.+12     	; 0x1bd0 <__vector_7+0xf4>
    1bc4:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc8:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bd4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bd8:	ef e6       	ldi	r30, 0x6F	; 111
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	82 60       	ori	r24, 0x02	; 2
    1be0:	80 83       	st	Z, r24
    1be2:	05 c0       	rjmp	.+10     	; 0x1bee <__vector_7+0x112>
    1be4:	ef e6       	ldi	r30, 0x6F	; 111
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	8d 7f       	andi	r24, 0xFD	; 253
    1bec:	80 83       	st	Z, r24
    1bee:	0e 94 13 05 	call	0xa26	; 0xa26 <schedule>
    1bf2:	ff 91       	pop	r31
    1bf4:	ef 91       	pop	r30
    1bf6:	bf 91       	pop	r27
    1bf8:	af 91       	pop	r26
    1bfa:	9f 91       	pop	r25
    1bfc:	8f 91       	pop	r24
    1bfe:	7f 91       	pop	r23
    1c00:	6f 91       	pop	r22
    1c02:	5f 91       	pop	r21
    1c04:	4f 91       	pop	r20
    1c06:	3f 91       	pop	r19
    1c08:	2f 91       	pop	r18
    1c0a:	ff 90       	pop	r15
    1c0c:	ef 90       	pop	r14
    1c0e:	df 90       	pop	r13
    1c10:	cf 90       	pop	r12
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <async>:
    1c1c:	3f 92       	push	r3
    1c1e:	4f 92       	push	r4
    1c20:	5f 92       	push	r5
    1c22:	6f 92       	push	r6
    1c24:	7f 92       	push	r7
    1c26:	8f 92       	push	r8
    1c28:	9f 92       	push	r9
    1c2a:	af 92       	push	r10
    1c2c:	bf 92       	push	r11
    1c2e:	cf 92       	push	r12
    1c30:	df 92       	push	r13
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	2b 01       	movw	r4, r22
    1c40:	3c 01       	movw	r6, r24
    1c42:	49 01       	movw	r8, r18
    1c44:	5a 01       	movw	r10, r20
    1c46:	8f b7       	in	r24, 0x3f	; 63
    1c48:	80 78       	andi	r24, 0x80	; 128
    1c4a:	38 2e       	mov	r3, r24
    1c4c:	f8 94       	cli
    1c4e:	8b e2       	ldi	r24, 0x2B	; 43
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	0e 94 de 04 	call	0x9bc	; 0x9bc <dequeue>
    1c56:	ec 01       	movw	r28, r24
    1c58:	1b 87       	std	Y+11, r17	; 0x0b
    1c5a:	0a 87       	std	Y+10, r16	; 0x0a
    1c5c:	fd 86       	std	Y+13, r15	; 0x0d
    1c5e:	ec 86       	std	Y+12, r14	; 0x0c
    1c60:	df 86       	std	Y+15, r13	; 0x0f
    1c62:	ce 86       	std	Y+14, r12	; 0x0e
    1c64:	33 20       	and	r3, r3
    1c66:	61 f0       	breq	.+24     	; 0x1c80 <async+0x64>
    1c68:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1c6c:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1c70:	02 80       	ldd	r0, Z+2	; 0x02
    1c72:	f3 81       	ldd	r31, Z+3	; 0x03
    1c74:	e0 2d       	mov	r30, r0
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	a4 81       	ldd	r26, Z+4	; 0x04
    1c7c:	b5 81       	ldd	r27, Z+5	; 0x05
    1c7e:	08 c0       	rjmp	.+16     	; 0x1c90 <async+0x74>
    1c80:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <timestamp>
    1c84:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <timestamp+0x1>
    1c88:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <timestamp+0x2>
    1c8c:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <timestamp+0x3>
    1c90:	48 0e       	add	r4, r24
    1c92:	59 1e       	adc	r5, r25
    1c94:	6a 1e       	adc	r6, r26
    1c96:	7b 1e       	adc	r7, r27
    1c98:	4a 82       	std	Y+2, r4	; 0x02
    1c9a:	5b 82       	std	Y+3, r5	; 0x03
    1c9c:	6c 82       	std	Y+4, r6	; 0x04
    1c9e:	7d 82       	std	Y+5, r7	; 0x05
    1ca0:	18 14       	cp	r1, r8
    1ca2:	19 04       	cpc	r1, r9
    1ca4:	1a 04       	cpc	r1, r10
    1ca6:	1b 04       	cpc	r1, r11
    1ca8:	44 f0       	brlt	.+16     	; 0x1cba <async+0x9e>
    1caa:	0f 2e       	mov	r0, r31
    1cac:	88 24       	eor	r8, r8
    1cae:	8a 94       	dec	r8
    1cb0:	98 2c       	mov	r9, r8
    1cb2:	a8 2c       	mov	r10, r8
    1cb4:	ff e7       	ldi	r31, 0x7F	; 127
    1cb6:	bf 2e       	mov	r11, r31
    1cb8:	f0 2d       	mov	r31, r0
    1cba:	84 0c       	add	r8, r4
    1cbc:	95 1c       	adc	r9, r5
    1cbe:	a6 1c       	adc	r10, r6
    1cc0:	b7 1c       	adc	r11, r7
    1cc2:	8e 82       	std	Y+6, r8	; 0x06
    1cc4:	9f 82       	std	Y+7, r9	; 0x07
    1cc6:	a8 86       	std	Y+8, r10	; 0x08
    1cc8:	b9 86       	std	Y+9, r11	; 0x09
    1cca:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1cce:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1cd2:	c9 01       	movw	r24, r18
    1cd4:	03 2e       	mov	r0, r19
    1cd6:	00 0c       	add	r0, r0
    1cd8:	aa 0b       	sbc	r26, r26
    1cda:	bb 0b       	sbc	r27, r27
    1cdc:	dc 01       	movw	r26, r24
    1cde:	99 27       	eor	r25, r25
    1ce0:	88 27       	eor	r24, r24
    1ce2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ce6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	84 2b       	or	r24, r20
    1cf0:	95 2b       	or	r25, r21
    1cf2:	a6 2b       	or	r26, r22
    1cf4:	b7 2b       	or	r27, r23
    1cf6:	b0 9b       	sbis	0x16, 0	; 22
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <async+0x104>
    1cfa:	c9 01       	movw	r24, r18
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	09 2e       	mov	r0, r25
    1d00:	00 0c       	add	r0, r0
    1d02:	aa 0b       	sbc	r26, r26
    1d04:	bb 0b       	sbc	r27, r27
    1d06:	dc 01       	movw	r26, r24
    1d08:	99 27       	eor	r25, r25
    1d0a:	88 27       	eor	r24, r24
    1d0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	70 e0       	ldi	r23, 0x00	; 0
    1d18:	84 2b       	or	r24, r20
    1d1a:	95 2b       	or	r25, r21
    1d1c:	a6 2b       	or	r26, r22
    1d1e:	b7 2b       	or	r27, r23
    1d20:	48 1a       	sub	r4, r24
    1d22:	59 0a       	sbc	r5, r25
    1d24:	6a 0a       	sbc	r6, r26
    1d26:	7b 0a       	sbc	r7, r27
    1d28:	14 14       	cp	r1, r4
    1d2a:	15 04       	cpc	r1, r5
    1d2c:	16 04       	cpc	r1, r6
    1d2e:	17 04       	cpc	r1, r7
    1d30:	ac f5       	brge	.+106    	; 0x1d9c <async+0x180>
    1d32:	6c e4       	ldi	r22, 0x4C	; 76
    1d34:	71 e0       	ldi	r23, 0x01	; 1
    1d36:	ce 01       	movw	r24, r28
    1d38:	0e 94 ad 04 	call	0x95a	; 0x95a <enqueueByBaseline>
    1d3c:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1d40:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1d44:	30 97       	sbiw	r30, 0x00	; 0
    1d46:	21 f1       	breq	.+72     	; 0x1d90 <async+0x174>
    1d48:	82 81       	ldd	r24, Z+2	; 0x02
    1d4a:	93 81       	ldd	r25, Z+3	; 0x03
    1d4c:	a4 81       	ldd	r26, Z+4	; 0x04
    1d4e:	b5 81       	ldd	r27, Z+5	; 0x05
    1d50:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1d54:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1d58:	2a 17       	cp	r18, r26
    1d5a:	3b 07       	cpc	r19, r27
    1d5c:	c9 f4       	brne	.+50     	; 0x1d90 <async+0x174>
    1d5e:	9c 01       	movw	r18, r24
    1d60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d68:	84 1b       	sub	r24, r20
    1d6a:	95 0b       	sbc	r25, r21
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	31 f4       	brne	.+12     	; 0x1d7c <async+0x160>
    1d70:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d74:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d78:	2f 5f       	subi	r18, 0xFF	; 255
    1d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d80:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d84:	ef e6       	ldi	r30, 0x6F	; 111
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	82 60       	ori	r24, 0x02	; 2
    1d8c:	80 83       	st	Z, r24
    1d8e:	39 c0       	rjmp	.+114    	; 0x1e02 <async+0x1e6>
    1d90:	ef e6       	ldi	r30, 0x6F	; 111
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8d 7f       	andi	r24, 0xFD	; 253
    1d98:	80 83       	st	Z, r24
    1d9a:	33 c0       	rjmp	.+102    	; 0x1e02 <async+0x1e6>
    1d9c:	6e e4       	ldi	r22, 0x4E	; 78
    1d9e:	71 e0       	ldi	r23, 0x01	; 1
    1da0:	ce 01       	movw	r24, r28
    1da2:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <enqueueByDeadline>
    1da6:	33 20       	and	r3, r3
    1da8:	61 f1       	breq	.+88     	; 0x1e02 <async+0x1e6>
    1daa:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
    1dae:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
    1db2:	89 2b       	or	r24, r25
    1db4:	31 f1       	breq	.+76     	; 0x1e02 <async+0x1e6>
    1db6:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
    1dba:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
    1dbe:	86 81       	ldd	r24, Z+6	; 0x06
    1dc0:	97 81       	ldd	r25, Z+7	; 0x07
    1dc2:	a0 85       	ldd	r26, Z+8	; 0x08
    1dc4:	b1 85       	ldd	r27, Z+9	; 0x09
    1dc6:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    1dca:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    1dce:	02 80       	ldd	r0, Z+2	; 0x02
    1dd0:	f3 81       	ldd	r31, Z+3	; 0x03
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	46 81       	ldd	r20, Z+6	; 0x06
    1dd6:	57 81       	ldd	r21, Z+7	; 0x07
    1dd8:	60 85       	ldd	r22, Z+8	; 0x08
    1dda:	71 85       	ldd	r23, Z+9	; 0x09
    1ddc:	84 1b       	sub	r24, r20
    1dde:	95 0b       	sbc	r25, r21
    1de0:	a6 0b       	sbc	r26, r22
    1de2:	b7 0b       	sbc	r27, r23
    1de4:	72 f4       	brpl	.+28     	; 0x1e02 <async+0x1e6>
    1de6:	89 e2       	ldi	r24, 0x29	; 41
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	0e 94 09 05 	call	0xa12	; 0xa12 <pop>
    1dee:	67 e2       	ldi	r22, 0x27	; 39
    1df0:	71 e0       	ldi	r23, 0x01	; 1
    1df2:	0e 94 ff 04 	call	0x9fe	; 0x9fe <push>
    1df6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <activeStack>
    1dfa:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <activeStack+0x1>
    1dfe:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <dispatch>
    1e02:	33 20       	and	r3, r3
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <async+0x1ec>
    1e06:	78 94       	sei
    1e08:	ce 01       	movw	r24, r28
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	1f 91       	pop	r17
    1e10:	0f 91       	pop	r16
    1e12:	ff 90       	pop	r15
    1e14:	ef 90       	pop	r14
    1e16:	df 90       	pop	r13
    1e18:	cf 90       	pop	r12
    1e1a:	bf 90       	pop	r11
    1e1c:	af 90       	pop	r10
    1e1e:	9f 90       	pop	r9
    1e20:	8f 90       	pop	r8
    1e22:	7f 90       	pop	r7
    1e24:	6f 90       	pop	r6
    1e26:	5f 90       	pop	r5
    1e28:	4f 90       	pop	r4
    1e2a:	3f 90       	pop	r3
    1e2c:	08 95       	ret

00001e2e <sync>:
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	ec 01       	movw	r28, r24
    1e40:	7b 01       	movw	r14, r22
    1e42:	6a 01       	movw	r12, r20
    1e44:	1f b7       	in	r17, 0x3f	; 63
    1e46:	10 78       	andi	r17, 0x80	; 128
    1e48:	f8 94       	cli
    1e4a:	a8 81       	ld	r26, Y
    1e4c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e4e:	10 97       	sbiw	r26, 0x00	; 0
    1e50:	19 f4       	brne	.+6      	; 0x1e58 <sync+0x2a>
    1e52:	35 c0       	rjmp	.+106    	; 0x1ebe <sync+0x90>
    1e54:	a0 81       	ld	r26, Z
    1e56:	b1 81       	ldd	r27, Z+1	; 0x01
    1e58:	14 96       	adiw	r26, 0x04	; 4
    1e5a:	ed 91       	ld	r30, X+
    1e5c:	fc 91       	ld	r31, X
    1e5e:	15 97       	sbiw	r26, 0x05	; 5
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	c1 f7       	brne	.-16     	; 0x1e54 <sync+0x26>
    1e64:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <current>
    1e68:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <current+0x1>
    1e6c:	a2 17       	cp	r26, r18
    1e6e:	b3 07       	cpc	r27, r19
    1e70:	11 f0       	breq	.+4      	; 0x1e76 <sync+0x48>
    1e72:	11 11       	cpse	r17, r1
    1e74:	07 c0       	rjmp	.+14     	; 0x1e84 <sync+0x56>
    1e76:	11 23       	and	r17, r17
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <sync+0x4e>
    1e7a:	4a c0       	rjmp	.+148    	; 0x1f10 <sync+0xe2>
    1e7c:	78 94       	sei
    1e7e:	8f ef       	ldi	r24, 0xFF	; 255
    1e80:	9f ef       	ldi	r25, 0xFF	; 255
    1e82:	4e c0       	rjmp	.+156    	; 0x1f20 <sync+0xf2>
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	19 f0       	breq	.+6      	; 0x1e92 <sync+0x64>
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	15 82       	std	Z+5, r1	; 0x05
    1e90:	14 82       	std	Z+4, r1	; 0x04
    1e92:	3b 83       	std	Y+3, r19	; 0x03
    1e94:	2a 83       	std	Y+2, r18	; 0x02
    1e96:	f9 01       	movw	r30, r18
    1e98:	d5 83       	std	Z+5, r29	; 0x05
    1e9a:	c4 83       	std	Z+4, r28	; 0x04
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <dispatch>
    1ea2:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1ea6:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1eaa:	82 81       	ldd	r24, Z+2	; 0x02
    1eac:	93 81       	ldd	r25, Z+3	; 0x03
    1eae:	89 2b       	or	r24, r25
    1eb0:	31 f4       	brne	.+12     	; 0x1ebe <sync+0x90>
    1eb2:	11 23       	and	r17, r17
    1eb4:	81 f1       	breq	.+96     	; 0x1f16 <sync+0xe8>
    1eb6:	78 94       	sei
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	31 c0       	rjmp	.+98     	; 0x1f20 <sync+0xf2>
    1ebe:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
    1ec2:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
    1ec6:	99 83       	std	Y+1, r25	; 0x01
    1ec8:	88 83       	st	Y, r24
    1eca:	11 23       	and	r17, r17
    1ecc:	29 f0       	breq	.+10     	; 0x1ed8 <sync+0xaa>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <sync+0xaa>
    1ed6:	78 94       	sei
    1ed8:	b6 01       	movw	r22, r12
    1eda:	ce 01       	movw	r24, r28
    1edc:	f7 01       	movw	r30, r14
    1ede:	09 95       	icall
    1ee0:	f8 2e       	mov	r15, r24
    1ee2:	09 2f       	mov	r16, r25
    1ee4:	8f b7       	in	r24, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	19 82       	std	Y+1, r1	; 0x01
    1eea:	18 82       	st	Y, r1
    1eec:	8a 81       	ldd	r24, Y+2	; 0x02
    1eee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	91 05       	cpc	r25, r1
    1ef4:	38 f0       	brcs	.+14     	; 0x1f04 <sync+0xd6>
    1ef6:	1b 82       	std	Y+3, r1	; 0x03
    1ef8:	1a 82       	std	Y+2, r1	; 0x02
    1efa:	fc 01       	movw	r30, r24
    1efc:	15 82       	std	Z+5, r1	; 0x05
    1efe:	14 82       	std	Z+4, r1	; 0x04
    1f00:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <dispatch>
    1f04:	11 23       	and	r17, r17
    1f06:	51 f0       	breq	.+20     	; 0x1f1c <sync+0xee>
    1f08:	78 94       	sei
    1f0a:	8f 2d       	mov	r24, r15
    1f0c:	90 2f       	mov	r25, r16
    1f0e:	08 c0       	rjmp	.+16     	; 0x1f20 <sync+0xf2>
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	9f ef       	ldi	r25, 0xFF	; 255
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <sync+0xf2>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <sync+0xf2>
    1f1c:	8f 2d       	mov	r24, r15
    1f1e:	90 2f       	mov	r25, r16
    1f20:	df 91       	pop	r29
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	ff 90       	pop	r15
    1f2a:	ef 90       	pop	r14
    1f2c:	df 90       	pop	r13
    1f2e:	cf 90       	pop	r12
    1f30:	08 95       	ret

00001f32 <run>:
    1f32:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <current>
    1f36:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <current+0x1>
    1f3a:	8e e4       	ldi	r24, 0x4E	; 78
    1f3c:	91 e0       	ldi	r25, 0x01	; 1
    1f3e:	0e 94 de 04 	call	0x9bc	; 0x9bc <dequeue>
    1f42:	ec 01       	movw	r28, r24
    1f44:	f8 01       	movw	r30, r16
    1f46:	93 83       	std	Z+3, r25	; 0x03
    1f48:	82 83       	std	Z+2, r24	; 0x02
    1f4a:	78 94       	sei
    1f4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f50:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f52:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f54:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f56:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f58:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <sync>
    1f5c:	8f b7       	in	r24, 0x3f	; 63
    1f5e:	f8 94       	cli
    1f60:	6b e2       	ldi	r22, 0x2B	; 43
    1f62:	71 e0       	ldi	r23, 0x01	; 1
    1f64:	ce 01       	movw	r24, r28
    1f66:	0e 94 f5 04 	call	0x9ea	; 0x9ea <insert>
    1f6a:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    1f6e:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    1f72:	01 90       	ld	r0, Z+
    1f74:	f0 81       	ld	r31, Z
    1f76:	e0 2d       	mov	r30, r0
    1f78:	c2 81       	ldd	r28, Z+2	; 0x02
    1f7a:	d3 81       	ldd	r29, Z+3	; 0x03
    1f7c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
    1f80:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
    1f84:	30 97       	sbiw	r30, 0x00	; 0
    1f86:	a1 f0       	breq	.+40     	; 0x1fb0 <run+0x7e>
    1f88:	20 97       	sbiw	r28, 0x00	; 0
    1f8a:	99 f2       	breq	.-90     	; 0x1f32 <run>
    1f8c:	86 81       	ldd	r24, Z+6	; 0x06
    1f8e:	97 81       	ldd	r25, Z+7	; 0x07
    1f90:	a0 85       	ldd	r26, Z+8	; 0x08
    1f92:	b1 85       	ldd	r27, Z+9	; 0x09
    1f94:	4e 81       	ldd	r20, Y+6	; 0x06
    1f96:	5f 81       	ldd	r21, Y+7	; 0x07
    1f98:	68 85       	ldd	r22, Y+8	; 0x08
    1f9a:	79 85       	ldd	r23, Y+9	; 0x09
    1f9c:	84 1b       	sub	r24, r20
    1f9e:	95 0b       	sbc	r25, r21
    1fa0:	a6 0b       	sbc	r26, r22
    1fa2:	b7 0b       	sbc	r27, r23
    1fa4:	18 16       	cp	r1, r24
    1fa6:	19 06       	cpc	r1, r25
    1fa8:	1a 06       	cpc	r1, r26
    1faa:	1b 06       	cpc	r1, r27
    1fac:	0c f0       	brlt	.+2      	; 0x1fb0 <run+0x7e>
    1fae:	c1 cf       	rjmp	.-126    	; 0x1f32 <run>
    1fb0:	87 e2       	ldi	r24, 0x27	; 39
    1fb2:	91 e0       	ldi	r25, 0x01	; 1
    1fb4:	0e 94 09 05 	call	0xa12	; 0xa12 <pop>
    1fb8:	69 e2       	ldi	r22, 0x29	; 41
    1fba:	71 e0       	ldi	r23, 0x01	; 1
    1fbc:	0e 94 ff 04 	call	0x9fe	; 0x9fe <push>
    1fc0:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <activeStack>
    1fc4:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <activeStack+0x1>
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <run+0x9c>
    1fca:	a0 81       	ld	r26, Z
    1fcc:	b1 81       	ldd	r27, Z+1	; 0x01
    1fce:	14 96       	adiw	r26, 0x04	; 4
    1fd0:	ed 91       	ld	r30, X+
    1fd2:	fc 91       	ld	r31, X
    1fd4:	15 97       	sbiw	r26, 0x05	; 5
    1fd6:	30 97       	sbiw	r30, 0x00	; 0
    1fd8:	c1 f7       	brne	.-16     	; 0x1fca <run+0x98>
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <dispatch>
    1fe0:	a8 cf       	rjmp	.-176    	; 0x1f32 <run>

00001fe2 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1fe2:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1fe4:	42 31       	cpi	r20, 0x12	; 18
    1fe6:	b8 f4       	brcc	.+46     	; 0x2016 <install+0x34>
        char status;
        DISABLE(status);
    1fe8:	9f b7       	in	r25, 0x3f	; 63
    1fea:	90 78       	andi	r25, 0x80	; 128
    1fec:	f8 94       	cli
        otable[i] = obj;
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	44 0f       	add	r20, r20
    1ff2:	55 1f       	adc	r21, r21
    1ff4:	da 01       	movw	r26, r20
    1ff6:	a0 5b       	subi	r26, 0xB0	; 176
    1ff8:	be 4f       	sbci	r27, 0xFE	; 254
    1ffa:	ed 93       	st	X+, r30
    1ffc:	fc 93       	st	X, r31
        mtable[i] = m;
    1ffe:	da 01       	movw	r26, r20
    2000:	a8 51       	subi	r26, 0x18	; 24
    2002:	be 4f       	sbci	r27, 0xFE	; 254
    2004:	6d 93       	st	X+, r22
    2006:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2008:	21 e0       	ldi	r18, 0x01	; 1
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	33 83       	std	Z+3, r19	; 0x03
    200e:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2010:	99 23       	and	r25, r25
    2012:	09 f0       	breq	.+2      	; 0x2016 <install+0x34>
    2014:	78 94       	sei
    2016:	08 95       	ret

00002018 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2018:	8c 01       	movw	r16, r24
    201a:	7b 01       	movw	r14, r22
    201c:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    201e:	8f b7       	in	r24, 0x3f	; 63
    2020:	f8 94       	cli
    initialize();
    2022:	0e 94 bd 03 	call	0x77a	; 0x77a <initialize>
    ENABLE(1);
    2026:	78 94       	sei
    if (m != NULL)
    2028:	e1 14       	cp	r14, r1
    202a:	f1 04       	cpc	r15, r1
    202c:	41 f0       	breq	.+16     	; 0x203e <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	60 e0       	ldi	r22, 0x00	; 0
    2036:	70 e0       	ldi	r23, 0x00	; 0
    2038:	cb 01       	movw	r24, r22
    203a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <async>
    DISABLE(status);
    203e:	8f b7       	in	r24, 0x3f	; 63
    2040:	f8 94       	cli
    idle();
    2042:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <idle>

00002046 <__divmodsi4>:
    2046:	05 2e       	mov	r0, r21
    2048:	97 fb       	bst	r25, 7
    204a:	1e f4       	brtc	.+6      	; 0x2052 <__divmodsi4+0xc>
    204c:	00 94       	com	r0
    204e:	0e 94 3a 10 	call	0x2074	; 0x2074 <__negsi2>
    2052:	57 fd       	sbrc	r21, 7
    2054:	07 d0       	rcall	.+14     	; 0x2064 <__divmodsi4_neg2>
    2056:	0e 94 42 10 	call	0x2084	; 0x2084 <__udivmodsi4>
    205a:	07 fc       	sbrc	r0, 7
    205c:	03 d0       	rcall	.+6      	; 0x2064 <__divmodsi4_neg2>
    205e:	4e f4       	brtc	.+18     	; 0x2072 <__divmodsi4_exit>
    2060:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__negsi2>

00002064 <__divmodsi4_neg2>:
    2064:	50 95       	com	r21
    2066:	40 95       	com	r20
    2068:	30 95       	com	r19
    206a:	21 95       	neg	r18
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	4f 4f       	sbci	r20, 0xFF	; 255
    2070:	5f 4f       	sbci	r21, 0xFF	; 255

00002072 <__divmodsi4_exit>:
    2072:	08 95       	ret

00002074 <__negsi2>:
    2074:	90 95       	com	r25
    2076:	80 95       	com	r24
    2078:	70 95       	com	r23
    207a:	61 95       	neg	r22
    207c:	7f 4f       	sbci	r23, 0xFF	; 255
    207e:	8f 4f       	sbci	r24, 0xFF	; 255
    2080:	9f 4f       	sbci	r25, 0xFF	; 255
    2082:	08 95       	ret

00002084 <__udivmodsi4>:
    2084:	a1 e2       	ldi	r26, 0x21	; 33
    2086:	1a 2e       	mov	r1, r26
    2088:	aa 1b       	sub	r26, r26
    208a:	bb 1b       	sub	r27, r27
    208c:	fd 01       	movw	r30, r26
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <__udivmodsi4_ep>

00002090 <__udivmodsi4_loop>:
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	ee 1f       	adc	r30, r30
    2096:	ff 1f       	adc	r31, r31
    2098:	a2 17       	cp	r26, r18
    209a:	b3 07       	cpc	r27, r19
    209c:	e4 07       	cpc	r30, r20
    209e:	f5 07       	cpc	r31, r21
    20a0:	20 f0       	brcs	.+8      	; 0x20aa <__udivmodsi4_ep>
    20a2:	a2 1b       	sub	r26, r18
    20a4:	b3 0b       	sbc	r27, r19
    20a6:	e4 0b       	sbc	r30, r20
    20a8:	f5 0b       	sbc	r31, r21

000020aa <__udivmodsi4_ep>:
    20aa:	66 1f       	adc	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	99 1f       	adc	r25, r25
    20b2:	1a 94       	dec	r1
    20b4:	69 f7       	brne	.-38     	; 0x2090 <__udivmodsi4_loop>
    20b6:	60 95       	com	r22
    20b8:	70 95       	com	r23
    20ba:	80 95       	com	r24
    20bc:	90 95       	com	r25
    20be:	9b 01       	movw	r18, r22
    20c0:	ac 01       	movw	r20, r24
    20c2:	bd 01       	movw	r22, r26
    20c4:	cf 01       	movw	r24, r30
    20c6:	08 95       	ret

000020c8 <setjmp>:
    20c8:	dc 01       	movw	r26, r24
    20ca:	2d 92       	st	X+, r2
    20cc:	3d 92       	st	X+, r3
    20ce:	4d 92       	st	X+, r4
    20d0:	5d 92       	st	X+, r5
    20d2:	6d 92       	st	X+, r6
    20d4:	7d 92       	st	X+, r7
    20d6:	8d 92       	st	X+, r8
    20d8:	9d 92       	st	X+, r9
    20da:	ad 92       	st	X+, r10
    20dc:	bd 92       	st	X+, r11
    20de:	cd 92       	st	X+, r12
    20e0:	dd 92       	st	X+, r13
    20e2:	ed 92       	st	X+, r14
    20e4:	fd 92       	st	X+, r15
    20e6:	0d 93       	st	X+, r16
    20e8:	1d 93       	st	X+, r17
    20ea:	cd 93       	st	X+, r28
    20ec:	dd 93       	st	X+, r29
    20ee:	ff 91       	pop	r31
    20f0:	ef 91       	pop	r30
    20f2:	8d b7       	in	r24, 0x3d	; 61
    20f4:	8d 93       	st	X+, r24
    20f6:	8e b7       	in	r24, 0x3e	; 62
    20f8:	8d 93       	st	X+, r24
    20fa:	8f b7       	in	r24, 0x3f	; 63
    20fc:	8d 93       	st	X+, r24
    20fe:	ed 93       	st	X+, r30
    2100:	fd 93       	st	X+, r31
    2102:	88 27       	eor	r24, r24
    2104:	99 27       	eor	r25, r25
    2106:	09 94       	ijmp

00002108 <longjmp>:
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	81 1d       	adc	r24, r1
    2112:	2d 90       	ld	r2, X+
    2114:	3d 90       	ld	r3, X+
    2116:	4d 90       	ld	r4, X+
    2118:	5d 90       	ld	r5, X+
    211a:	6d 90       	ld	r6, X+
    211c:	7d 90       	ld	r7, X+
    211e:	8d 90       	ld	r8, X+
    2120:	9d 90       	ld	r9, X+
    2122:	ad 90       	ld	r10, X+
    2124:	bd 90       	ld	r11, X+
    2126:	cd 90       	ld	r12, X+
    2128:	dd 90       	ld	r13, X+
    212a:	ed 90       	ld	r14, X+
    212c:	fd 90       	ld	r15, X+
    212e:	0d 91       	ld	r16, X+
    2130:	1d 91       	ld	r17, X+
    2132:	cd 91       	ld	r28, X+
    2134:	dd 91       	ld	r29, X+
    2136:	ed 91       	ld	r30, X+
    2138:	fd 91       	ld	r31, X+
    213a:	0d 90       	ld	r0, X+
    213c:	f8 94       	cli
    213e:	fe bf       	out	0x3e, r31	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	ed bf       	out	0x3d, r30	; 61
    2144:	ed 91       	ld	r30, X+
    2146:	fd 91       	ld	r31, X+
    2148:	09 94       	ijmp

0000214a <_exit>:
    214a:	f8 94       	cli

0000214c <__stop_program>:
    214c:	ff cf       	rjmp	.-2      	; 0x214c <__stop_program>
