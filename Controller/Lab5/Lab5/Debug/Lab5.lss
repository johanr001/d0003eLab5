
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000023be  00002452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  0000246e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000246e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ccf  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001053  00000000  00000000  00005417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000160c  00000000  00000000  0000646a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  00007a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d1  00000000  00000000  00008768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a71  00000000  00000000  00009139  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000208  00000000  00000000  0000bbaa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_1>
       8:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_2>
       c:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__vector_3>
      10:	0c 94 75 07 	jmp	0xeea	; 0xeea <__vector_4>
      14:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 fd 0d 	jmp	0x1bfa	; 0x1bfa <__vector_9>
      28:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_10>
      2c:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <__vector_11>
      30:	0c 94 31 09 	jmp	0x1262	; 0x1262 <__vector_12>
      34:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_13>
      38:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_14>
      3c:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_15>
      40:	0c 94 ed 0a 	jmp	0x15da	; 0x15da <__vector_16>
      44:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_17>
      48:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__vector_18>
      4c:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_19>
      50:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_20>
      54:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__vector_21>
      58:	0c 94 87 0d 	jmp	0x1b0e	; 0x1b0e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ee eb       	ldi	r30, 0xBE	; 190
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4b 04 	call	0x896	; 0x896 <main>
      92:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <avr_init>:
#define BAUD 9600
#define MYUBRR FOSC / 16 / BAUD - 1

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init() {
  CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
  CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

  TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
      a4:	e1 e8       	ldi	r30, 0x81	; 129
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8d 60       	ori	r24, 0x0D	; 13
      ac:	80 83       	st	Z, r24

  TCNT1 = 0;
      ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
      b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>

  TIMSK1 |= (1 << OCIE1A);
      b6:	ef e6       	ldi	r30, 0x6F	; 111
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	80 83       	st	Z, r24
  OCR1A =
      c0:	e2 ec       	ldi	r30, 0xC2	; 194
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
      c8:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
      194; // f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund

  UBRR0H |= (MYUBRR >> 8);
      cc:	a5 ec       	ldi	r26, 0xC5	; 197
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	8c 91       	ld	r24, X
      d2:	8c 93       	st	X, r24
  UBRR0L |= MYUBRR;
      d4:	a4 ec       	ldi	r26, 0xC4	; 196
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	8c 91       	ld	r24, X
      da:	83 63       	ori	r24, 0x33	; 51
      dc:	8c 93       	st	X, r24
  // Reciever, transmitter, och interrupt.
  UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
      de:	88 e9       	ldi	r24, 0x98	; 152
      e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
  // 8 Data, 1 stop bit
  UCSR0C = (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret

000000ea <removeFromBridge>:

	return 0;
}

// updateBridgeAmount så man can calla med AFTER i bitParsern.
int removeFromBridge(Controller *self, int arg) {
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	fc 01       	movw	r30, r24
	self->BridgeAmount -= 1;
      f8:	80 89       	ldd	r24, Z+16	; 0x10
      fa:	91 89       	ldd	r25, Z+17	; 0x11
      fc:	a2 89       	ldd	r26, Z+18	; 0x12
      fe:	b3 89       	ldd	r27, Z+19	; 0x13
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	a1 09       	sbc	r26, r1
     104:	b1 09       	sbc	r27, r1
     106:	80 8b       	std	Z+16, r24	; 0x10
     108:	91 8b       	std	Z+17, r25	; 0x11
     10a:	a2 8b       	std	Z+18, r26	; 0x12
     10c:	b3 8b       	std	Z+19, r27	; 0x13
	ASYNC(self->gui, updateDisplay, 0);
     10e:	06 81       	ldd	r16, Z+6	; 0x06
     110:	17 81       	ldd	r17, Z+7	; 0x07
     112:	c1 2c       	mov	r12, r1
     114:	d1 2c       	mov	r13, r1
     116:	0f 2e       	mov	r0, r31
     118:	fe ed       	ldi	r31, 0xDE	; 222
     11a:	ef 2e       	mov	r14, r31
     11c:	f3 e0       	ldi	r31, 0x03	; 3
     11e:	ff 2e       	mov	r15, r31
     120:	f0 2d       	mov	r31, r0
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	a9 01       	movw	r20, r18
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	cb 01       	movw	r24, r22
     12e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	return 0;
}
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	1f 91       	pop	r17
     138:	0f 91       	pop	r16
     13a:	ff 90       	pop	r15
     13c:	ef 90       	pop	r14
     13e:	df 90       	pop	r13
     140:	cf 90       	pop	r12
     142:	08 95       	ret

00000144 <idleState>:

// idleState hanterar bron när den är tom, och bestämmer vilken bil som ska passera
int idleState(Controller *self, int arg) {
     144:	cf 92       	push	r12
     146:	df 92       	push	r13
     148:	ef 92       	push	r14
     14a:	ff 92       	push	r15
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	fc 01       	movw	r30, r24
	self->BridgePassedSameDir = 0; // Nollställ.
     156:	14 8a       	std	Z+20, r1	; 0x14
     158:	15 8a       	std	Z+21, r1	; 0x15
     15a:	16 8a       	std	Z+22, r1	; 0x16
     15c:	17 8a       	std	Z+23, r1	; 0x17
	// Bestämmer vilken queue som ska prioriteras baserat på lastBridgeDir.
	int *priorityQueue = self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
     15e:	80 8d       	ldd	r24, Z+24	; 0x18
     160:	88 23       	and	r24, r24
     162:	19 f0       	breq	.+6      	; 0x16a <idleState+0x26>
     164:	df 01       	movw	r26, r30
     166:	1c 96       	adiw	r26, 0x0c	; 12
     168:	02 c0       	rjmp	.+4      	; 0x16e <idleState+0x2a>
     16a:	df 01       	movw	r26, r30
     16c:	18 96       	adiw	r26, 0x08	; 8
	int *secondaryQueue = self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
     16e:	88 23       	and	r24, r24
     170:	19 f0       	breq	.+6      	; 0x178 <idleState+0x34>
     172:	ef 01       	movw	r28, r30
     174:	28 96       	adiw	r28, 0x08	; 8
     176:	02 c0       	rjmp	.+4      	; 0x17c <idleState+0x38>
     178:	ef 01       	movw	r28, r30
     17a:	2c 96       	adiw	r28, 0x0c	; 12
	// Om den prioriterade queuen har bilar, ändra riktning och skicka nästa bil.
	if (*priorityQueue > 0) {
     17c:	2d 91       	ld	r18, X+
     17e:	3c 91       	ld	r19, X
     180:	12 16       	cp	r1, r18
     182:	13 06       	cpc	r1, r19
     184:	ac f4       	brge	.+42     	; 0x1b0 <idleState+0x6c>
		self->lastBridgeDir = !self->lastBridgeDir;
     186:	91 e0       	ldi	r25, 0x01	; 1
     188:	89 27       	eor	r24, r25
     18a:	80 8f       	std	Z+24, r24	; 0x18
		ASYNC(self, dispatchNextCar, 0);
     18c:	c1 2c       	mov	r12, r1
     18e:	d1 2c       	mov	r13, r1
     190:	0f 2e       	mov	r0, r31
     192:	fc e0       	ldi	r31, 0x0C	; 12
     194:	ef 2e       	mov	r14, r31
     196:	f1 e0       	ldi	r31, 0x01	; 1
     198:	ff 2e       	mov	r15, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	8f 01       	movw	r16, r30
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	a9 01       	movw	r20, r18
     1a4:	60 e0       	ldi	r22, 0x00	; 0
     1a6:	70 e0       	ldi	r23, 0x00	; 0
     1a8:	cb 01       	movw	r24, r22
     1aa:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
     1ae:	29 c0       	rjmp	.+82     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
	}
	// Om den andra kön har bilar, skicka nästa bil.
	else if (*secondaryQueue > 0) {
     1b0:	88 81       	ld	r24, Y
     1b2:	99 81       	ldd	r25, Y+1	; 0x01
     1b4:	18 16       	cp	r1, r24
     1b6:	19 06       	cpc	r1, r25
     1b8:	94 f4       	brge	.+36     	; 0x1de <idleState+0x9a>
		ASYNC(self, dispatchNextCar, 0);
     1ba:	c1 2c       	mov	r12, r1
     1bc:	d1 2c       	mov	r13, r1
     1be:	0f 2e       	mov	r0, r31
     1c0:	fc e0       	ldi	r31, 0x0C	; 12
     1c2:	ef 2e       	mov	r14, r31
     1c4:	f1 e0       	ldi	r31, 0x01	; 1
     1c6:	ff 2e       	mov	r15, r31
     1c8:	f0 2d       	mov	r31, r0
     1ca:	8f 01       	movw	r16, r30
     1cc:	20 e0       	ldi	r18, 0x00	; 0
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	a9 01       	movw	r20, r18
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	70 e0       	ldi	r23, 0x00	; 0
     1d6:	cb 01       	movw	r24, r22
     1d8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
     1dc:	12 c0       	rjmp	.+36     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
	}
	// Om inga bilar finns i någon kö, loopa igen.
	else {
		AFTER(MSEC(IDLE_DELAY_MSEC), self, idleState, 0);
     1de:	c1 2c       	mov	r12, r1
     1e0:	d1 2c       	mov	r13, r1
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f2 ea       	ldi	r31, 0xA2	; 162
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 e0       	ldi	r31, 0x00	; 0
     1ea:	ff 2e       	mov	r15, r31
     1ec:	f0 2d       	mov	r31, r0
     1ee:	8f 01       	movw	r16, r30
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	a9 01       	movw	r20, r18
     1f6:	69 e0       	ldi	r22, 0x09	; 9
     1f8:	7d e3       	ldi	r23, 0x3D	; 61
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	return 0;
}
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	ef 90       	pop	r14
     212:	df 90       	pop	r13
     214:	cf 90       	pop	r12
     216:	08 95       	ret

00000218 <dispatchNextCar>:
	}
	return 0;
}

// dispatchNextCar avgör om nästa bil kan skickas ut på bron.
int dispatchNextCar(Controller *self, int arg) {
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
	int *currentQueue = self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
     224:	fc 01       	movw	r30, r24
     226:	20 8d       	ldd	r18, Z+24	; 0x18
     228:	22 23       	and	r18, r18
     22a:	11 f0       	breq	.+4      	; 0x230 <dispatchNextCar+0x18>
     22c:	38 96       	adiw	r30, 0x08	; 8
     22e:	02 c0       	rjmp	.+4      	; 0x234 <dispatchNextCar+0x1c>
     230:	fc 01       	movw	r30, r24
     232:	3c 96       	adiw	r30, 0x0c	; 12
	int *oppositeQueue = self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
     234:	22 23       	and	r18, r18
     236:	19 f0       	breq	.+6      	; 0x23e <dispatchNextCar+0x26>
     238:	dc 01       	movw	r26, r24
     23a:	1c 96       	adiw	r26, 0x0c	; 12
     23c:	02 c0       	rjmp	.+4      	; 0x242 <dispatchNextCar+0x2a>
     23e:	dc 01       	movw	r26, r24
     240:	18 96       	adiw	r26, 0x08	; 8
	// Om kön är tom eller för många bilar passerat i samma riktning, vänta på att bron blir tom.
	if (!(*currentQueue) || (self->BridgePassedSameDir >= MAX_PASS_SAME_SIDE && *oppositeQueue > 0)) {
     242:	20 81       	ld	r18, Z
     244:	31 81       	ldd	r19, Z+1	; 0x01
     246:	23 2b       	or	r18, r19
     248:	79 f0       	breq	.+30     	; 0x268 <dispatchNextCar+0x50>
     24a:	fc 01       	movw	r30, r24
     24c:	44 89       	ldd	r20, Z+20	; 0x14
     24e:	55 89       	ldd	r21, Z+21	; 0x15
     250:	66 89       	ldd	r22, Z+22	; 0x16
     252:	77 89       	ldd	r23, Z+23	; 0x17
     254:	4a 30       	cpi	r20, 0x0A	; 10
     256:	51 05       	cpc	r21, r1
     258:	61 05       	cpc	r22, r1
     25a:	71 05       	cpc	r23, r1
     25c:	b8 f0       	brcs	.+46     	; 0x28c <dispatchNextCar+0x74>
     25e:	2d 91       	ld	r18, X+
     260:	3c 91       	ld	r19, X
     262:	12 16       	cp	r1, r18
     264:	13 06       	cpc	r1, r19
     266:	94 f4       	brge	.+36     	; 0x28c <dispatchNextCar+0x74>
		ASYNC(self, waitForBridgeClearance, 0);
     268:	c1 2c       	mov	r12, r1
     26a:	d1 2c       	mov	r13, r1
     26c:	0f 2e       	mov	r0, r31
     26e:	f1 ea       	ldi	r31, 0xA1	; 161
     270:	ef 2e       	mov	r14, r31
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	ff 2e       	mov	r15, r31
     276:	f0 2d       	mov	r31, r0
     278:	8c 01       	movw	r16, r24
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	a9 01       	movw	r20, r18
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	70 e0       	ldi	r23, 0x00	; 0
     284:	cb 01       	movw	r24, r22
     286:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
		return 0;
     28a:	11 c0       	rjmp	.+34     	; 0x2ae <dispatchNextCar+0x96>
	}
	// Skicka signal att tända grönt för nästa bil.
	ASYNC(self, signalGreenLight, 0);
     28c:	c1 2c       	mov	r12, r1
     28e:	d1 2c       	mov	r13, r1
     290:	0f 2e       	mov	r0, r31
     292:	f0 e6       	ldi	r31, 0x60	; 96
     294:	ef 2e       	mov	r14, r31
     296:	f1 e0       	ldi	r31, 0x01	; 1
     298:	ff 2e       	mov	r15, r31
     29a:	f0 2d       	mov	r31, r0
     29c:	8c 01       	movw	r16, r24
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	a9 01       	movw	r20, r18
     2a4:	60 e0       	ldi	r22, 0x00	; 0
     2a6:	70 e0       	ldi	r23, 0x00	; 0
     2a8:	cb 01       	movw	r24, r22
     2aa:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	return 0;
}
     2ae:	80 e0       	ldi	r24, 0x00	; 0
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	08 95       	ret

000002c0 <signalGreenLight>:

// signalGreenLight tänder ljuset åt rätt riktning.
int signalGreenLight(Controller *self, int arg) {
     2c0:	cf 92       	push	r12
     2c2:	df 92       	push	r13
     2c4:	ef 92       	push	r14
     2c6:	ff 92       	push	r15
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	ec 01       	movw	r28, r24
	int bits = self->lastBridgeDir ? NORTH_GREEN : SOUTH_GREEN;
     2d2:	88 8d       	ldd	r24, Y+24	; 0x18
     2d4:	88 23       	and	r24, r24
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <signalGreenLight+0x20>
     2d8:	cc 24       	eor	r12, r12
     2da:	c3 94       	inc	r12
     2dc:	d1 2c       	mov	r13, r1
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <signalGreenLight+0x28>
     2e0:	68 94       	set
     2e2:	cc 24       	eor	r12, r12
     2e4:	c2 f8       	bld	r12, 2
     2e6:	d1 2c       	mov	r13, r1
	ASYNC(self->serialCom, USARTtransmit, bits); // Skicka signal för rätt ljus.
     2e8:	0c 81       	ldd	r16, Y+4	; 0x04
     2ea:	1d 81       	ldd	r17, Y+5	; 0x05
     2ec:	0f 2e       	mov	r0, r31
     2ee:	fd e8       	ldi	r31, 0x8D	; 141
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f4 e0       	ldi	r31, 0x04	; 4
     2f4:	ff 2e       	mov	r15, r31
     2f6:	f0 2d       	mov	r31, r0
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	cb 01       	movw	r24, r22
     304:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>

	// Vänta en kort stund innan bilen får köra in.
	AFTER(MSEC(GREEN_LIGHT_TIME_MSEC), self, monitorCarEntry, 0);
     308:	c1 2c       	mov	r12, r1
     30a:	d1 2c       	mov	r13, r1
     30c:	0f 2e       	mov	r0, r31
     30e:	fa ed       	ldi	r31, 0xDA	; 218
     310:	ef 2e       	mov	r14, r31
     312:	f1 e0       	ldi	r31, 0x01	; 1
     314:	ff 2e       	mov	r15, r31
     316:	f0 2d       	mov	r31, r0
     318:	8e 01       	movw	r16, r28
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	69 e0       	ldi	r22, 0x09	; 9
     322:	7d e3       	ldi	r23, 0x3D	; 61
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	return 0;
}
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	df 90       	pop	r13
     33e:	cf 90       	pop	r12
     340:	08 95       	ret

00000342 <waitForBridgeClearance>:
	}
	return 0;
}

// Väntar tills bron är tom innan en ny bil kan skickas.
int waitForBridgeClearance(Controller *self, int arg) {
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	8c 01       	movw	r16, r24
	if (self->BridgeAmount == 0) { // Om bron är tom, gå till idle.
     350:	fc 01       	movw	r30, r24
     352:	80 89       	ldd	r24, Z+16	; 0x10
     354:	91 89       	ldd	r25, Z+17	; 0x11
     356:	a2 89       	ldd	r26, Z+18	; 0x12
     358:	b3 89       	ldd	r27, Z+19	; 0x13
     35a:	89 2b       	or	r24, r25
     35c:	8a 2b       	or	r24, r26
     35e:	8b 2b       	or	r24, r27
     360:	89 f4       	brne	.+34     	; 0x384 <waitForBridgeClearance+0x42>
		ASYNC(self, idleState, 0);
     362:	c1 2c       	mov	r12, r1
     364:	d1 2c       	mov	r13, r1
     366:	0f 2e       	mov	r0, r31
     368:	f2 ea       	ldi	r31, 0xA2	; 162
     36a:	ef 2e       	mov	r14, r31
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	ff 2e       	mov	r15, r31
     370:	f0 2d       	mov	r31, r0
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	a9 01       	movw	r20, r18
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	cb 01       	movw	r24, r22
     37e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <waitForBridgeClearance+0x60>
		} else {
		AFTER(CURRENT_OFFSET(), self, waitForBridgeClearance, 0); // Kontrollera igen senare.
     384:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <CURRENT_OFFSET>
     388:	c1 2c       	mov	r12, r1
     38a:	d1 2c       	mov	r13, r1
     38c:	0f 2e       	mov	r0, r31
     38e:	f1 ea       	ldi	r31, 0xA1	; 161
     390:	ef 2e       	mov	r14, r31
     392:	f1 e0       	ldi	r31, 0x01	; 1
     394:	ff 2e       	mov	r15, r31
     396:	f0 2d       	mov	r31, r0
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	return 0;
}
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	cf 90       	pop	r12
     3b2:	08 95       	ret

000003b4 <monitorCarEntry>:
	AFTER(MSEC(GREEN_LIGHT_TIME_MSEC), self, monitorCarEntry, 0);
	return 0;
}

// monitorCarEntry ser till att en bil kör in på bron efter att ha fått grönt.
int monitorCarEntry(Controller *self, int arg) {
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
	if (self->BridgeAmount > 0) { // Om en bil har kört in på bron.
     3c6:	88 89       	ldd	r24, Y+16	; 0x10
     3c8:	99 89       	ldd	r25, Y+17	; 0x11
     3ca:	aa 89       	ldd	r26, Y+18	; 0x12
     3cc:	bb 89       	ldd	r27, Y+19	; 0x13
     3ce:	89 2b       	or	r24, r25
     3d0:	8a 2b       	or	r24, r26
     3d2:	8b 2b       	or	r24, r27
     3d4:	89 f1       	breq	.+98     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
		int bits = self->lastBridgeDir ? NORTH_RED : SOUTH_RED;
     3d6:	88 8d       	ldd	r24, Y+24	; 0x18
     3d8:	88 23       	and	r24, r24
     3da:	29 f0       	breq	.+10     	; 0x3e6 <monitorCarEntry+0x32>
     3dc:	68 94       	set
     3de:	cc 24       	eor	r12, r12
     3e0:	c1 f8       	bld	r12, 1
     3e2:	d1 2c       	mov	r13, r1
     3e4:	04 c0       	rjmp	.+8      	; 0x3ee <monitorCarEntry+0x3a>
     3e6:	68 94       	set
     3e8:	cc 24       	eor	r12, r12
     3ea:	c3 f8       	bld	r12, 3
     3ec:	d1 2c       	mov	r13, r1
		ASYNC(self->serialCom, USARTtransmit, bits); // Tänd rött ljus för att stoppa nästa bil.
     3ee:	0c 81       	ldd	r16, Y+4	; 0x04
     3f0:	1d 81       	ldd	r17, Y+5	; 0x05
     3f2:	0f 2e       	mov	r0, r31
     3f4:	fd e8       	ldi	r31, 0x8D	; 141
     3f6:	ef 2e       	mov	r14, r31
     3f8:	f4 e0       	ldi	r31, 0x04	; 4
     3fa:	ff 2e       	mov	r15, r31
     3fc:	f0 2d       	mov	r31, r0
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	70 e0       	ldi	r23, 0x00	; 0
     408:	cb 01       	movw	r24, r22
     40a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
		AFTER(CURRENT_OFFSET() + SEC(TIME_QUEUE), self, dispatchNextCar, 0); // Vänta innan nästa bil skickas.
     40e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <CURRENT_OFFSET>
     412:	6e 5e       	subi	r22, 0xEE	; 238
     414:	75 48       	sbci	r23, 0x85	; 133
     416:	8f 4f       	sbci	r24, 0xFF	; 255
     418:	9f 4f       	sbci	r25, 0xFF	; 255
     41a:	c1 2c       	mov	r12, r1
     41c:	d1 2c       	mov	r13, r1
     41e:	0f 2e       	mov	r0, r31
     420:	fc e0       	ldi	r31, 0x0C	; 12
     422:	ef 2e       	mov	r14, r31
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	ff 2e       	mov	r15, r31
     428:	f0 2d       	mov	r31, r0
     42a:	8e 01       	movw	r16, r28
     42c:	20 e0       	ldi	r18, 0x00	; 0
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	a9 01       	movw	r20, r18
     432:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
     436:	10 c0       	rjmp	.+32     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
		} else {
		AFTER(CURRENT_OFFSET(), self, monitorCarEntry, 0); // Kontrollera igen om ingen bil har kört in.
     438:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <CURRENT_OFFSET>
     43c:	c1 2c       	mov	r12, r1
     43e:	d1 2c       	mov	r13, r1
     440:	0f 2e       	mov	r0, r31
     442:	fa ed       	ldi	r31, 0xDA	; 218
     444:	ef 2e       	mov	r14, r31
     446:	f1 e0       	ldi	r31, 0x01	; 1
     448:	ff 2e       	mov	r15, r31
     44a:	f0 2d       	mov	r31, r0
     44c:	8e 01       	movw	r16, r28
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	return 0;
}
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	08 95       	ret

0000046e <bitParser>:
#include "Controller.h"

// Bitparser tolkar data från USART och uppdaterar queue och bron.
int bitParser(Controller *self, int arg) {
     46e:	bf 92       	push	r11
     470:	cf 92       	push	r12
     472:	df 92       	push	r13
     474:	ef 92       	push	r14
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	int sensor = SYNC(self->serialCom, USARTreceive, 0); // Hämtar datan från USART:en.
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	66 e9       	ldi	r22, 0x96	; 150
     488:	74 e0       	ldi	r23, 0x04	; 4
     48a:	8c 81       	ldd	r24, Y+4	; 0x04
     48c:	9d 81       	ldd	r25, Y+5	; 0x05
     48e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sync>
     492:	b8 2e       	mov	r11, r24
	// Om en bil kommer från NORTH, öka NORTH.
	if (sensor & NORTH_ARRIVAL) {
     494:	80 ff       	sbrs	r24, 0
     496:	1d c0       	rjmp	.+58     	; 0x4d2 <bitParser+0x64>
		self->NorthQueue++;
     498:	88 85       	ldd	r24, Y+8	; 0x08
     49a:	99 85       	ldd	r25, Y+9	; 0x09
     49c:	aa 85       	ldd	r26, Y+10	; 0x0a
     49e:	bb 85       	ldd	r27, Y+11	; 0x0b
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	88 87       	std	Y+8, r24	; 0x08
     4a8:	99 87       	std	Y+9, r25	; 0x09
     4aa:	aa 87       	std	Y+10, r26	; 0x0a
     4ac:	bb 87       	std	Y+11, r27	; 0x0b
		ASYNC(self->gui, updateDisplay, 0);
     4ae:	0e 81       	ldd	r16, Y+6	; 0x06
     4b0:	1f 81       	ldd	r17, Y+7	; 0x07
     4b2:	c1 2c       	mov	r12, r1
     4b4:	d1 2c       	mov	r13, r1
     4b6:	0f 2e       	mov	r0, r31
     4b8:	fe ed       	ldi	r31, 0xDE	; 222
     4ba:	ef 2e       	mov	r14, r31
     4bc:	f3 e0       	ldi	r31, 0x03	; 3
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	a9 01       	movw	r20, r18
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	cb 01       	movw	r24, r22
     4ce:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	// Om en bil kommer från SOUTH, öka SOUTH.
	if (sensor & SOUTH_ARRIVAL) {
     4d2:	b2 fe       	sbrs	r11, 2
     4d4:	1d c0       	rjmp	.+58     	; 0x510 <__stack+0x11>
		self->SouthQueue++;
     4d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     4d8:	9d 85       	ldd	r25, Y+13	; 0x0d
     4da:	ae 85       	ldd	r26, Y+14	; 0x0e
     4dc:	bf 85       	ldd	r27, Y+15	; 0x0f
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	a1 1d       	adc	r26, r1
     4e2:	b1 1d       	adc	r27, r1
     4e4:	8c 87       	std	Y+12, r24	; 0x0c
     4e6:	9d 87       	std	Y+13, r25	; 0x0d
     4e8:	ae 87       	std	Y+14, r26	; 0x0e
     4ea:	bf 87       	std	Y+15, r27	; 0x0f
		ASYNC(self->gui, updateDisplay, 0);
     4ec:	0e 81       	ldd	r16, Y+6	; 0x06
     4ee:	1f 81       	ldd	r17, Y+7	; 0x07
     4f0:	c1 2c       	mov	r12, r1
     4f2:	d1 2c       	mov	r13, r1
     4f4:	0f 2e       	mov	r0, r31
     4f6:	fe ed       	ldi	r31, 0xDE	; 222
     4f8:	ef 2e       	mov	r14, r31
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	ff 2e       	mov	r15, r31
     4fe:	f0 2d       	mov	r31, r0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	cb 01       	movw	r24, r22
     50c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	// Om en bil kör in på bron från NORTH.
	if (sensor & NORTH_ENTRY) {
     510:	b1 fe       	sbrs	r11, 1
     512:	43 c0       	rjmp	.+134    	; 0x59a <__stack+0x9b>
		self->NorthQueue--;          // Minska NorthQueue.
     514:	88 85       	ldd	r24, Y+8	; 0x08
     516:	99 85       	ldd	r25, Y+9	; 0x09
     518:	aa 85       	ldd	r26, Y+10	; 0x0a
     51a:	bb 85       	ldd	r27, Y+11	; 0x0b
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	a1 09       	sbc	r26, r1
     520:	b1 09       	sbc	r27, r1
     522:	88 87       	std	Y+8, r24	; 0x08
     524:	99 87       	std	Y+9, r25	; 0x09
     526:	aa 87       	std	Y+10, r26	; 0x0a
     528:	bb 87       	std	Y+11, r27	; 0x0b
		self->BridgeAmount++;        // Öka bilar på bron.
     52a:	88 89       	ldd	r24, Y+16	; 0x10
     52c:	99 89       	ldd	r25, Y+17	; 0x11
     52e:	aa 89       	ldd	r26, Y+18	; 0x12
     530:	bb 89       	ldd	r27, Y+19	; 0x13
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	a1 1d       	adc	r26, r1
     536:	b1 1d       	adc	r27, r1
     538:	88 8b       	std	Y+16, r24	; 0x10
     53a:	99 8b       	std	Y+17, r25	; 0x11
     53c:	aa 8b       	std	Y+18, r26	; 0x12
     53e:	bb 8b       	std	Y+19, r27	; 0x13
		self->BridgePassedSameDir++; // Öka hur många bilar som har åkt i samma riktning.
     540:	8c 89       	ldd	r24, Y+20	; 0x14
     542:	9d 89       	ldd	r25, Y+21	; 0x15
     544:	ae 89       	ldd	r26, Y+22	; 0x16
     546:	bf 89       	ldd	r27, Y+23	; 0x17
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	a1 1d       	adc	r26, r1
     54c:	b1 1d       	adc	r27, r1
     54e:	8c 8b       	std	Y+20, r24	; 0x14
     550:	9d 8b       	std	Y+21, r25	; 0x15
     552:	ae 8b       	std	Y+22, r26	; 0x16
     554:	bf 8b       	std	Y+23, r27	; 0x17
		ASYNC(self->gui, updateDisplay, 0);
     556:	0e 81       	ldd	r16, Y+6	; 0x06
     558:	1f 81       	ldd	r17, Y+7	; 0x07
     55a:	c1 2c       	mov	r12, r1
     55c:	d1 2c       	mov	r13, r1
     55e:	0f 2e       	mov	r0, r31
     560:	fe ed       	ldi	r31, 0xDE	; 222
     562:	ef 2e       	mov	r14, r31
     564:	f3 e0       	ldi	r31, 0x03	; 3
     566:	ff 2e       	mov	r15, r31
     568:	f0 2d       	mov	r31, r0
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	a9 01       	movw	r20, r18
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	cb 01       	movw	r24, r22
     576:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
		AFTER(SEC(BRIDGE_TIME), self, removeFromBridge, 0); // Minska antal bilar på bron när den kört över. (Tidsbaserat).
     57a:	0f 2e       	mov	r0, r31
     57c:	f5 e7       	ldi	r31, 0x75	; 117
     57e:	ef 2e       	mov	r14, r31
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	ff 2e       	mov	r15, r31
     584:	f0 2d       	mov	r31, r0
     586:	8e 01       	movw	r16, r28
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	a9 01       	movw	r20, r18
     58e:	6a e5       	ldi	r22, 0x5A	; 90
     590:	72 e6       	ldi	r23, 0x62	; 98
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}
	// Om en bil kör in på bron från SOUTH.
	if (sensor & SOUTH_ENTRY) {
     59a:	b3 fe       	sbrs	r11, 3
     59c:	43 c0       	rjmp	.+134    	; 0x624 <__stack+0x125>
		self->SouthQueue--;          // Minska SouthQueue
     59e:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a0:	9d 85       	ldd	r25, Y+13	; 0x0d
     5a2:	ae 85       	ldd	r26, Y+14	; 0x0e
     5a4:	bf 85       	ldd	r27, Y+15	; 0x0f
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	a1 09       	sbc	r26, r1
     5aa:	b1 09       	sbc	r27, r1
     5ac:	8c 87       	std	Y+12, r24	; 0x0c
     5ae:	9d 87       	std	Y+13, r25	; 0x0d
     5b0:	ae 87       	std	Y+14, r26	; 0x0e
     5b2:	bf 87       	std	Y+15, r27	; 0x0f
		self->BridgeAmount++;        // Öka bilar på bron.
     5b4:	88 89       	ldd	r24, Y+16	; 0x10
     5b6:	99 89       	ldd	r25, Y+17	; 0x11
     5b8:	aa 89       	ldd	r26, Y+18	; 0x12
     5ba:	bb 89       	ldd	r27, Y+19	; 0x13
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	a1 1d       	adc	r26, r1
     5c0:	b1 1d       	adc	r27, r1
     5c2:	88 8b       	std	Y+16, r24	; 0x10
     5c4:	99 8b       	std	Y+17, r25	; 0x11
     5c6:	aa 8b       	std	Y+18, r26	; 0x12
     5c8:	bb 8b       	std	Y+19, r27	; 0x13
		self->BridgePassedSameDir++; // Öka hur många bilar som har åkt i samma riktning.
     5ca:	8c 89       	ldd	r24, Y+20	; 0x14
     5cc:	9d 89       	ldd	r25, Y+21	; 0x15
     5ce:	ae 89       	ldd	r26, Y+22	; 0x16
     5d0:	bf 89       	ldd	r27, Y+23	; 0x17
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	8c 8b       	std	Y+20, r24	; 0x14
     5da:	9d 8b       	std	Y+21, r25	; 0x15
     5dc:	ae 8b       	std	Y+22, r26	; 0x16
     5de:	bf 8b       	std	Y+23, r27	; 0x17
		ASYNC(self->gui, updateDisplay, 0);
     5e0:	0e 81       	ldd	r16, Y+6	; 0x06
     5e2:	1f 81       	ldd	r17, Y+7	; 0x07
     5e4:	c1 2c       	mov	r12, r1
     5e6:	d1 2c       	mov	r13, r1
     5e8:	0f 2e       	mov	r0, r31
     5ea:	fe ed       	ldi	r31, 0xDE	; 222
     5ec:	ef 2e       	mov	r14, r31
     5ee:	f3 e0       	ldi	r31, 0x03	; 3
     5f0:	ff 2e       	mov	r15, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a9 01       	movw	r20, r18
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	cb 01       	movw	r24, r22
     600:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
		AFTER(SEC(BRIDGE_TIME), self, removeFromBridge, 0); // Minska antal bilar på bron när den kört över. (Tidsbaserat).
     604:	0f 2e       	mov	r0, r31
     606:	f5 e7       	ldi	r31, 0x75	; 117
     608:	ef 2e       	mov	r14, r31
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	ff 2e       	mov	r15, r31
     60e:	f0 2d       	mov	r31, r0
     610:	8e 01       	movw	r16, r28
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	a9 01       	movw	r20, r18
     618:	6a e5       	ldi	r22, 0x5A	; 90
     61a:	72 e6       	ldi	r23, 0x62	; 98
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	}

	return 0;
}
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	08 95       	ret

0000063c <getNorthQueue>:
		AFTER(CURRENT_OFFSET(), self, monitorCarEntry, 0); // Kontrollera igen om ingen bil har kört in.
	}
	return 0;
}

int getNorthQueue(Controller *self, int arg) { return self->NorthQueue; }
     63c:	fc 01       	movw	r30, r24
     63e:	80 85       	ldd	r24, Z+8	; 0x08
     640:	91 85       	ldd	r25, Z+9	; 0x09
     642:	08 95       	ret

00000644 <getSouthQueue>:

int getSouthQueue(Controller *self, int arg) { return self->SouthQueue; }
     644:	fc 01       	movw	r30, r24
     646:	84 85       	ldd	r24, Z+12	; 0x0c
     648:	95 85       	ldd	r25, Z+13	; 0x0d
     64a:	08 95       	ret

0000064c <getBridgeAmount>:

     64c:	fc 01       	movw	r30, r24
     64e:	80 89       	ldd	r24, Z+16	; 0x10
     650:	91 89       	ldd	r25, Z+17	; 0x11
     652:	08 95       	ret

00000654 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     654:	80 ec       	ldi	r24, 0xC0	; 192
     656:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     65a:	87 eb       	ldi	r24, 0xB7	; 183
     65c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0
	// = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     660:	8f e0       	ldi	r24, 0x0F	; 15
     662:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     666:	08 95       	ret

00000668 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5)
     668:	66 30       	cpi	r22, 0x06	; 6
     66a:	71 05       	cpc	r23, r1
     66c:	08 f0       	brcs	.+2      	; 0x670 <writeChar+0x8>
     66e:	6b c0       	rjmp	.+214    	; 0x746 <writeChar+0xde>
	return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     670:	90 ed       	ldi	r25, 0xD0	; 208
     672:	98 0f       	add	r25, r24
     674:	9a 30       	cpi	r25, 0x0A	; 10
     676:	50 f4       	brcc	.+20     	; 0x68c <writeChar+0x24>
		segments =
		font[ch -
     678:	e8 2f       	mov	r30, r24
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	f0 97       	sbiw	r30, 0x30	; 48
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5)
	return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments =
     67e:	ee 0f       	add	r30, r30
     680:	ff 1f       	adc	r31, r31
     682:	e8 5f       	subi	r30, 0xF8	; 248
     684:	fe 4f       	sbci	r31, 0xFE	; 254
     686:	80 81       	ld	r24, Z
     688:	91 81       	ldd	r25, Z+1	; 0x01
     68a:	02 c0       	rjmp	.+4      	; 0x690 <writeChar+0x28>

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5)
	return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
		'0']; // Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base =
	(uint8_t *)&LCDDR0 +
	pos / 2; // Beräkna basregistret för positionen. Displayen använder
     690:	fb 01       	movw	r30, r22
     692:	77 23       	and	r23, r23
     694:	0c f4       	brge	.+2      	; 0x698 <writeChar+0x30>
     696:	31 96       	adiw	r30, 0x01	; 1
     698:	f5 95       	asr	r31
     69a:	e7 95       	ror	r30
		segments =
		font[ch -
		'0']; // Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base =
     69c:	e4 51       	subi	r30, 0x14	; 20
     69e:	ff 4f       	sbci	r31, 0xFF	; 255
	// av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos =
	// 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars
	// kan testa utan det fungerar säkert. Beräkna offset alltså low
	// eller high nibble för registret om den är jämn eller ojämn.
	// pos = 0,2,4 blir till 0 offset.
	int offset = (pos % 2) * 4;
     6a0:	61 70       	andi	r22, 0x01	; 1
     6a2:	70 78       	andi	r23, 0x80	; 128
     6a4:	77 23       	and	r23, r23
     6a6:	34 f4       	brge	.+12     	; 0x6b4 <writeChar+0x4c>
     6a8:	61 50       	subi	r22, 0x01	; 1
     6aa:	71 09       	sbc	r23, r1
     6ac:	6e 6f       	ori	r22, 0xFE	; 254
     6ae:	7f 6f       	ori	r23, 0xFF	; 255
     6b0:	6f 5f       	subi	r22, 0xFF	; 255
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	66 0f       	add	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	66 0f       	add	r22, r22
     6ba:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) |
     6bc:	30 81       	ld	r19, Z
     6be:	4f e0       	ldi	r20, 0x0F	; 15
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	06 2e       	mov	r0, r22
     6c4:	02 c0       	rjmp	.+4      	; 0x6ca <writeChar+0x62>
     6c6:	44 0f       	add	r20, r20
     6c8:	55 1f       	adc	r21, r21
     6ca:	0a 94       	dec	r0
     6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <writeChar+0x5e>
     6ce:	24 2f       	mov	r18, r20
     6d0:	20 95       	com	r18
	((segments & 0xF) << offset); // Uppdatera nibble i första registret
     6d2:	ac 01       	movw	r20, r24
     6d4:	4f 70       	andi	r20, 0x0F	; 15
     6d6:	55 27       	eor	r21, r21
     6d8:	06 2e       	mov	r0, r22
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <writeChar+0x78>
     6dc:	44 0f       	add	r20, r20
     6de:	55 1f       	adc	r21, r21
     6e0:	0a 94       	dec	r0
     6e2:	e2 f7       	brpl	.-8      	; 0x6dc <writeChar+0x74>
	// kan testa utan det fungerar säkert. Beräkna offset alltså low
	// eller high nibble för registret om den är jämn eller ojämn.
	// pos = 0,2,4 blir till 0 offset.
	int offset = (pos % 2) * 4;

	base[0] = (base[0] & ~(0xF << offset)) |
     6e4:	32 23       	and	r19, r18
     6e6:	43 2b       	or	r20, r19
     6e8:	40 83       	st	Z, r20
	((segments & 0xF) << offset); // Uppdatera nibble i första registret
	base[5] = (base[5] & ~(0xF << offset)) |
     6ea:	35 81       	ldd	r19, Z+5	; 0x05
	(((segments >> 4) & 0xF)
     6ec:	ac 01       	movw	r20, r24
     6ee:	52 95       	swap	r21
     6f0:	42 95       	swap	r20
     6f2:	4f 70       	andi	r20, 0x0F	; 15
     6f4:	45 27       	eor	r20, r21
     6f6:	5f 70       	andi	r21, 0x0F	; 15
     6f8:	45 27       	eor	r20, r21
     6fa:	4f 70       	andi	r20, 0x0F	; 15
     6fc:	55 27       	eor	r21, r21
	<< offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
     6fe:	06 2e       	mov	r0, r22
     700:	02 c0       	rjmp	.+4      	; 0x706 <writeChar+0x9e>
     702:	44 0f       	add	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <writeChar+0x9a>
	// pos = 0,2,4 blir till 0 offset.
	int offset = (pos % 2) * 4;

	base[0] = (base[0] & ~(0xF << offset)) |
	((segments & 0xF) << offset); // Uppdatera nibble i första registret
	base[5] = (base[5] & ~(0xF << offset)) |
     70a:	32 23       	and	r19, r18
     70c:	43 2b       	or	r20, r19
     70e:	45 83       	std	Z+5, r20	; 0x05
	(((segments >> 4) & 0xF)
	<< offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
	// pointer offset med base[5].
	base[10] =
	(base[10] & ~(0xF << offset)) |
     710:	32 85       	ldd	r19, Z+10	; 0x0a
	(((segments >> 8) & 0xF)
     712:	49 2f       	mov	r20, r25
     714:	55 27       	eor	r21, r21
     716:	4f 70       	andi	r20, 0x0F	; 15
     718:	55 27       	eor	r21, r21
	<< offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
     71a:	06 2e       	mov	r0, r22
     71c:	02 c0       	rjmp	.+4      	; 0x722 <writeChar+0xba>
     71e:	44 0f       	add	r20, r20
     720:	55 1f       	adc	r21, r21
     722:	0a 94       	dec	r0
     724:	e2 f7       	brpl	.-8      	; 0x71e <writeChar+0xb6>
	((segments & 0xF) << offset); // Uppdatera nibble i första registret
	base[5] = (base[5] & ~(0xF << offset)) |
	(((segments >> 4) & 0xF)
	<< offset); // Uppdatera nibble i LCDDRx+5 registret, alltså
	// pointer offset med base[5].
	base[10] =
     726:	32 23       	and	r19, r18
     728:	43 2b       	or	r20, r19
     72a:	42 87       	std	Z+10, r20	; 0x0a
	(base[10] & ~(0xF << offset)) |
	(((segments >> 8) & 0xF)
	<< offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
	// sedan 00001111, och bitwise AND vilket gör de 4 bits som
	// har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) |
     72c:	37 85       	ldd	r19, Z+15	; 0x0f
	(((segments >> 12) & 0xF)
     72e:	89 2f       	mov	r24, r25
     730:	99 27       	eor	r25, r25
     732:	82 95       	swap	r24
     734:	8f 70       	andi	r24, 0x0F	; 15
	<< offset); // Sedan segments & 0xF blir 000000000000xxxx, AND med
     736:	02 c0       	rjmp	.+4      	; 0x73c <writeChar+0xd4>
     738:	88 0f       	add	r24, r24
     73a:	99 1f       	adc	r25, r25
     73c:	6a 95       	dec	r22
     73e:	e2 f7       	brpl	.-8      	; 0x738 <writeChar+0xd0>
	(base[10] & ~(0xF << offset)) |
	(((segments >> 8) & 0xF)
	<< offset); // Om offset 4 till exempel. 00001111 blir till 11110000,
	// sedan 00001111, och bitwise AND vilket gör de 4 bits som
	// har bestämts med offset till 0000.
	base[15] = (base[15] & ~(0xF << offset)) |
     740:	23 23       	and	r18, r19
     742:	82 2b       	or	r24, r18
     744:	87 87       	std	Z+15, r24	; 0x0f
     746:	08 95       	ret

00000748 <printAt>:
	// vänster om det behövs. Sedan | OR för att kombinera
	// med hälften tom och hälften redan fylld. Alltså
	// 0000xxxx om ingen offset, eller xxxx0000 om offset.
}

void printAt(long num, int pos) {
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
     760:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar((num % 100) / 10 + '0', pp);
     762:	24 e6       	ldi	r18, 0x64	; 100
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__divmodsi4>
     76e:	0f 2e       	mov	r0, r31
     770:	fa e0       	ldi	r31, 0x0A	; 10
     772:	cf 2e       	mov	r12, r31
     774:	d1 2c       	mov	r13, r1
     776:	e1 2c       	mov	r14, r1
     778:	f1 2c       	mov	r15, r1
     77a:	f0 2d       	mov	r31, r0
     77c:	a7 01       	movw	r20, r14
     77e:	96 01       	movw	r18, r12
     780:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__divmodsi4>
     784:	be 01       	movw	r22, r28
     786:	80 e3       	ldi	r24, 0x30	; 48
     788:	82 0f       	add	r24, r18
     78a:	0e 94 34 03 	call	0x668	; 0x668 <writeChar>
	pp++;
     78e:	21 96       	adiw	r28, 0x01	; 1
	writeChar(num % 10 + '0', pp);
     790:	c5 01       	movw	r24, r10
     792:	b4 01       	movw	r22, r8
     794:	a7 01       	movw	r20, r14
     796:	96 01       	movw	r18, r12
     798:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__divmodsi4>
     79c:	86 2f       	mov	r24, r22
     79e:	be 01       	movw	r22, r28
     7a0:	80 5d       	subi	r24, 0xD0	; 208
     7a2:	0e 94 34 03 	call	0x668	; 0x668 <writeChar>
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	08 95       	ret

000007bc <updateDisplay>:

// updateDisplay() Hämtar värden för NorthQueue, BridgeAmount, SouthQueue och
// skriver på LCD
int updateDisplay(GUI *self, int arg) {
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	ec 01       	movw	r28, r24
	printAt(SYNC(self->controller, getNorthQueue, 0), 0);
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	6e e1       	ldi	r22, 0x1E	; 30
     7c8:	73 e0       	ldi	r23, 0x03	; 3
     7ca:	8c 81       	ldd	r24, Y+4	; 0x04
     7cc:	9d 81       	ldd	r25, Y+5	; 0x05
     7ce:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sync>
     7d2:	bc 01       	movw	r22, r24
     7d4:	99 0f       	add	r25, r25
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e0       	ldi	r21, 0x00	; 0
     7de:	0e 94 a4 03 	call	0x748	; 0x748 <printAt>
	printAt(SYNC(self->controller, getBridgeAmount, 0), 2);
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	66 e2       	ldi	r22, 0x26	; 38
     7e8:	73 e0       	ldi	r23, 0x03	; 3
     7ea:	8c 81       	ldd	r24, Y+4	; 0x04
     7ec:	9d 81       	ldd	r25, Y+5	; 0x05
     7ee:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sync>
     7f2:	bc 01       	movw	r22, r24
     7f4:	99 0f       	add	r25, r25
     7f6:	88 0b       	sbc	r24, r24
     7f8:	99 0b       	sbc	r25, r25
     7fa:	42 e0       	ldi	r20, 0x02	; 2
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	0e 94 a4 03 	call	0x748	; 0x748 <printAt>
	printAt(SYNC(self->controller, getSouthQueue, 0), 4);
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	50 e0       	ldi	r21, 0x00	; 0
     806:	62 e2       	ldi	r22, 0x22	; 34
     808:	73 e0       	ldi	r23, 0x03	; 3
     80a:	8c 81       	ldd	r24, Y+4	; 0x04
     80c:	9d 81       	ldd	r25, Y+5	; 0x05
     80e:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sync>
     812:	bc 01       	movw	r22, r24
     814:	99 0f       	add	r25, r25
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	44 e0       	ldi	r20, 0x04	; 4
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	0e 94 a4 03 	call	0x748	; 0x748 <printAt>
	return 0;
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <startProgram>:
#include "serialCom.h"
#include <avr/io.h>



int startProgram(GUI *self, int arg) {
     82c:	cf 92       	push	r12
     82e:	df 92       	push	r13
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	ec 01       	movw	r28, r24
	ASYNC(self, updateDisplay, 0);
     83e:	c1 2c       	mov	r12, r1
     840:	d1 2c       	mov	r13, r1
     842:	0f 2e       	mov	r0, r31
     844:	fe ed       	ldi	r31, 0xDE	; 222
     846:	ef 2e       	mov	r14, r31
     848:	f3 e0       	ldi	r31, 0x03	; 3
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	8c 01       	movw	r16, r24
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	a9 01       	movw	r20, r18
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	cb 01       	movw	r24, r22
     85c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	ASYNC(self->controller, idleState, 0);
     860:	0c 81       	ldd	r16, Y+4	; 0x04
     862:	1d 81       	ldd	r17, Y+5	; 0x05
     864:	0f 2e       	mov	r0, r31
     866:	f2 ea       	ldi	r31, 0xA2	; 162
     868:	ef 2e       	mov	r14, r31
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	ff 2e       	mov	r15, r31
     86e:	f0 2d       	mov	r31, r0
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	a9 01       	movw	r20, r18
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	cb 01       	movw	r24, r22
     87c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
	return 0;
}
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	1f 91       	pop	r17
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	08 95       	ret

00000896 <main>:

int main() {
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
     8a2:	a3 97       	sbiw	r28, 0x23	; 35
     8a4:	0f b6       	in	r0, 0x3f	; 63
     8a6:	f8 94       	cli
     8a8:	de bf       	out	0x3e, r29	; 62
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	cd bf       	out	0x3d, r28	; 61
	avr_init();
     8ae:	0e 94 4d 00 	call	0x9a	; 0x9a <avr_init>
	lcd_init();
     8b2:	0e 94 2a 03 	call	0x654	; 0x654 <lcd_init>

// Initializa serialCom.
SerialCom serial = initSerialCom();
     8b6:	1a 82       	std	Y+2, r1	; 0x02
     8b8:	19 82       	std	Y+1, r1	; 0x01
     8ba:	1c 82       	std	Y+4, r1	; 0x04
     8bc:	1b 82       	std	Y+3, r1	; 0x03

// Initializa controller, med 0 för GUI
Controller controller = initController(&serial, 0);
     8be:	ce 01       	movw	r24, r28
     8c0:	05 96       	adiw	r24, 0x05	; 5
     8c2:	29 e1       	ldi	r18, 0x19	; 25
     8c4:	fc 01       	movw	r30, r24
     8c6:	11 92       	st	Z+, r1
     8c8:	2a 95       	dec	r18
     8ca:	e9 f7       	brne	.-6      	; 0x8c6 <main+0x30>
     8cc:	9e 01       	movw	r18, r28
     8ce:	2f 5f       	subi	r18, 0xFF	; 255
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	3a 87       	std	Y+10, r19	; 0x0a
     8d4:	29 87       	std	Y+9, r18	; 0x09

// Initializa GUI med controller.
GUI gui = initGUI(&controller);
     8d6:	1f 8e       	std	Y+31, r1	; 0x1f
     8d8:	1e 8e       	std	Y+30, r1	; 0x1e
     8da:	19 a2       	std	Y+33, r1	; 0x21
     8dc:	18 a2       	std	Y+32, r1	; 0x20
     8de:	9b a3       	std	Y+35, r25	; 0x23
     8e0:	8a a3       	std	Y+34, r24	; 0x22

// Och nu assigna guit till controller.
controller.gui = &gui;
     8e2:	8e 01       	movw	r16, r28
     8e4:	02 5e       	subi	r16, 0xE2	; 226
     8e6:	1f 4f       	sbci	r17, 0xFF	; 255
     8e8:	1c 87       	std	Y+12, r17	; 0x0c
     8ea:	0b 87       	std	Y+11, r16	; 0x0b

	INSTALL(&controller, bitParser, IRQ_USART0_RX);
     8ec:	48 e0       	ldi	r20, 0x08	; 8
     8ee:	67 e3       	ldi	r22, 0x37	; 55
     8f0:	72 e0       	ldi	r23, 0x02	; 2
     8f2:	0e 94 29 11 	call	0x2252	; 0x2252 <install>

	return TINYTIMBER(&gui, startProgram, 0);
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e0       	ldi	r21, 0x00	; 0
     8fa:	66 e1       	ldi	r22, 0x16	; 22
     8fc:	74 e0       	ldi	r23, 0x04	; 4
     8fe:	c8 01       	movw	r24, r16
     900:	0e 94 44 11 	call	0x2288	; 0x2288 <tinytimber>
}
     904:	a3 96       	adiw	r28, 0x23	; 35
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <USARTtransmit>:
#include "serialCom.h"

int USARTtransmit(SerialCom *self, int arg) {
  // Vänta tills send buffern är tom
  while (!(UCSR0A & (1 << UDRE0))) {
     91a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     91e:	85 ff       	sbrs	r24, 5
     920:	fc cf       	rjmp	.-8      	; 0x91a <USARTtransmit>
  }
  // Skriv byten till UDR0 för sändning
  UDR0 = (uint8_t)arg;
     922:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
  return 0;
}
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	08 95       	ret

0000092c <USARTreceive>:

int USARTreceive(SerialCom *self, int arg) {
  // Vänta tills data finns att läsa
  while (!(UCSR0A & (1 << RXC0))) {
     92c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     930:	88 23       	and	r24, r24
     932:	e4 f7       	brge	.-8      	; 0x92c <USARTreceive>
  }

  int bits = UDR0;
     934:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
  return bits;
}
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	08 95       	ret

0000093c <initialize>:
    t->accum = STATUS() ? current->msg->baseline : timestamp;
}

Time T_SAMPLE(Timer *t) {
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
}
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	00 d0       	rcall	.+0      	; 0x942 <initialize+0x6>
     942:	00 d0       	rcall	.+0      	; 0x944 <initialize+0x8>
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	18 c0       	rjmp	.+48     	; 0x97e <initialize+0x42>
     94e:	ac 01       	movw	r20, r24
     950:	4f 5f       	subi	r20, 0xFF	; 255
     952:	5f 4f       	sbci	r21, 0xFF	; 255
     954:	9a 01       	movw	r18, r20
     956:	22 95       	swap	r18
     958:	32 95       	swap	r19
     95a:	30 7f       	andi	r19, 0xF0	; 240
     95c:	32 27       	eor	r19, r18
     95e:	20 7f       	andi	r18, 0xF0	; 240
     960:	32 27       	eor	r19, r18
     962:	21 50       	subi	r18, 0x01	; 1
     964:	3e 4f       	sbci	r19, 0xFE	; 254
     966:	82 95       	swap	r24
     968:	92 95       	swap	r25
     96a:	90 7f       	andi	r25, 0xF0	; 240
     96c:	98 27       	eor	r25, r24
     96e:	80 7f       	andi	r24, 0xF0	; 240
     970:	98 27       	eor	r25, r24
     972:	fc 01       	movw	r30, r24
     974:	e1 50       	subi	r30, 0x01	; 1
     976:	fe 4f       	sbci	r31, 0xFE	; 254
     978:	31 83       	std	Z+1, r19	; 0x01
     97a:	20 83       	st	Z, r18
     97c:	ca 01       	movw	r24, r20
     97e:	8e 30       	cpi	r24, 0x0E	; 14
     980:	91 05       	cpc	r25, r1
     982:	2c f3       	brlt	.-54     	; 0x94e <initialize+0x12>
     984:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     988:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	15 c0       	rjmp	.+42     	; 0x9bc <initialize+0x80>
     992:	ac 01       	movw	r20, r24
     994:	4f 5f       	subi	r20, 0xFF	; 255
     996:	5f 4f       	sbci	r21, 0xFF	; 255
     998:	6d e1       	ldi	r22, 0x1D	; 29
     99a:	64 9f       	mul	r22, r20
     99c:	90 01       	movw	r18, r0
     99e:	65 9f       	mul	r22, r21
     9a0:	30 0d       	add	r19, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	26 5b       	subi	r18, 0xB6	; 182
     9a6:	3e 4f       	sbci	r19, 0xFE	; 254
     9a8:	68 9f       	mul	r22, r24
     9aa:	f0 01       	movw	r30, r0
     9ac:	69 9f       	mul	r22, r25
     9ae:	f0 0d       	add	r31, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	e6 5b       	subi	r30, 0xB6	; 182
     9b4:	fe 4f       	sbci	r31, 0xFE	; 254
     9b6:	31 83       	std	Z+1, r19	; 0x01
     9b8:	20 83       	st	Z, r18
     9ba:	ca 01       	movw	r24, r20
     9bc:	83 30       	cpi	r24, 0x03	; 3
     9be:	91 05       	cpc	r25, r1
     9c0:	44 f3       	brlt	.-48     	; 0x992 <initialize+0x56>
     9c2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <threads+0x58>
     9c6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <threads+0x57>
     9ca:	1a 82       	std	Y+2, r1	; 0x02
     9cc:	19 82       	std	Y+1, r1	; 0x01
     9ce:	32 c0       	rjmp	.+100    	; 0xa34 <initialize+0xf8>
     9d0:	2d e1       	ldi	r18, 0x1D	; 29
     9d2:	49 81       	ldd	r20, Y+1	; 0x01
     9d4:	5a 81       	ldd	r21, Y+2	; 0x02
     9d6:	24 9f       	mul	r18, r20
     9d8:	c0 01       	movw	r24, r0
     9da:	25 9f       	mul	r18, r21
     9dc:	90 0d       	add	r25, r0
     9de:	11 24       	eor	r1, r1
     9e0:	fc 01       	movw	r30, r24
     9e2:	e0 5b       	subi	r30, 0xB0	; 176
     9e4:	fe 4f       	sbci	r31, 0xFE	; 254
     9e6:	fc 83       	std	Y+4, r31	; 0x04
     9e8:	eb 83       	std	Y+3, r30	; 0x03
     9ea:	cf 01       	movw	r24, r30
     9ec:	0e 94 9c 11 	call	0x2338	; 0x2338 <setjmp>
     9f0:	20 e6       	ldi	r18, 0x60	; 96
     9f2:	49 81       	ldd	r20, Y+1	; 0x01
     9f4:	5a 81       	ldd	r21, Y+2	; 0x02
     9f6:	24 9f       	mul	r18, r20
     9f8:	c0 01       	movw	r24, r0
     9fa:	25 9f       	mul	r18, r21
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	85 5b       	subi	r24, 0xB5	; 181
     a02:	9c 4f       	sbci	r25, 0xFC	; 252
     a04:	eb 81       	ldd	r30, Y+3	; 0x03
     a06:	fc 81       	ldd	r31, Y+4	; 0x04
     a08:	91 8b       	std	Z+17, r25	; 0x11
     a0a:	80 8b       	std	Z+16, r24	; 0x10
     a0c:	93 8b       	std	Z+19, r25	; 0x13
     a0e:	82 8b       	std	Z+18, r24	; 0x12
     a10:	8a e7       	ldi	r24, 0x7A	; 122
     a12:	90 e1       	ldi	r25, 0x10	; 16
     a14:	96 8b       	std	Z+22, r25	; 0x16
     a16:	85 8b       	std	Z+21, r24	; 0x15
     a18:	8d e1       	ldi	r24, 0x1D	; 29
     a1a:	84 9f       	mul	r24, r20
     a1c:	f0 01       	movw	r30, r0
     a1e:	85 9f       	mul	r24, r21
     a20:	f0 0d       	add	r31, r0
     a22:	11 24       	eor	r1, r1
     a24:	e6 5b       	subi	r30, 0xB6	; 182
     a26:	fe 4f       	sbci	r31, 0xFE	; 254
     a28:	15 82       	std	Z+5, r1	; 0x05
     a2a:	14 82       	std	Z+4, r1	; 0x04
     a2c:	4f 5f       	subi	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	5a 83       	std	Y+2, r21	; 0x02
     a32:	49 83       	std	Y+1, r20	; 0x01
     a34:	29 81       	ldd	r18, Y+1	; 0x01
     a36:	3a 81       	ldd	r19, Y+2	; 0x02
     a38:	24 30       	cpi	r18, 0x04	; 4
     a3a:	31 05       	cpc	r19, r1
     a3c:	4c f2       	brlt	.-110    	; 0x9d0 <initialize+0x94>
     a3e:	e2 ee       	ldi	r30, 0xE2	; 226
     a40:	f1 e0       	ldi	r31, 0x01	; 1
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	10 82       	st	Z, r1
     a46:	15 82       	std	Z+5, r1	; 0x05
     a48:	14 82       	std	Z+4, r1	; 0x04
     a4a:	13 82       	std	Z+3, r1	; 0x03
     a4c:	12 82       	std	Z+2, r1	; 0x02
     a4e:	e1 e6       	ldi	r30, 0x61	; 97
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 e8       	ldi	r24, 0x80	; 128
     a54:	80 83       	st	Z, r24
     a56:	10 82       	st	Z, r1
     a58:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a5c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     a6c:	0f 90       	pop	r0
     a6e:	0f 90       	pop	r0
     a70:	0f 90       	pop	r0
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	08 95       	ret

00000a7a <dispatch>:
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	00 d0       	rcall	.+0      	; 0xa80 <dispatch+0x6>
     a80:	cd b7       	in	r28, 0x3d	; 61
     a82:	de b7       	in	r29, 0x3e	; 62
     a84:	9a 83       	std	Y+2, r25	; 0x02
     a86:	89 83       	std	Y+1, r24	; 0x01
     a88:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a8c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a90:	06 96       	adiw	r24, 0x06	; 6
     a92:	0e 94 9c 11 	call	0x2338	; 0x2338 <setjmp>
     a96:	89 2b       	or	r24, r25
     a98:	59 f4       	brne	.+22     	; 0xab0 <dispatch+0x36>
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	9a 81       	ldd	r25, Y+2	; 0x02
     a9e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     aa2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	06 96       	adiw	r24, 0x06	; 6
     aac:	0e 94 bc 11 	call	0x2378	; 0x2378 <longjmp>
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <enqueueByDeadline>:
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	eb 01       	movw	r28, r22
     ac8:	e8 81       	ld	r30, Y
     aca:	f9 81       	ldd	r31, Y+1	; 0x01
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	04 c0       	rjmp	.+8      	; 0xada <enqueueByDeadline+0x20>
     ad2:	ef 01       	movw	r28, r30
     ad4:	01 90       	ld	r0, Z+
     ad6:	f0 81       	ld	r31, Z
     ad8:	e0 2d       	mov	r30, r0
     ada:	30 97       	sbiw	r30, 0x00	; 0
     adc:	79 f0       	breq	.+30     	; 0xafc <enqueueByDeadline+0x42>
     ade:	06 81       	ldd	r16, Z+6	; 0x06
     ae0:	17 81       	ldd	r17, Z+7	; 0x07
     ae2:	20 85       	ldd	r18, Z+8	; 0x08
     ae4:	31 85       	ldd	r19, Z+9	; 0x09
     ae6:	16 96       	adiw	r26, 0x06	; 6
     ae8:	4d 91       	ld	r20, X+
     aea:	5d 91       	ld	r21, X+
     aec:	6d 91       	ld	r22, X+
     aee:	7c 91       	ld	r23, X
     af0:	19 97       	sbiw	r26, 0x09	; 9
     af2:	40 17       	cp	r20, r16
     af4:	51 07       	cpc	r21, r17
     af6:	62 07       	cpc	r22, r18
     af8:	73 07       	cpc	r23, r19
     afa:	5c f7       	brge	.-42     	; 0xad2 <enqueueByDeadline+0x18>
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	fc 93       	st	X, r31
     b00:	ee 93       	st	-X, r30
     b02:	20 97       	sbiw	r28, 0x00	; 0
     b04:	21 f4       	brne	.+8      	; 0xb0e <enqueueByDeadline+0x54>
     b06:	fc 01       	movw	r30, r24
     b08:	b1 83       	std	Z+1, r27	; 0x01
     b0a:	a0 83       	st	Z, r26
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <enqueueByDeadline+0x58>
     b0e:	b9 83       	std	Y+1, r27	; 0x01
     b10:	a8 83       	st	Y, r26
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	0f 91       	pop	r16
     b1a:	08 95       	ret

00000b1c <enqueueByBaseline>:
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	eb 01       	movw	r28, r22
     b2a:	e8 81       	ld	r30, Y
     b2c:	f9 81       	ldd	r31, Y+1	; 0x01
     b2e:	c0 e0       	ldi	r28, 0x00	; 0
     b30:	d0 e0       	ldi	r29, 0x00	; 0
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <enqueueByBaseline+0x20>
     b34:	ef 01       	movw	r28, r30
     b36:	01 90       	ld	r0, Z+
     b38:	f0 81       	ld	r31, Z
     b3a:	e0 2d       	mov	r30, r0
     b3c:	30 97       	sbiw	r30, 0x00	; 0
     b3e:	79 f0       	breq	.+30     	; 0xb5e <enqueueByBaseline+0x42>
     b40:	02 81       	ldd	r16, Z+2	; 0x02
     b42:	13 81       	ldd	r17, Z+3	; 0x03
     b44:	24 81       	ldd	r18, Z+4	; 0x04
     b46:	35 81       	ldd	r19, Z+5	; 0x05
     b48:	12 96       	adiw	r26, 0x02	; 2
     b4a:	4d 91       	ld	r20, X+
     b4c:	5d 91       	ld	r21, X+
     b4e:	6d 91       	ld	r22, X+
     b50:	7c 91       	ld	r23, X
     b52:	15 97       	sbiw	r26, 0x05	; 5
     b54:	40 17       	cp	r20, r16
     b56:	51 07       	cpc	r21, r17
     b58:	62 07       	cpc	r22, r18
     b5a:	73 07       	cpc	r23, r19
     b5c:	5c f7       	brge	.-42     	; 0xb34 <enqueueByBaseline+0x18>
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	fc 93       	st	X, r31
     b62:	ee 93       	st	-X, r30
     b64:	20 97       	sbiw	r28, 0x00	; 0
     b66:	21 f4       	brne	.+8      	; 0xb70 <enqueueByBaseline+0x54>
     b68:	fc 01       	movw	r30, r24
     b6a:	b1 83       	std	Z+1, r27	; 0x01
     b6c:	a0 83       	st	Z, r26
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <enqueueByBaseline+0x58>
     b70:	b9 83       	std	Y+1, r27	; 0x01
     b72:	a8 83       	st	Y, r26
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	08 95       	ret

00000b7e <dequeue>:
     b7e:	dc 01       	movw	r26, r24
     b80:	ed 91       	ld	r30, X+
     b82:	fc 91       	ld	r31, X
     b84:	11 97       	sbiw	r26, 0x01	; 1
     b86:	30 97       	sbiw	r30, 0x00	; 0
     b88:	59 f4       	brne	.+22     	; 0xba0 <dequeue+0x22>
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b90:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b94:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	83 bf       	out	0x33, r24	; 51
     b9c:	88 95       	sleep
     b9e:	fc cf       	rjmp	.-8      	; 0xb98 <dequeue+0x1a>
     ba0:	20 81       	ld	r18, Z
     ba2:	31 81       	ldd	r19, Z+1	; 0x01
     ba4:	2d 93       	st	X+, r18
     ba6:	3c 93       	st	X, r19
     ba8:	cf 01       	movw	r24, r30
     baa:	08 95       	ret

00000bac <insert>:
     bac:	fb 01       	movw	r30, r22
     bae:	20 81       	ld	r18, Z
     bb0:	31 81       	ldd	r19, Z+1	; 0x01
     bb2:	fc 01       	movw	r30, r24
     bb4:	31 83       	std	Z+1, r19	; 0x01
     bb6:	20 83       	st	Z, r18
     bb8:	fb 01       	movw	r30, r22
     bba:	91 83       	std	Z+1, r25	; 0x01
     bbc:	80 83       	st	Z, r24
     bbe:	08 95       	ret

00000bc0 <push>:
     bc0:	fb 01       	movw	r30, r22
     bc2:	20 81       	ld	r18, Z
     bc4:	31 81       	ldd	r19, Z+1	; 0x01
     bc6:	fc 01       	movw	r30, r24
     bc8:	31 83       	std	Z+1, r19	; 0x01
     bca:	20 83       	st	Z, r18
     bcc:	fb 01       	movw	r30, r22
     bce:	91 83       	std	Z+1, r25	; 0x01
     bd0:	80 83       	st	Z, r24
     bd2:	08 95       	ret

00000bd4 <pop>:
     bd4:	dc 01       	movw	r26, r24
     bd6:	ed 91       	ld	r30, X+
     bd8:	fc 91       	ld	r31, X
     bda:	11 97       	sbiw	r26, 0x01	; 1
     bdc:	20 81       	ld	r18, Z
     bde:	31 81       	ldd	r19, Z+1	; 0x01
     be0:	2d 93       	st	X+, r18
     be2:	3c 93       	st	X, r19
     be4:	cf 01       	movw	r24, r30
     be6:	08 95       	ret

00000be8 <schedule>:
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     bf0:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     bf4:	c2 81       	ldd	r28, Z+2	; 0x02
     bf6:	d3 81       	ldd	r29, Z+3	; 0x03
     bf8:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     bfc:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	19 f1       	breq	.+70     	; 0xc4a <schedule+0x62>
     c04:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     c08:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     c0c:	89 2b       	or	r24, r25
     c0e:	e9 f0       	breq	.+58     	; 0xc4a <schedule+0x62>
     c10:	20 97       	sbiw	r28, 0x00	; 0
     c12:	69 f0       	breq	.+26     	; 0xc2e <schedule+0x46>
     c14:	86 81       	ldd	r24, Z+6	; 0x06
     c16:	97 81       	ldd	r25, Z+7	; 0x07
     c18:	a0 85       	ldd	r26, Z+8	; 0x08
     c1a:	b1 85       	ldd	r27, Z+9	; 0x09
     c1c:	4e 81       	ldd	r20, Y+6	; 0x06
     c1e:	5f 81       	ldd	r21, Y+7	; 0x07
     c20:	68 85       	ldd	r22, Y+8	; 0x08
     c22:	79 85       	ldd	r23, Y+9	; 0x09
     c24:	84 1b       	sub	r24, r20
     c26:	95 0b       	sbc	r25, r21
     c28:	a6 0b       	sbc	r26, r22
     c2a:	b7 0b       	sbc	r27, r23
     c2c:	72 f4       	brpl	.+28     	; 0xc4a <schedule+0x62>
     c2e:	84 e0       	ldi	r24, 0x04	; 4
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pop>
     c36:	62 e0       	ldi	r22, 0x02	; 2
     c38:	71 e0       	ldi	r23, 0x01	; 1
     c3a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <push>
     c3e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     c42:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     c46:	0e 94 3d 05 	call	0xa7a	; 0xa7a <dispatch>
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <__vector_1>:
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	2f 93       	push	r18
     c60:	3f 93       	push	r19
     c62:	4f 93       	push	r20
     c64:	5f 93       	push	r21
     c66:	6f 93       	push	r22
     c68:	7f 93       	push	r23
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
     c72:	ef 93       	push	r30
     c74:	ff 93       	push	r31
     c76:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     c7a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     c7e:	ac 01       	movw	r20, r24
     c80:	09 2e       	mov	r0, r25
     c82:	00 0c       	add	r0, r0
     c84:	66 0b       	sbc	r22, r22
     c86:	77 0b       	sbc	r23, r23
     c88:	9a 01       	movw	r18, r20
     c8a:	11 27       	eor	r17, r17
     c8c:	00 27       	eor	r16, r16
     c8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	40 2b       	or	r20, r16
     c9c:	51 2b       	or	r21, r17
     c9e:	62 2b       	or	r22, r18
     ca0:	73 2b       	or	r23, r19
     ca2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     ca6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     caa:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     cae:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     cb2:	b0 9b       	sbis	0x16, 0	; 22
     cb4:	1a c0       	rjmp	.+52     	; 0xcea <__vector_1+0x9a>
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	09 2e       	mov	r0, r25
     cba:	00 0c       	add	r0, r0
     cbc:	aa 0b       	sbc	r26, r26
     cbe:	bb 0b       	sbc	r27, r27
     cc0:	bc 01       	movw	r22, r24
     cc2:	55 27       	eor	r21, r21
     cc4:	44 27       	eor	r20, r20
     cc6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	84 2b       	or	r24, r20
     cd4:	95 2b       	or	r25, r21
     cd6:	a6 2b       	or	r26, r22
     cd8:	b7 2b       	or	r27, r23
     cda:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cde:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ce2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ce6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cea:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     cee:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     cf2:	30 97       	sbiw	r30, 0x00	; 0
     cf4:	39 f0       	breq	.+14     	; 0xd04 <__vector_1+0xb4>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     cfe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     d02:	09 95       	icall
     d04:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
     d08:	ff 91       	pop	r31
     d0a:	ef 91       	pop	r30
     d0c:	bf 91       	pop	r27
     d0e:	af 91       	pop	r26
     d10:	9f 91       	pop	r25
     d12:	8f 91       	pop	r24
     d14:	7f 91       	pop	r23
     d16:	6f 91       	pop	r22
     d18:	5f 91       	pop	r21
     d1a:	4f 91       	pop	r20
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <__vector_2>:
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	0f 93       	push	r16
     d3a:	1f 93       	push	r17
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     d58:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     d5c:	ac 01       	movw	r20, r24
     d5e:	09 2e       	mov	r0, r25
     d60:	00 0c       	add	r0, r0
     d62:	66 0b       	sbc	r22, r22
     d64:	77 0b       	sbc	r23, r23
     d66:	9a 01       	movw	r18, r20
     d68:	11 27       	eor	r17, r17
     d6a:	00 27       	eor	r16, r16
     d6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	40 2b       	or	r20, r16
     d7a:	51 2b       	or	r21, r17
     d7c:	62 2b       	or	r22, r18
     d7e:	73 2b       	or	r23, r19
     d80:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     d84:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     d88:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     d8c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     d90:	b0 9b       	sbis	0x16, 0	; 22
     d92:	1a c0       	rjmp	.+52     	; 0xdc8 <__vector_2+0x9a>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	09 2e       	mov	r0, r25
     d98:	00 0c       	add	r0, r0
     d9a:	aa 0b       	sbc	r26, r26
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	bc 01       	movw	r22, r24
     da0:	55 27       	eor	r21, r21
     da2:	44 27       	eor	r20, r20
     da4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     da8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dac:	a0 e0       	ldi	r26, 0x00	; 0
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	84 2b       	or	r24, r20
     db2:	95 2b       	or	r25, r21
     db4:	a6 2b       	or	r26, r22
     db6:	b7 2b       	or	r27, r23
     db8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     dbc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     dc0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     dc4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     dc8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     dcc:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     dd0:	30 97       	sbiw	r30, 0x00	; 0
     dd2:	39 f0       	breq	.+14     	; 0xde2 <__vector_2+0xb4>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     ddc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     de0:	09 95       	icall
     de2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_3>:
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
     e32:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     e36:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     e3a:	ac 01       	movw	r20, r24
     e3c:	09 2e       	mov	r0, r25
     e3e:	00 0c       	add	r0, r0
     e40:	66 0b       	sbc	r22, r22
     e42:	77 0b       	sbc	r23, r23
     e44:	9a 01       	movw	r18, r20
     e46:	11 27       	eor	r17, r17
     e48:	00 27       	eor	r16, r16
     e4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	40 2b       	or	r20, r16
     e58:	51 2b       	or	r21, r17
     e5a:	62 2b       	or	r22, r18
     e5c:	73 2b       	or	r23, r19
     e5e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     e62:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     e66:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     e6a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     e6e:	b0 9b       	sbis	0x16, 0	; 22
     e70:	1a c0       	rjmp	.+52     	; 0xea6 <__vector_3+0x9a>
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	09 2e       	mov	r0, r25
     e76:	00 0c       	add	r0, r0
     e78:	aa 0b       	sbc	r26, r26
     e7a:	bb 0b       	sbc	r27, r27
     e7c:	bc 01       	movw	r22, r24
     e7e:	55 27       	eor	r21, r21
     e80:	44 27       	eor	r20, r20
     e82:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e86:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	84 2b       	or	r24, r20
     e90:	95 2b       	or	r25, r21
     e92:	a6 2b       	or	r26, r22
     e94:	b7 2b       	or	r27, r23
     e96:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e9a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e9e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ea2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     ea6:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     eaa:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     eae:	30 97       	sbiw	r30, 0x00	; 0
     eb0:	39 f0       	breq	.+14     	; 0xec0 <__vector_3+0xb4>
     eb2:	62 e0       	ldi	r22, 0x02	; 2
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     eba:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     ebe:	09 95       	icall
     ec0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <__vector_4>:
     eea:	1f 92       	push	r1
     eec:	0f 92       	push	r0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	0f 92       	push	r0
     ef2:	11 24       	eor	r1, r1
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	2f 93       	push	r18
     efa:	3f 93       	push	r19
     efc:	4f 93       	push	r20
     efe:	5f 93       	push	r21
     f00:	6f 93       	push	r22
     f02:	7f 93       	push	r23
     f04:	8f 93       	push	r24
     f06:	9f 93       	push	r25
     f08:	af 93       	push	r26
     f0a:	bf 93       	push	r27
     f0c:	ef 93       	push	r30
     f0e:	ff 93       	push	r31
     f10:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     f14:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     f18:	ac 01       	movw	r20, r24
     f1a:	09 2e       	mov	r0, r25
     f1c:	00 0c       	add	r0, r0
     f1e:	66 0b       	sbc	r22, r22
     f20:	77 0b       	sbc	r23, r23
     f22:	9a 01       	movw	r18, r20
     f24:	11 27       	eor	r17, r17
     f26:	00 27       	eor	r16, r16
     f28:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f2c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	70 e0       	ldi	r23, 0x00	; 0
     f34:	40 2b       	or	r20, r16
     f36:	51 2b       	or	r21, r17
     f38:	62 2b       	or	r22, r18
     f3a:	73 2b       	or	r23, r19
     f3c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     f40:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     f44:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     f48:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     f4c:	b0 9b       	sbis	0x16, 0	; 22
     f4e:	1a c0       	rjmp	.+52     	; 0xf84 <__vector_4+0x9a>
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	09 2e       	mov	r0, r25
     f54:	00 0c       	add	r0, r0
     f56:	aa 0b       	sbc	r26, r26
     f58:	bb 0b       	sbc	r27, r27
     f5a:	bc 01       	movw	r22, r24
     f5c:	55 27       	eor	r21, r21
     f5e:	44 27       	eor	r20, r20
     f60:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f64:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	84 2b       	or	r24, r20
     f6e:	95 2b       	or	r25, r21
     f70:	a6 2b       	or	r26, r22
     f72:	b7 2b       	or	r27, r23
     f74:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f78:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f7c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f80:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f84:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     f88:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     f8c:	30 97       	sbiw	r30, 0x00	; 0
     f8e:	39 f0       	breq	.+14     	; 0xf9e <__vector_4+0xb4>
     f90:	63 e0       	ldi	r22, 0x03	; 3
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     f98:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     f9c:	09 95       	icall
     f9e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
     fa2:	ff 91       	pop	r31
     fa4:	ef 91       	pop	r30
     fa6:	bf 91       	pop	r27
     fa8:	af 91       	pop	r26
     faa:	9f 91       	pop	r25
     fac:	8f 91       	pop	r24
     fae:	7f 91       	pop	r23
     fb0:	6f 91       	pop	r22
     fb2:	5f 91       	pop	r21
     fb4:	4f 91       	pop	r20
     fb6:	3f 91       	pop	r19
     fb8:	2f 91       	pop	r18
     fba:	1f 91       	pop	r17
     fbc:	0f 91       	pop	r16
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_5>:
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     ff2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     ff6:	ac 01       	movw	r20, r24
     ff8:	09 2e       	mov	r0, r25
     ffa:	00 0c       	add	r0, r0
     ffc:	66 0b       	sbc	r22, r22
     ffe:	77 0b       	sbc	r23, r23
    1000:	9a 01       	movw	r18, r20
    1002:	11 27       	eor	r17, r17
    1004:	00 27       	eor	r16, r16
    1006:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    100a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	40 2b       	or	r20, r16
    1014:	51 2b       	or	r21, r17
    1016:	62 2b       	or	r22, r18
    1018:	73 2b       	or	r23, r19
    101a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    101e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1022:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1026:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    102a:	b0 9b       	sbis	0x16, 0	; 22
    102c:	1a c0       	rjmp	.+52     	; 0x1062 <__vector_5+0x9a>
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	09 2e       	mov	r0, r25
    1032:	00 0c       	add	r0, r0
    1034:	aa 0b       	sbc	r26, r26
    1036:	bb 0b       	sbc	r27, r27
    1038:	bc 01       	movw	r22, r24
    103a:	55 27       	eor	r21, r21
    103c:	44 27       	eor	r20, r20
    103e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1042:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	84 2b       	or	r24, r20
    104c:	95 2b       	or	r25, r21
    104e:	a6 2b       	or	r26, r22
    1050:	b7 2b       	or	r27, r23
    1052:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1056:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    105a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    105e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1062:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
    1066:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
    106a:	30 97       	sbiw	r30, 0x00	; 0
    106c:	39 f0       	breq	.+14     	; 0x107c <__vector_5+0xb4>
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	70 e0       	ldi	r23, 0x00	; 0
    1072:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
    1076:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
    107a:	09 95       	icall
    107c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	bf 91       	pop	r27
    1086:	af 91       	pop	r26
    1088:	9f 91       	pop	r25
    108a:	8f 91       	pop	r24
    108c:	7f 91       	pop	r23
    108e:	6f 91       	pop	r22
    1090:	5f 91       	pop	r21
    1092:	4f 91       	pop	r20
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	1f 91       	pop	r17
    109a:	0f 91       	pop	r16
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_10>:
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	2f 93       	push	r18
    10b6:	3f 93       	push	r19
    10b8:	4f 93       	push	r20
    10ba:	5f 93       	push	r21
    10bc:	6f 93       	push	r22
    10be:	7f 93       	push	r23
    10c0:	8f 93       	push	r24
    10c2:	9f 93       	push	r25
    10c4:	af 93       	push	r26
    10c6:	bf 93       	push	r27
    10c8:	ef 93       	push	r30
    10ca:	ff 93       	push	r31
    10cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    10d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    10d4:	ac 01       	movw	r20, r24
    10d6:	09 2e       	mov	r0, r25
    10d8:	00 0c       	add	r0, r0
    10da:	66 0b       	sbc	r22, r22
    10dc:	77 0b       	sbc	r23, r23
    10de:	9a 01       	movw	r18, r20
    10e0:	11 27       	eor	r17, r17
    10e2:	00 27       	eor	r16, r16
    10e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	40 2b       	or	r20, r16
    10f2:	51 2b       	or	r21, r17
    10f4:	62 2b       	or	r22, r18
    10f6:	73 2b       	or	r23, r19
    10f8:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    10fc:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1100:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1104:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1108:	b0 9b       	sbis	0x16, 0	; 22
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <__vector_10+0x9a>
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	09 2e       	mov	r0, r25
    1110:	00 0c       	add	r0, r0
    1112:	aa 0b       	sbc	r26, r26
    1114:	bb 0b       	sbc	r27, r27
    1116:	bc 01       	movw	r22, r24
    1118:	55 27       	eor	r21, r21
    111a:	44 27       	eor	r20, r20
    111c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1120:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	84 2b       	or	r24, r20
    112a:	95 2b       	or	r25, r21
    112c:	a6 2b       	or	r26, r22
    112e:	b7 2b       	or	r27, r23
    1130:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1134:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1138:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    113c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1140:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
    1144:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	39 f0       	breq	.+14     	; 0x115a <__vector_10+0xb4>
    114c:	65 e0       	ldi	r22, 0x05	; 5
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
    1154:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
    1158:	09 95       	icall
    115a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	bf 91       	pop	r27
    1164:	af 91       	pop	r26
    1166:	9f 91       	pop	r25
    1168:	8f 91       	pop	r24
    116a:	7f 91       	pop	r23
    116c:	6f 91       	pop	r22
    116e:	5f 91       	pop	r21
    1170:	4f 91       	pop	r20
    1172:	3f 91       	pop	r19
    1174:	2f 91       	pop	r18
    1176:	1f 91       	pop	r17
    1178:	0f 91       	pop	r16
    117a:	0f 90       	pop	r0
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	0f 90       	pop	r0
    1180:	1f 90       	pop	r1
    1182:	18 95       	reti

00001184 <__vector_11>:
    1184:	1f 92       	push	r1
    1186:	0f 92       	push	r0
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	0f 92       	push	r0
    118c:	11 24       	eor	r1, r1
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    11ae:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    11b2:	ac 01       	movw	r20, r24
    11b4:	09 2e       	mov	r0, r25
    11b6:	00 0c       	add	r0, r0
    11b8:	66 0b       	sbc	r22, r22
    11ba:	77 0b       	sbc	r23, r23
    11bc:	9a 01       	movw	r18, r20
    11be:	11 27       	eor	r17, r17
    11c0:	00 27       	eor	r16, r16
    11c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	40 2b       	or	r20, r16
    11d0:	51 2b       	or	r21, r17
    11d2:	62 2b       	or	r22, r18
    11d4:	73 2b       	or	r23, r19
    11d6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    11da:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    11de:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    11e2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    11e6:	b0 9b       	sbis	0x16, 0	; 22
    11e8:	1a c0       	rjmp	.+52     	; 0x121e <__vector_11+0x9a>
    11ea:	01 96       	adiw	r24, 0x01	; 1
    11ec:	09 2e       	mov	r0, r25
    11ee:	00 0c       	add	r0, r0
    11f0:	aa 0b       	sbc	r26, r26
    11f2:	bb 0b       	sbc	r27, r27
    11f4:	bc 01       	movw	r22, r24
    11f6:	55 27       	eor	r21, r21
    11f8:	44 27       	eor	r20, r20
    11fa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11fe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	84 2b       	or	r24, r20
    1208:	95 2b       	or	r25, r21
    120a:	a6 2b       	or	r26, r22
    120c:	b7 2b       	or	r27, r23
    120e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1212:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1216:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    121a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    121e:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
    1222:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
    1226:	30 97       	sbiw	r30, 0x00	; 0
    1228:	39 f0       	breq	.+14     	; 0x1238 <__vector_11+0xb4>
    122a:	66 e0       	ldi	r22, 0x06	; 6
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    1232:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    1236:	09 95       	icall
    1238:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    123c:	ff 91       	pop	r31
    123e:	ef 91       	pop	r30
    1240:	bf 91       	pop	r27
    1242:	af 91       	pop	r26
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	7f 91       	pop	r23
    124a:	6f 91       	pop	r22
    124c:	5f 91       	pop	r21
    124e:	4f 91       	pop	r20
    1250:	3f 91       	pop	r19
    1252:	2f 91       	pop	r18
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <__vector_12>:
    1262:	1f 92       	push	r1
    1264:	0f 92       	push	r0
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	0f 92       	push	r0
    126a:	11 24       	eor	r1, r1
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	2f 93       	push	r18
    1272:	3f 93       	push	r19
    1274:	4f 93       	push	r20
    1276:	5f 93       	push	r21
    1278:	6f 93       	push	r22
    127a:	7f 93       	push	r23
    127c:	8f 93       	push	r24
    127e:	9f 93       	push	r25
    1280:	af 93       	push	r26
    1282:	bf 93       	push	r27
    1284:	ef 93       	push	r30
    1286:	ff 93       	push	r31
    1288:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    128c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1290:	ac 01       	movw	r20, r24
    1292:	09 2e       	mov	r0, r25
    1294:	00 0c       	add	r0, r0
    1296:	66 0b       	sbc	r22, r22
    1298:	77 0b       	sbc	r23, r23
    129a:	9a 01       	movw	r18, r20
    129c:	11 27       	eor	r17, r17
    129e:	00 27       	eor	r16, r16
    12a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	40 2b       	or	r20, r16
    12ae:	51 2b       	or	r21, r17
    12b0:	62 2b       	or	r22, r18
    12b2:	73 2b       	or	r23, r19
    12b4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    12b8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    12bc:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    12c0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    12c4:	b0 9b       	sbis	0x16, 0	; 22
    12c6:	1a c0       	rjmp	.+52     	; 0x12fc <__vector_12+0x9a>
    12c8:	01 96       	adiw	r24, 0x01	; 1
    12ca:	09 2e       	mov	r0, r25
    12cc:	00 0c       	add	r0, r0
    12ce:	aa 0b       	sbc	r26, r26
    12d0:	bb 0b       	sbc	r27, r27
    12d2:	bc 01       	movw	r22, r24
    12d4:	55 27       	eor	r21, r21
    12d6:	44 27       	eor	r20, r20
    12d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12e0:	a0 e0       	ldi	r26, 0x00	; 0
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	84 2b       	or	r24, r20
    12e6:	95 2b       	or	r25, r21
    12e8:	a6 2b       	or	r26, r22
    12ea:	b7 2b       	or	r27, r23
    12ec:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12f0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12f4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12f8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12fc:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    1300:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    1304:	30 97       	sbiw	r30, 0x00	; 0
    1306:	39 f0       	breq	.+14     	; 0x1316 <__vector_12+0xb4>
    1308:	67 e0       	ldi	r22, 0x07	; 7
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    1310:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1314:	09 95       	icall
    1316:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_13>:
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	2f 93       	push	r18
    1350:	3f 93       	push	r19
    1352:	4f 93       	push	r20
    1354:	5f 93       	push	r21
    1356:	6f 93       	push	r22
    1358:	7f 93       	push	r23
    135a:	8f 93       	push	r24
    135c:	9f 93       	push	r25
    135e:	af 93       	push	r26
    1360:	bf 93       	push	r27
    1362:	ef 93       	push	r30
    1364:	ff 93       	push	r31
    1366:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    136a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    136e:	ac 01       	movw	r20, r24
    1370:	09 2e       	mov	r0, r25
    1372:	00 0c       	add	r0, r0
    1374:	66 0b       	sbc	r22, r22
    1376:	77 0b       	sbc	r23, r23
    1378:	9a 01       	movw	r18, r20
    137a:	11 27       	eor	r17, r17
    137c:	00 27       	eor	r16, r16
    137e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1382:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	40 2b       	or	r20, r16
    138c:	51 2b       	or	r21, r17
    138e:	62 2b       	or	r22, r18
    1390:	73 2b       	or	r23, r19
    1392:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1396:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    139a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    139e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    13a2:	b0 9b       	sbis	0x16, 0	; 22
    13a4:	1a c0       	rjmp	.+52     	; 0x13da <__vector_13+0x9a>
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	09 2e       	mov	r0, r25
    13aa:	00 0c       	add	r0, r0
    13ac:	aa 0b       	sbc	r26, r26
    13ae:	bb 0b       	sbc	r27, r27
    13b0:	bc 01       	movw	r22, r24
    13b2:	55 27       	eor	r21, r21
    13b4:	44 27       	eor	r20, r20
    13b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13be:	a0 e0       	ldi	r26, 0x00	; 0
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	84 2b       	or	r24, r20
    13c4:	95 2b       	or	r25, r21
    13c6:	a6 2b       	or	r26, r22
    13c8:	b7 2b       	or	r27, r23
    13ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    13ce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    13d2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    13d6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13da:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    13de:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    13e2:	30 97       	sbiw	r30, 0x00	; 0
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <__vector_13+0xb4>
    13e6:	68 e0       	ldi	r22, 0x08	; 8
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    13ee:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    13f2:	09 95       	icall
    13f4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_14>:
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1448:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    144c:	ac 01       	movw	r20, r24
    144e:	09 2e       	mov	r0, r25
    1450:	00 0c       	add	r0, r0
    1452:	66 0b       	sbc	r22, r22
    1454:	77 0b       	sbc	r23, r23
    1456:	9a 01       	movw	r18, r20
    1458:	11 27       	eor	r17, r17
    145a:	00 27       	eor	r16, r16
    145c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1460:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	40 2b       	or	r20, r16
    146a:	51 2b       	or	r21, r17
    146c:	62 2b       	or	r22, r18
    146e:	73 2b       	or	r23, r19
    1470:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1474:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1478:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    147c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1480:	b0 9b       	sbis	0x16, 0	; 22
    1482:	1a c0       	rjmp	.+52     	; 0x14b8 <__vector_14+0x9a>
    1484:	01 96       	adiw	r24, 0x01	; 1
    1486:	09 2e       	mov	r0, r25
    1488:	00 0c       	add	r0, r0
    148a:	aa 0b       	sbc	r26, r26
    148c:	bb 0b       	sbc	r27, r27
    148e:	bc 01       	movw	r22, r24
    1490:	55 27       	eor	r21, r21
    1492:	44 27       	eor	r20, r20
    1494:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1498:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    149c:	a0 e0       	ldi	r26, 0x00	; 0
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	84 2b       	or	r24, r20
    14a2:	95 2b       	or	r25, r21
    14a4:	a6 2b       	or	r26, r22
    14a6:	b7 2b       	or	r27, r23
    14a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14b0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14b4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14b8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    14bc:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    14c0:	30 97       	sbiw	r30, 0x00	; 0
    14c2:	39 f0       	breq	.+14     	; 0x14d2 <__vector_14+0xb4>
    14c4:	69 e0       	ldi	r22, 0x09	; 9
    14c6:	70 e0       	ldi	r23, 0x00	; 0
    14c8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    14cc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    14d0:	09 95       	icall
    14d2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_15>:
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	2f 93       	push	r18
    150c:	3f 93       	push	r19
    150e:	4f 93       	push	r20
    1510:	5f 93       	push	r21
    1512:	6f 93       	push	r22
    1514:	7f 93       	push	r23
    1516:	8f 93       	push	r24
    1518:	9f 93       	push	r25
    151a:	af 93       	push	r26
    151c:	bf 93       	push	r27
    151e:	ef 93       	push	r30
    1520:	ff 93       	push	r31
    1522:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1526:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    152a:	ac 01       	movw	r20, r24
    152c:	09 2e       	mov	r0, r25
    152e:	00 0c       	add	r0, r0
    1530:	66 0b       	sbc	r22, r22
    1532:	77 0b       	sbc	r23, r23
    1534:	9a 01       	movw	r18, r20
    1536:	11 27       	eor	r17, r17
    1538:	00 27       	eor	r16, r16
    153a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    153e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	40 2b       	or	r20, r16
    1548:	51 2b       	or	r21, r17
    154a:	62 2b       	or	r22, r18
    154c:	73 2b       	or	r23, r19
    154e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1552:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1556:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    155a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    155e:	b0 9b       	sbis	0x16, 0	; 22
    1560:	1a c0       	rjmp	.+52     	; 0x1596 <__vector_15+0x9a>
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	09 2e       	mov	r0, r25
    1566:	00 0c       	add	r0, r0
    1568:	aa 0b       	sbc	r26, r26
    156a:	bb 0b       	sbc	r27, r27
    156c:	bc 01       	movw	r22, r24
    156e:	55 27       	eor	r21, r21
    1570:	44 27       	eor	r20, r20
    1572:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1576:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    157a:	a0 e0       	ldi	r26, 0x00	; 0
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	84 2b       	or	r24, r20
    1580:	95 2b       	or	r25, r21
    1582:	a6 2b       	or	r26, r22
    1584:	b7 2b       	or	r27, r23
    1586:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    158a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    158e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1592:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1596:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    159a:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    159e:	30 97       	sbiw	r30, 0x00	; 0
    15a0:	39 f0       	breq	.+14     	; 0x15b0 <__vector_15+0xb4>
    15a2:	6a e0       	ldi	r22, 0x0A	; 10
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    15aa:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    15ae:	09 95       	icall
    15b0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	0f 90       	pop	r0
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	0f 90       	pop	r0
    15d6:	1f 90       	pop	r1
    15d8:	18 95       	reti

000015da <__vector_16>:
    15da:	1f 92       	push	r1
    15dc:	0f 92       	push	r0
    15de:	0f b6       	in	r0, 0x3f	; 63
    15e0:	0f 92       	push	r0
    15e2:	11 24       	eor	r1, r1
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	2f 93       	push	r18
    15ea:	3f 93       	push	r19
    15ec:	4f 93       	push	r20
    15ee:	5f 93       	push	r21
    15f0:	6f 93       	push	r22
    15f2:	7f 93       	push	r23
    15f4:	8f 93       	push	r24
    15f6:	9f 93       	push	r25
    15f8:	af 93       	push	r26
    15fa:	bf 93       	push	r27
    15fc:	ef 93       	push	r30
    15fe:	ff 93       	push	r31
    1600:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1604:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1608:	ac 01       	movw	r20, r24
    160a:	09 2e       	mov	r0, r25
    160c:	00 0c       	add	r0, r0
    160e:	66 0b       	sbc	r22, r22
    1610:	77 0b       	sbc	r23, r23
    1612:	9a 01       	movw	r18, r20
    1614:	11 27       	eor	r17, r17
    1616:	00 27       	eor	r16, r16
    1618:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    161c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	40 2b       	or	r20, r16
    1626:	51 2b       	or	r21, r17
    1628:	62 2b       	or	r22, r18
    162a:	73 2b       	or	r23, r19
    162c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1630:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1634:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1638:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    163c:	b0 9b       	sbis	0x16, 0	; 22
    163e:	1a c0       	rjmp	.+52     	; 0x1674 <__vector_16+0x9a>
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	09 2e       	mov	r0, r25
    1644:	00 0c       	add	r0, r0
    1646:	aa 0b       	sbc	r26, r26
    1648:	bb 0b       	sbc	r27, r27
    164a:	bc 01       	movw	r22, r24
    164c:	55 27       	eor	r21, r21
    164e:	44 27       	eor	r20, r20
    1650:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1654:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1658:	a0 e0       	ldi	r26, 0x00	; 0
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	84 2b       	or	r24, r20
    165e:	95 2b       	or	r25, r21
    1660:	a6 2b       	or	r26, r22
    1662:	b7 2b       	or	r27, r23
    1664:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1668:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    166c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1670:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1674:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    1678:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    167c:	30 97       	sbiw	r30, 0x00	; 0
    167e:	39 f0       	breq	.+14     	; 0x168e <__vector_16+0xb4>
    1680:	6b e0       	ldi	r22, 0x0B	; 11
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    1688:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    168c:	09 95       	icall
    168e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	bf 91       	pop	r27
    1698:	af 91       	pop	r26
    169a:	9f 91       	pop	r25
    169c:	8f 91       	pop	r24
    169e:	7f 91       	pop	r23
    16a0:	6f 91       	pop	r22
    16a2:	5f 91       	pop	r21
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	2f 91       	pop	r18
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	0f 90       	pop	r0
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	0f 90       	pop	r0
    16b4:	1f 90       	pop	r1
    16b6:	18 95       	reti

000016b8 <__vector_17>:
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
    16de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    16e2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    16e6:	ac 01       	movw	r20, r24
    16e8:	09 2e       	mov	r0, r25
    16ea:	00 0c       	add	r0, r0
    16ec:	66 0b       	sbc	r22, r22
    16ee:	77 0b       	sbc	r23, r23
    16f0:	9a 01       	movw	r18, r20
    16f2:	11 27       	eor	r17, r17
    16f4:	00 27       	eor	r16, r16
    16f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	40 2b       	or	r20, r16
    1704:	51 2b       	or	r21, r17
    1706:	62 2b       	or	r22, r18
    1708:	73 2b       	or	r23, r19
    170a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    170e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1712:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1716:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    171a:	b0 9b       	sbis	0x16, 0	; 22
    171c:	1a c0       	rjmp	.+52     	; 0x1752 <__vector_17+0x9a>
    171e:	01 96       	adiw	r24, 0x01	; 1
    1720:	09 2e       	mov	r0, r25
    1722:	00 0c       	add	r0, r0
    1724:	aa 0b       	sbc	r26, r26
    1726:	bb 0b       	sbc	r27, r27
    1728:	bc 01       	movw	r22, r24
    172a:	55 27       	eor	r21, r21
    172c:	44 27       	eor	r20, r20
    172e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1732:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	84 2b       	or	r24, r20
    173c:	95 2b       	or	r25, r21
    173e:	a6 2b       	or	r26, r22
    1740:	b7 2b       	or	r27, r23
    1742:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1746:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    174a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    174e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1752:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    1756:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    175a:	30 97       	sbiw	r30, 0x00	; 0
    175c:	39 f0       	breq	.+14     	; 0x176c <__vector_17+0xb4>
    175e:	6c e0       	ldi	r22, 0x0C	; 12
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1766:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    176a:	09 95       	icall
    176c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1770:	ff 91       	pop	r31
    1772:	ef 91       	pop	r30
    1774:	bf 91       	pop	r27
    1776:	af 91       	pop	r26
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	7f 91       	pop	r23
    177e:	6f 91       	pop	r22
    1780:	5f 91       	pop	r21
    1782:	4f 91       	pop	r20
    1784:	3f 91       	pop	r19
    1786:	2f 91       	pop	r18
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	0f 90       	pop	r0
    1792:	1f 90       	pop	r1
    1794:	18 95       	reti

00001796 <__vector_18>:
    1796:	1f 92       	push	r1
    1798:	0f 92       	push	r0
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	0f 92       	push	r0
    179e:	11 24       	eor	r1, r1
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	6f 93       	push	r22
    17ae:	7f 93       	push	r23
    17b0:	8f 93       	push	r24
    17b2:	9f 93       	push	r25
    17b4:	af 93       	push	r26
    17b6:	bf 93       	push	r27
    17b8:	ef 93       	push	r30
    17ba:	ff 93       	push	r31
    17bc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    17c0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    17c4:	ac 01       	movw	r20, r24
    17c6:	09 2e       	mov	r0, r25
    17c8:	00 0c       	add	r0, r0
    17ca:	66 0b       	sbc	r22, r22
    17cc:	77 0b       	sbc	r23, r23
    17ce:	9a 01       	movw	r18, r20
    17d0:	11 27       	eor	r17, r17
    17d2:	00 27       	eor	r16, r16
    17d4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17d8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	40 2b       	or	r20, r16
    17e2:	51 2b       	or	r21, r17
    17e4:	62 2b       	or	r22, r18
    17e6:	73 2b       	or	r23, r19
    17e8:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    17ec:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    17f0:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    17f4:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    17f8:	b0 9b       	sbis	0x16, 0	; 22
    17fa:	1a c0       	rjmp	.+52     	; 0x1830 <__vector_18+0x9a>
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	09 2e       	mov	r0, r25
    1800:	00 0c       	add	r0, r0
    1802:	aa 0b       	sbc	r26, r26
    1804:	bb 0b       	sbc	r27, r27
    1806:	bc 01       	movw	r22, r24
    1808:	55 27       	eor	r21, r21
    180a:	44 27       	eor	r20, r20
    180c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1810:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	84 2b       	or	r24, r20
    181a:	95 2b       	or	r25, r21
    181c:	a6 2b       	or	r26, r22
    181e:	b7 2b       	or	r27, r23
    1820:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1824:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1828:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    182c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1830:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1834:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1838:	30 97       	sbiw	r30, 0x00	; 0
    183a:	39 f0       	breq	.+14     	; 0x184a <__vector_18+0xb4>
    183c:	6d e0       	ldi	r22, 0x0D	; 13
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    1844:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    1848:	09 95       	icall
    184a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    184e:	ff 91       	pop	r31
    1850:	ef 91       	pop	r30
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_19>:
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	0f 93       	push	r16
    1880:	1f 93       	push	r17
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
    189a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    189e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    18a2:	ac 01       	movw	r20, r24
    18a4:	09 2e       	mov	r0, r25
    18a6:	00 0c       	add	r0, r0
    18a8:	66 0b       	sbc	r22, r22
    18aa:	77 0b       	sbc	r23, r23
    18ac:	9a 01       	movw	r18, r20
    18ae:	11 27       	eor	r17, r17
    18b0:	00 27       	eor	r16, r16
    18b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18ba:	60 e0       	ldi	r22, 0x00	; 0
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	40 2b       	or	r20, r16
    18c0:	51 2b       	or	r21, r17
    18c2:	62 2b       	or	r22, r18
    18c4:	73 2b       	or	r23, r19
    18c6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    18ca:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    18ce:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    18d2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    18d6:	b0 9b       	sbis	0x16, 0	; 22
    18d8:	1a c0       	rjmp	.+52     	; 0x190e <__vector_19+0x9a>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	09 2e       	mov	r0, r25
    18de:	00 0c       	add	r0, r0
    18e0:	aa 0b       	sbc	r26, r26
    18e2:	bb 0b       	sbc	r27, r27
    18e4:	bc 01       	movw	r22, r24
    18e6:	55 27       	eor	r21, r21
    18e8:	44 27       	eor	r20, r20
    18ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f2:	a0 e0       	ldi	r26, 0x00	; 0
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	84 2b       	or	r24, r20
    18f8:	95 2b       	or	r25, r21
    18fa:	a6 2b       	or	r26, r22
    18fc:	b7 2b       	or	r27, r23
    18fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1902:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1906:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    190a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    190e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    1912:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	39 f0       	breq	.+14     	; 0x1928 <__vector_19+0xb4>
    191a:	6e e0       	ldi	r22, 0x0E	; 14
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1922:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    1926:	09 95       	icall
    1928:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	1f 91       	pop	r17
    1946:	0f 91       	pop	r16
    1948:	0f 90       	pop	r0
    194a:	0f be       	out	0x3f, r0	; 63
    194c:	0f 90       	pop	r0
    194e:	1f 90       	pop	r1
    1950:	18 95       	reti

00001952 <__vector_20>:
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	2f 93       	push	r18
    1962:	3f 93       	push	r19
    1964:	4f 93       	push	r20
    1966:	5f 93       	push	r21
    1968:	6f 93       	push	r22
    196a:	7f 93       	push	r23
    196c:	8f 93       	push	r24
    196e:	9f 93       	push	r25
    1970:	af 93       	push	r26
    1972:	bf 93       	push	r27
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    197c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1980:	ac 01       	movw	r20, r24
    1982:	09 2e       	mov	r0, r25
    1984:	00 0c       	add	r0, r0
    1986:	66 0b       	sbc	r22, r22
    1988:	77 0b       	sbc	r23, r23
    198a:	9a 01       	movw	r18, r20
    198c:	11 27       	eor	r17, r17
    198e:	00 27       	eor	r16, r16
    1990:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1994:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	40 2b       	or	r20, r16
    199e:	51 2b       	or	r21, r17
    19a0:	62 2b       	or	r22, r18
    19a2:	73 2b       	or	r23, r19
    19a4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    19a8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    19ac:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    19b0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    19b4:	b0 9b       	sbis	0x16, 0	; 22
    19b6:	1a c0       	rjmp	.+52     	; 0x19ec <__vector_20+0x9a>
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	09 2e       	mov	r0, r25
    19bc:	00 0c       	add	r0, r0
    19be:	aa 0b       	sbc	r26, r26
    19c0:	bb 0b       	sbc	r27, r27
    19c2:	bc 01       	movw	r22, r24
    19c4:	55 27       	eor	r21, r21
    19c6:	44 27       	eor	r20, r20
    19c8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19cc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	84 2b       	or	r24, r20
    19d6:	95 2b       	or	r25, r21
    19d8:	a6 2b       	or	r26, r22
    19da:	b7 2b       	or	r27, r23
    19dc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    19e0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    19e4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    19e8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    19ec:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    19f0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    19f4:	30 97       	sbiw	r30, 0x00	; 0
    19f6:	39 f0       	breq	.+14     	; 0x1a06 <__vector_20+0xb4>
    19f8:	6f e0       	ldi	r22, 0x0F	; 15
    19fa:	70 e0       	ldi	r23, 0x00	; 0
    19fc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1a00:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    1a04:	09 95       	icall
    1a06:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	7f 91       	pop	r23
    1a18:	6f 91       	pop	r22
    1a1a:	5f 91       	pop	r21
    1a1c:	4f 91       	pop	r20
    1a1e:	3f 91       	pop	r19
    1a20:	2f 91       	pop	r18
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	0f 90       	pop	r0
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	0f 90       	pop	r0
    1a2c:	1f 90       	pop	r1
    1a2e:	18 95       	reti

00001a30 <__vector_21>:
    1a30:	1f 92       	push	r1
    1a32:	0f 92       	push	r0
    1a34:	0f b6       	in	r0, 0x3f	; 63
    1a36:	0f 92       	push	r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	2f 93       	push	r18
    1a40:	3f 93       	push	r19
    1a42:	4f 93       	push	r20
    1a44:	5f 93       	push	r21
    1a46:	6f 93       	push	r22
    1a48:	7f 93       	push	r23
    1a4a:	8f 93       	push	r24
    1a4c:	9f 93       	push	r25
    1a4e:	af 93       	push	r26
    1a50:	bf 93       	push	r27
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1a5a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1a5e:	ac 01       	movw	r20, r24
    1a60:	09 2e       	mov	r0, r25
    1a62:	00 0c       	add	r0, r0
    1a64:	66 0b       	sbc	r22, r22
    1a66:	77 0b       	sbc	r23, r23
    1a68:	9a 01       	movw	r18, r20
    1a6a:	11 27       	eor	r17, r17
    1a6c:	00 27       	eor	r16, r16
    1a6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a76:	60 e0       	ldi	r22, 0x00	; 0
    1a78:	70 e0       	ldi	r23, 0x00	; 0
    1a7a:	40 2b       	or	r20, r16
    1a7c:	51 2b       	or	r21, r17
    1a7e:	62 2b       	or	r22, r18
    1a80:	73 2b       	or	r23, r19
    1a82:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1a86:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1a8a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1a8e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1a92:	b0 9b       	sbis	0x16, 0	; 22
    1a94:	1a c0       	rjmp	.+52     	; 0x1aca <__vector_21+0x9a>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	09 2e       	mov	r0, r25
    1a9a:	00 0c       	add	r0, r0
    1a9c:	aa 0b       	sbc	r26, r26
    1a9e:	bb 0b       	sbc	r27, r27
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	55 27       	eor	r21, r21
    1aa4:	44 27       	eor	r20, r20
    1aa6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1aaa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	84 2b       	or	r24, r20
    1ab4:	95 2b       	or	r25, r21
    1ab6:	a6 2b       	or	r26, r22
    1ab8:	b7 2b       	or	r27, r23
    1aba:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1abe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1ac2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1ac6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1aca:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1ace:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    1ad2:	30 97       	sbiw	r30, 0x00	; 0
    1ad4:	39 f0       	breq	.+14     	; 0x1ae4 <__vector_21+0xb4>
    1ad6:	60 e1       	ldi	r22, 0x10	; 16
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1ade:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1ae2:	09 95       	icall
    1ae4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1ae8:	ff 91       	pop	r31
    1aea:	ef 91       	pop	r30
    1aec:	bf 91       	pop	r27
    1aee:	af 91       	pop	r26
    1af0:	9f 91       	pop	r25
    1af2:	8f 91       	pop	r24
    1af4:	7f 91       	pop	r23
    1af6:	6f 91       	pop	r22
    1af8:	5f 91       	pop	r21
    1afa:	4f 91       	pop	r20
    1afc:	3f 91       	pop	r19
    1afe:	2f 91       	pop	r18
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	0f 90       	pop	r0
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	0f 90       	pop	r0
    1b0a:	1f 90       	pop	r1
    1b0c:	18 95       	reti

00001b0e <__vector_22>:
    1b0e:	1f 92       	push	r1
    1b10:	0f 92       	push	r0
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	0f 92       	push	r0
    1b16:	11 24       	eor	r1, r1
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
    1b34:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1b38:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	09 2e       	mov	r0, r25
    1b40:	00 0c       	add	r0, r0
    1b42:	66 0b       	sbc	r22, r22
    1b44:	77 0b       	sbc	r23, r23
    1b46:	9a 01       	movw	r18, r20
    1b48:	11 27       	eor	r17, r17
    1b4a:	00 27       	eor	r16, r16
    1b4c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b50:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	40 2b       	or	r20, r16
    1b5a:	51 2b       	or	r21, r17
    1b5c:	62 2b       	or	r22, r18
    1b5e:	73 2b       	or	r23, r19
    1b60:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1b64:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1b68:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1b6c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1b70:	b0 9b       	sbis	0x16, 0	; 22
    1b72:	1a c0       	rjmp	.+52     	; 0x1ba8 <__vector_22+0x9a>
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	09 2e       	mov	r0, r25
    1b78:	00 0c       	add	r0, r0
    1b7a:	aa 0b       	sbc	r26, r26
    1b7c:	bb 0b       	sbc	r27, r27
    1b7e:	bc 01       	movw	r22, r24
    1b80:	55 27       	eor	r21, r21
    1b82:	44 27       	eor	r20, r20
    1b84:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b88:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	84 2b       	or	r24, r20
    1b92:	95 2b       	or	r25, r21
    1b94:	a6 2b       	or	r26, r22
    1b96:	b7 2b       	or	r27, r23
    1b98:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1b9c:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1ba0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1ba4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1ba8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    1bac:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    1bb0:	30 97       	sbiw	r30, 0x00	; 0
    1bb2:	39 f0       	breq	.+14     	; 0x1bc2 <__vector_22+0xb4>
    1bb4:	61 e1       	ldi	r22, 0x11	; 17
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    1bbc:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    1bc0:	09 95       	icall
    1bc2:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1bc6:	ff 91       	pop	r31
    1bc8:	ef 91       	pop	r30
    1bca:	bf 91       	pop	r27
    1bcc:	af 91       	pop	r26
    1bce:	9f 91       	pop	r25
    1bd0:	8f 91       	pop	r24
    1bd2:	7f 91       	pop	r23
    1bd4:	6f 91       	pop	r22
    1bd6:	5f 91       	pop	r21
    1bd8:	4f 91       	pop	r20
    1bda:	3f 91       	pop	r19
    1bdc:	2f 91       	pop	r18
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	0f 90       	pop	r0
    1be8:	1f 90       	pop	r1
    1bea:	18 95       	reti

00001bec <idle>:
    1bec:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1bf0:	78 94       	sei
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	83 bf       	out	0x33, r24	; 51
    1bf6:	88 95       	sleep
    1bf8:	fc cf       	rjmp	.-8      	; 0x1bf2 <idle+0x6>

00001bfa <__vector_9>:
    1bfa:	1f 92       	push	r1
    1bfc:	0f 92       	push	r0
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	0f 92       	push	r0
    1c02:	11 24       	eor	r1, r1
    1c04:	2f 93       	push	r18
    1c06:	3f 93       	push	r19
    1c08:	4f 93       	push	r20
    1c0a:	5f 93       	push	r21
    1c0c:	6f 93       	push	r22
    1c0e:	7f 93       	push	r23
    1c10:	8f 93       	push	r24
    1c12:	9f 93       	push	r25
    1c14:	ef 93       	push	r30
    1c16:	ff 93       	push	r31
    1c18:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1c1c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    1c26:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    1c2a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1c2e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1c32:	30 97       	sbiw	r30, 0x00	; 0
    1c34:	01 f1       	breq	.+64     	; 0x1c76 <__vector_9+0x7c>
    1c36:	42 81       	ldd	r20, Z+2	; 0x02
    1c38:	53 81       	ldd	r21, Z+3	; 0x03
    1c3a:	64 81       	ldd	r22, Z+4	; 0x04
    1c3c:	75 81       	ldd	r23, Z+5	; 0x05
    1c3e:	86 17       	cp	r24, r22
    1c40:	97 07       	cpc	r25, r23
    1c42:	c9 f4       	brne	.+50     	; 0x1c76 <__vector_9+0x7c>
    1c44:	ca 01       	movw	r24, r20
    1c46:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c4a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c4e:	42 1b       	sub	r20, r18
    1c50:	53 0b       	sbc	r21, r19
    1c52:	41 30       	cpi	r20, 0x01	; 1
    1c54:	51 05       	cpc	r21, r1
    1c56:	29 f4       	brne	.+10     	; 0x1c62 <__vector_9+0x68>
    1c58:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c5c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1c66:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1c6a:	ef e6       	ldi	r30, 0x6F	; 111
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	82 60       	ori	r24, 0x02	; 2
    1c72:	80 83       	st	Z, r24
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <__vector_9+0x86>
    1c76:	ef e6       	ldi	r30, 0x6F	; 111
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8d 7f       	andi	r24, 0xFD	; 253
    1c7e:	80 83       	st	Z, r24
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	9f 91       	pop	r25
    1c86:	8f 91       	pop	r24
    1c88:	7f 91       	pop	r23
    1c8a:	6f 91       	pop	r22
    1c8c:	5f 91       	pop	r21
    1c8e:	4f 91       	pop	r20
    1c90:	3f 91       	pop	r19
    1c92:	2f 91       	pop	r18
    1c94:	0f 90       	pop	r0
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	0f 90       	pop	r0
    1c9a:	1f 90       	pop	r1
    1c9c:	18 95       	reti

00001c9e <__vector_7>:
    1c9e:	1f 92       	push	r1
    1ca0:	0f 92       	push	r0
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	0f 92       	push	r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	cf 92       	push	r12
    1caa:	df 92       	push	r13
    1cac:	ef 92       	push	r14
    1cae:	ff 92       	push	r15
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1ccc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1cd0:	6c 01       	movw	r12, r24
    1cd2:	09 2e       	mov	r0, r25
    1cd4:	00 0c       	add	r0, r0
    1cd6:	ee 08       	sbc	r14, r14
    1cd8:	ff 08       	sbc	r15, r15
    1cda:	76 01       	movw	r14, r12
    1cdc:	dd 24       	eor	r13, r13
    1cde:	cc 24       	eor	r12, r12
    1ce0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ce4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	c4 2a       	or	r12, r20
    1cee:	d5 2a       	or	r13, r21
    1cf0:	e6 2a       	or	r14, r22
    1cf2:	f7 2a       	or	r15, r23
    1cf4:	b0 9b       	sbis	0x16, 0	; 22
    1cf6:	1e c0       	rjmp	.+60     	; 0x1d34 <__vector_7+0x96>
    1cf8:	6c 01       	movw	r12, r24
    1cfa:	2f ef       	ldi	r18, 0xFF	; 255
    1cfc:	c2 1a       	sub	r12, r18
    1cfe:	d2 0a       	sbc	r13, r18
    1d00:	0d 2c       	mov	r0, r13
    1d02:	00 0c       	add	r0, r0
    1d04:	ee 08       	sbc	r14, r14
    1d06:	ff 08       	sbc	r15, r15
    1d08:	d6 01       	movw	r26, r12
    1d0a:	99 27       	eor	r25, r25
    1d0c:	88 27       	eor	r24, r24
    1d0e:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d12:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d16:	e1 2c       	mov	r14, r1
    1d18:	f1 2c       	mov	r15, r1
    1d1a:	c8 2a       	or	r12, r24
    1d1c:	d9 2a       	or	r13, r25
    1d1e:	ea 2a       	or	r14, r26
    1d20:	fb 2a       	or	r15, r27
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <__vector_7+0x96>
    1d24:	82 e2       	ldi	r24, 0x22	; 34
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dequeue>
    1d2c:	64 e2       	ldi	r22, 0x24	; 36
    1d2e:	71 e0       	ldi	r23, 0x01	; 1
    1d30:	0e 94 5d 05 	call	0xaba	; 0xaba <enqueueByDeadline>
    1d34:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1d38:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1d3c:	30 97       	sbiw	r30, 0x00	; 0
    1d3e:	69 f0       	breq	.+26     	; 0x1d5a <__vector_7+0xbc>
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	a4 81       	ldd	r26, Z+4	; 0x04
    1d46:	b5 81       	ldd	r27, Z+5	; 0x05
    1d48:	8c 19       	sub	r24, r12
    1d4a:	9d 09       	sbc	r25, r13
    1d4c:	ae 09       	sbc	r26, r14
    1d4e:	bf 09       	sbc	r27, r15
    1d50:	18 16       	cp	r1, r24
    1d52:	19 06       	cpc	r1, r25
    1d54:	1a 06       	cpc	r1, r26
    1d56:	1b 06       	cpc	r1, r27
    1d58:	2c f7       	brge	.-54     	; 0x1d24 <__vector_7+0x86>
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	21 f1       	breq	.+72     	; 0x1da6 <__vector_7+0x108>
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	a4 81       	ldd	r26, Z+4	; 0x04
    1d64:	b5 81       	ldd	r27, Z+5	; 0x05
    1d66:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1d6a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1d6e:	2a 17       	cp	r18, r26
    1d70:	3b 07       	cpc	r19, r27
    1d72:	c9 f4       	brne	.+50     	; 0x1da6 <__vector_7+0x108>
    1d74:	9c 01       	movw	r18, r24
    1d76:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d7a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d7e:	84 1b       	sub	r24, r20
    1d80:	95 0b       	sbc	r25, r21
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	31 f4       	brne	.+12     	; 0x1d92 <__vector_7+0xf4>
    1d86:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d8a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d8e:	2f 5f       	subi	r18, 0xFF	; 255
    1d90:	3f 4f       	sbci	r19, 0xFF	; 255
    1d92:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d96:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d9a:	ef e6       	ldi	r30, 0x6F	; 111
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	82 60       	ori	r24, 0x02	; 2
    1da2:	80 83       	st	Z, r24
    1da4:	05 c0       	rjmp	.+10     	; 0x1db0 <__vector_7+0x112>
    1da6:	ef e6       	ldi	r30, 0x6F	; 111
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8d 7f       	andi	r24, 0xFD	; 253
    1dae:	80 83       	st	Z, r24
    1db0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <schedule>
    1db4:	ff 91       	pop	r31
    1db6:	ef 91       	pop	r30
    1db8:	bf 91       	pop	r27
    1dba:	af 91       	pop	r26
    1dbc:	9f 91       	pop	r25
    1dbe:	8f 91       	pop	r24
    1dc0:	7f 91       	pop	r23
    1dc2:	6f 91       	pop	r22
    1dc4:	5f 91       	pop	r21
    1dc6:	4f 91       	pop	r20
    1dc8:	3f 91       	pop	r19
    1dca:	2f 91       	pop	r18
    1dcc:	ff 90       	pop	r15
    1dce:	ef 90       	pop	r14
    1dd0:	df 90       	pop	r13
    1dd2:	cf 90       	pop	r12
    1dd4:	0f 90       	pop	r0
    1dd6:	0f be       	out	0x3f, r0	; 63
    1dd8:	0f 90       	pop	r0
    1dda:	1f 90       	pop	r1
    1ddc:	18 95       	reti

00001dde <async>:
    1dde:	3f 92       	push	r3
    1de0:	4f 92       	push	r4
    1de2:	5f 92       	push	r5
    1de4:	6f 92       	push	r6
    1de6:	7f 92       	push	r7
    1de8:	8f 92       	push	r8
    1dea:	9f 92       	push	r9
    1dec:	af 92       	push	r10
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	2b 01       	movw	r4, r22
    1e02:	3c 01       	movw	r6, r24
    1e04:	49 01       	movw	r8, r18
    1e06:	5a 01       	movw	r10, r20
    1e08:	8f b7       	in	r24, 0x3f	; 63
    1e0a:	80 78       	andi	r24, 0x80	; 128
    1e0c:	38 2e       	mov	r3, r24
    1e0e:	f8 94       	cli
    1e10:	86 e0       	ldi	r24, 0x06	; 6
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dequeue>
    1e18:	ec 01       	movw	r28, r24
    1e1a:	1b 87       	std	Y+11, r17	; 0x0b
    1e1c:	0a 87       	std	Y+10, r16	; 0x0a
    1e1e:	fd 86       	std	Y+13, r15	; 0x0d
    1e20:	ec 86       	std	Y+12, r14	; 0x0c
    1e22:	df 86       	std	Y+15, r13	; 0x0f
    1e24:	ce 86       	std	Y+14, r12	; 0x0e
    1e26:	33 20       	and	r3, r3
    1e28:	61 f0       	breq	.+24     	; 0x1e42 <async+0x64>
    1e2a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e2e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e32:	02 80       	ldd	r0, Z+2	; 0x02
    1e34:	f3 81       	ldd	r31, Z+3	; 0x03
    1e36:	e0 2d       	mov	r30, r0
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	a4 81       	ldd	r26, Z+4	; 0x04
    1e3e:	b5 81       	ldd	r27, Z+5	; 0x05
    1e40:	08 c0       	rjmp	.+16     	; 0x1e52 <async+0x74>
    1e42:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timestamp>
    1e46:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timestamp+0x1>
    1e4a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timestamp+0x2>
    1e4e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timestamp+0x3>
    1e52:	48 0e       	add	r4, r24
    1e54:	59 1e       	adc	r5, r25
    1e56:	6a 1e       	adc	r6, r26
    1e58:	7b 1e       	adc	r7, r27
    1e5a:	4a 82       	std	Y+2, r4	; 0x02
    1e5c:	5b 82       	std	Y+3, r5	; 0x03
    1e5e:	6c 82       	std	Y+4, r6	; 0x04
    1e60:	7d 82       	std	Y+5, r7	; 0x05
    1e62:	18 14       	cp	r1, r8
    1e64:	19 04       	cpc	r1, r9
    1e66:	1a 04       	cpc	r1, r10
    1e68:	1b 04       	cpc	r1, r11
    1e6a:	44 f0       	brlt	.+16     	; 0x1e7c <async+0x9e>
    1e6c:	0f 2e       	mov	r0, r31
    1e6e:	88 24       	eor	r8, r8
    1e70:	8a 94       	dec	r8
    1e72:	98 2c       	mov	r9, r8
    1e74:	a8 2c       	mov	r10, r8
    1e76:	ff e7       	ldi	r31, 0x7F	; 127
    1e78:	bf 2e       	mov	r11, r31
    1e7a:	f0 2d       	mov	r31, r0
    1e7c:	84 0c       	add	r8, r4
    1e7e:	95 1c       	adc	r9, r5
    1e80:	a6 1c       	adc	r10, r6
    1e82:	b7 1c       	adc	r11, r7
    1e84:	8e 82       	std	Y+6, r8	; 0x06
    1e86:	9f 82       	std	Y+7, r9	; 0x07
    1e88:	a8 86       	std	Y+8, r10	; 0x08
    1e8a:	b9 86       	std	Y+9, r11	; 0x09
    1e8c:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1e90:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1e94:	c9 01       	movw	r24, r18
    1e96:	03 2e       	mov	r0, r19
    1e98:	00 0c       	add	r0, r0
    1e9a:	aa 0b       	sbc	r26, r26
    1e9c:	bb 0b       	sbc	r27, r27
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	99 27       	eor	r25, r25
    1ea2:	88 27       	eor	r24, r24
    1ea4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	84 2b       	or	r24, r20
    1eb2:	95 2b       	or	r25, r21
    1eb4:	a6 2b       	or	r26, r22
    1eb6:	b7 2b       	or	r27, r23
    1eb8:	b0 9b       	sbis	0x16, 0	; 22
    1eba:	13 c0       	rjmp	.+38     	; 0x1ee2 <async+0x104>
    1ebc:	c9 01       	movw	r24, r18
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	09 2e       	mov	r0, r25
    1ec2:	00 0c       	add	r0, r0
    1ec4:	aa 0b       	sbc	r26, r26
    1ec6:	bb 0b       	sbc	r27, r27
    1ec8:	dc 01       	movw	r26, r24
    1eca:	99 27       	eor	r25, r25
    1ecc:	88 27       	eor	r24, r24
    1ece:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ed2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ed6:	60 e0       	ldi	r22, 0x00	; 0
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	84 2b       	or	r24, r20
    1edc:	95 2b       	or	r25, r21
    1ede:	a6 2b       	or	r26, r22
    1ee0:	b7 2b       	or	r27, r23
    1ee2:	48 1a       	sub	r4, r24
    1ee4:	59 0a       	sbc	r5, r25
    1ee6:	6a 0a       	sbc	r6, r26
    1ee8:	7b 0a       	sbc	r7, r27
    1eea:	14 14       	cp	r1, r4
    1eec:	15 04       	cpc	r1, r5
    1eee:	16 04       	cpc	r1, r6
    1ef0:	17 04       	cpc	r1, r7
    1ef2:	ac f5       	brge	.+106    	; 0x1f5e <async+0x180>
    1ef4:	62 e2       	ldi	r22, 0x22	; 34
    1ef6:	71 e0       	ldi	r23, 0x01	; 1
    1ef8:	ce 01       	movw	r24, r28
    1efa:	0e 94 8e 05 	call	0xb1c	; 0xb1c <enqueueByBaseline>
    1efe:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1f02:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1f06:	30 97       	sbiw	r30, 0x00	; 0
    1f08:	21 f1       	breq	.+72     	; 0x1f52 <async+0x174>
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	a4 81       	ldd	r26, Z+4	; 0x04
    1f10:	b5 81       	ldd	r27, Z+5	; 0x05
    1f12:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1f16:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1f1a:	2a 17       	cp	r18, r26
    1f1c:	3b 07       	cpc	r19, r27
    1f1e:	c9 f4       	brne	.+50     	; 0x1f52 <async+0x174>
    1f20:	9c 01       	movw	r18, r24
    1f22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f2a:	84 1b       	sub	r24, r20
    1f2c:	95 0b       	sbc	r25, r21
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	31 f4       	brne	.+12     	; 0x1f3e <async+0x160>
    1f32:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1f36:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1f3a:	2f 5f       	subi	r18, 0xFF	; 255
    1f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f3e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1f42:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1f46:	ef e6       	ldi	r30, 0x6F	; 111
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	82 60       	ori	r24, 0x02	; 2
    1f4e:	80 83       	st	Z, r24
    1f50:	39 c0       	rjmp	.+114    	; 0x1fc4 <async+0x1e6>
    1f52:	ef e6       	ldi	r30, 0x6F	; 111
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8d 7f       	andi	r24, 0xFD	; 253
    1f5a:	80 83       	st	Z, r24
    1f5c:	33 c0       	rjmp	.+102    	; 0x1fc4 <async+0x1e6>
    1f5e:	64 e2       	ldi	r22, 0x24	; 36
    1f60:	71 e0       	ldi	r23, 0x01	; 1
    1f62:	ce 01       	movw	r24, r28
    1f64:	0e 94 5d 05 	call	0xaba	; 0xaba <enqueueByDeadline>
    1f68:	33 20       	and	r3, r3
    1f6a:	61 f1       	breq	.+88     	; 0x1fc4 <async+0x1e6>
    1f6c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f70:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f74:	89 2b       	or	r24, r25
    1f76:	31 f1       	breq	.+76     	; 0x1fc4 <async+0x1e6>
    1f78:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1f7c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1f80:	86 81       	ldd	r24, Z+6	; 0x06
    1f82:	97 81       	ldd	r25, Z+7	; 0x07
    1f84:	a0 85       	ldd	r26, Z+8	; 0x08
    1f86:	b1 85       	ldd	r27, Z+9	; 0x09
    1f88:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f8c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f90:	02 80       	ldd	r0, Z+2	; 0x02
    1f92:	f3 81       	ldd	r31, Z+3	; 0x03
    1f94:	e0 2d       	mov	r30, r0
    1f96:	46 81       	ldd	r20, Z+6	; 0x06
    1f98:	57 81       	ldd	r21, Z+7	; 0x07
    1f9a:	60 85       	ldd	r22, Z+8	; 0x08
    1f9c:	71 85       	ldd	r23, Z+9	; 0x09
    1f9e:	84 1b       	sub	r24, r20
    1fa0:	95 0b       	sbc	r25, r21
    1fa2:	a6 0b       	sbc	r26, r22
    1fa4:	b7 0b       	sbc	r27, r23
    1fa6:	72 f4       	brpl	.+28     	; 0x1fc4 <async+0x1e6>
    1fa8:	84 e0       	ldi	r24, 0x04	; 4
    1faa:	91 e0       	ldi	r25, 0x01	; 1
    1fac:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pop>
    1fb0:	62 e0       	ldi	r22, 0x02	; 2
    1fb2:	71 e0       	ldi	r23, 0x01	; 1
    1fb4:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <push>
    1fb8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1fbc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1fc0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <dispatch>
    1fc4:	33 20       	and	r3, r3
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <async+0x1ec>
    1fc8:	78 94       	sei
    1fca:	ce 01       	movw	r24, r28
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	ff 90       	pop	r15
    1fd6:	ef 90       	pop	r14
    1fd8:	df 90       	pop	r13
    1fda:	cf 90       	pop	r12
    1fdc:	bf 90       	pop	r11
    1fde:	af 90       	pop	r10
    1fe0:	9f 90       	pop	r9
    1fe2:	8f 90       	pop	r8
    1fe4:	7f 90       	pop	r7
    1fe6:	6f 90       	pop	r6
    1fe8:	5f 90       	pop	r5
    1fea:	4f 90       	pop	r4
    1fec:	3f 90       	pop	r3
    1fee:	08 95       	ret

00001ff0 <sync>:
    1ff0:	cf 92       	push	r12
    1ff2:	df 92       	push	r13
    1ff4:	ef 92       	push	r14
    1ff6:	ff 92       	push	r15
    1ff8:	0f 93       	push	r16
    1ffa:	1f 93       	push	r17
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	ec 01       	movw	r28, r24
    2002:	7b 01       	movw	r14, r22
    2004:	6a 01       	movw	r12, r20
    2006:	1f b7       	in	r17, 0x3f	; 63
    2008:	10 78       	andi	r17, 0x80	; 128
    200a:	f8 94       	cli
    200c:	a8 81       	ld	r26, Y
    200e:	b9 81       	ldd	r27, Y+1	; 0x01
    2010:	10 97       	sbiw	r26, 0x00	; 0
    2012:	19 f4       	brne	.+6      	; 0x201a <sync+0x2a>
    2014:	35 c0       	rjmp	.+106    	; 0x2080 <sync+0x90>
    2016:	a0 81       	ld	r26, Z
    2018:	b1 81       	ldd	r27, Z+1	; 0x01
    201a:	14 96       	adiw	r26, 0x04	; 4
    201c:	ed 91       	ld	r30, X+
    201e:	fc 91       	ld	r31, X
    2020:	15 97       	sbiw	r26, 0x05	; 5
    2022:	30 97       	sbiw	r30, 0x00	; 0
    2024:	c1 f7       	brne	.-16     	; 0x2016 <sync+0x26>
    2026:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    202a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    202e:	a2 17       	cp	r26, r18
    2030:	b3 07       	cpc	r27, r19
    2032:	11 f0       	breq	.+4      	; 0x2038 <sync+0x48>
    2034:	11 11       	cpse	r17, r1
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <sync+0x56>
    2038:	11 23       	and	r17, r17
    203a:	09 f4       	brne	.+2      	; 0x203e <sync+0x4e>
    203c:	4a c0       	rjmp	.+148    	; 0x20d2 <sync+0xe2>
    203e:	78 94       	sei
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	9f ef       	ldi	r25, 0xFF	; 255
    2044:	4e c0       	rjmp	.+156    	; 0x20e2 <sync+0xf2>
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	19 f0       	breq	.+6      	; 0x2054 <sync+0x64>
    204e:	fc 01       	movw	r30, r24
    2050:	15 82       	std	Z+5, r1	; 0x05
    2052:	14 82       	std	Z+4, r1	; 0x04
    2054:	3b 83       	std	Y+3, r19	; 0x03
    2056:	2a 83       	std	Y+2, r18	; 0x02
    2058:	f9 01       	movw	r30, r18
    205a:	d5 83       	std	Z+5, r29	; 0x05
    205c:	c4 83       	std	Z+4, r28	; 0x04
    205e:	cd 01       	movw	r24, r26
    2060:	0e 94 3d 05 	call	0xa7a	; 0xa7a <dispatch>
    2064:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2068:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	89 2b       	or	r24, r25
    2072:	31 f4       	brne	.+12     	; 0x2080 <sync+0x90>
    2074:	11 23       	and	r17, r17
    2076:	81 f1       	breq	.+96     	; 0x20d8 <sync+0xe8>
    2078:	78 94       	sei
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	31 c0       	rjmp	.+98     	; 0x20e2 <sync+0xf2>
    2080:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2084:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2088:	99 83       	std	Y+1, r25	; 0x01
    208a:	88 83       	st	Y, r24
    208c:	11 23       	and	r17, r17
    208e:	29 f0       	breq	.+10     	; 0x209a <sync+0xaa>
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	9b 81       	ldd	r25, Y+3	; 0x03
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	09 f0       	breq	.+2      	; 0x209a <sync+0xaa>
    2098:	78 94       	sei
    209a:	b6 01       	movw	r22, r12
    209c:	ce 01       	movw	r24, r28
    209e:	f7 01       	movw	r30, r14
    20a0:	09 95       	icall
    20a2:	f8 2e       	mov	r15, r24
    20a4:	09 2f       	mov	r16, r25
    20a6:	8f b7       	in	r24, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	19 82       	std	Y+1, r1	; 0x01
    20ac:	18 82       	st	Y, r1
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	9b 81       	ldd	r25, Y+3	; 0x03
    20b2:	82 30       	cpi	r24, 0x02	; 2
    20b4:	91 05       	cpc	r25, r1
    20b6:	38 f0       	brcs	.+14     	; 0x20c6 <sync+0xd6>
    20b8:	1b 82       	std	Y+3, r1	; 0x03
    20ba:	1a 82       	std	Y+2, r1	; 0x02
    20bc:	fc 01       	movw	r30, r24
    20be:	15 82       	std	Z+5, r1	; 0x05
    20c0:	14 82       	std	Z+4, r1	; 0x04
    20c2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <dispatch>
    20c6:	11 23       	and	r17, r17
    20c8:	51 f0       	breq	.+20     	; 0x20de <sync+0xee>
    20ca:	78 94       	sei
    20cc:	8f 2d       	mov	r24, r15
    20ce:	90 2f       	mov	r25, r16
    20d0:	08 c0       	rjmp	.+16     	; 0x20e2 <sync+0xf2>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	05 c0       	rjmp	.+10     	; 0x20e2 <sync+0xf2>
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <sync+0xf2>
    20de:	8f 2d       	mov	r24, r15
    20e0:	90 2f       	mov	r25, r16
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	08 95       	ret

000020f4 <run>:
    20f4:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    20f8:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    20fc:	84 e2       	ldi	r24, 0x24	; 36
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	0e 94 bf 05 	call	0xb7e	; 0xb7e <dequeue>
    2104:	ec 01       	movw	r28, r24
    2106:	f8 01       	movw	r30, r16
    2108:	93 83       	std	Z+3, r25	; 0x03
    210a:	82 83       	std	Z+2, r24	; 0x02
    210c:	78 94       	sei
    210e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2110:	7d 85       	ldd	r23, Y+13	; 0x0d
    2112:	4e 85       	ldd	r20, Y+14	; 0x0e
    2114:	5f 85       	ldd	r21, Y+15	; 0x0f
    2116:	8a 85       	ldd	r24, Y+10	; 0x0a
    2118:	9b 85       	ldd	r25, Y+11	; 0x0b
    211a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <sync>
    211e:	8f b7       	in	r24, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	66 e0       	ldi	r22, 0x06	; 6
    2124:	71 e0       	ldi	r23, 0x01	; 1
    2126:	ce 01       	movw	r24, r28
    2128:	0e 94 d6 05 	call	0xbac	; 0xbac <insert>
    212c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    2130:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    2134:	01 90       	ld	r0, Z+
    2136:	f0 81       	ld	r31, Z
    2138:	e0 2d       	mov	r30, r0
    213a:	c2 81       	ldd	r28, Z+2	; 0x02
    213c:	d3 81       	ldd	r29, Z+3	; 0x03
    213e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    2142:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    2146:	30 97       	sbiw	r30, 0x00	; 0
    2148:	a1 f0       	breq	.+40     	; 0x2172 <run+0x7e>
    214a:	20 97       	sbiw	r28, 0x00	; 0
    214c:	99 f2       	breq	.-90     	; 0x20f4 <run>
    214e:	86 81       	ldd	r24, Z+6	; 0x06
    2150:	97 81       	ldd	r25, Z+7	; 0x07
    2152:	a0 85       	ldd	r26, Z+8	; 0x08
    2154:	b1 85       	ldd	r27, Z+9	; 0x09
    2156:	4e 81       	ldd	r20, Y+6	; 0x06
    2158:	5f 81       	ldd	r21, Y+7	; 0x07
    215a:	68 85       	ldd	r22, Y+8	; 0x08
    215c:	79 85       	ldd	r23, Y+9	; 0x09
    215e:	84 1b       	sub	r24, r20
    2160:	95 0b       	sbc	r25, r21
    2162:	a6 0b       	sbc	r26, r22
    2164:	b7 0b       	sbc	r27, r23
    2166:	18 16       	cp	r1, r24
    2168:	19 06       	cpc	r1, r25
    216a:	1a 06       	cpc	r1, r26
    216c:	1b 06       	cpc	r1, r27
    216e:	0c f0       	brlt	.+2      	; 0x2172 <run+0x7e>
    2170:	c1 cf       	rjmp	.-126    	; 0x20f4 <run>
    2172:	82 e0       	ldi	r24, 0x02	; 2
    2174:	91 e0       	ldi	r25, 0x01	; 1
    2176:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pop>
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	71 e0       	ldi	r23, 0x01	; 1
    217e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <push>
    2182:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    2186:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <run+0x9c>
    218c:	a0 81       	ld	r26, Z
    218e:	b1 81       	ldd	r27, Z+1	; 0x01
    2190:	14 96       	adiw	r26, 0x04	; 4
    2192:	ed 91       	ld	r30, X+
    2194:	fc 91       	ld	r31, X
    2196:	15 97       	sbiw	r26, 0x05	; 5
    2198:	30 97       	sbiw	r30, 0x00	; 0
    219a:	c1 f7       	brne	.-16     	; 0x218c <run+0x98>
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 3d 05 	call	0xa7a	; 0xa7a <dispatch>
    21a2:	a8 cf       	rjmp	.-176    	; 0x20f4 <run>

000021a4 <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
    21a4:	cf 92       	push	r12
    21a6:	df 92       	push	r13
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    char status;
    Time now;
    DISABLE(status);
    21ac:	2f b7       	in	r18, 0x3f	; 63
    21ae:	20 78       	andi	r18, 0x80	; 128
    21b0:	f8 94       	cli
    TIMERGET(now);
    21b2:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
    21b6:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
    21ba:	ca 01       	movw	r24, r20
    21bc:	05 2e       	mov	r0, r21
    21be:	00 0c       	add	r0, r0
    21c0:	aa 0b       	sbc	r26, r26
    21c2:	bb 0b       	sbc	r27, r27
    21c4:	7c 01       	movw	r14, r24
    21c6:	dd 24       	eor	r13, r13
    21c8:	cc 24       	eor	r12, r12
    21ca:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21ce:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21d2:	a0 e0       	ldi	r26, 0x00	; 0
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	8c 29       	or	r24, r12
    21d8:	9d 29       	or	r25, r13
    21da:	ae 29       	or	r26, r14
    21dc:	bf 29       	or	r27, r15
    21de:	b0 9b       	sbis	0x16, 0	; 22
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <CURRENT_OFFSET+0x66>
    21e2:	ba 01       	movw	r22, r20
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	cb 01       	movw	r24, r22
    21ea:	77 0f       	add	r23, r23
    21ec:	aa 0b       	sbc	r26, r26
    21ee:	bb 0b       	sbc	r27, r27
    21f0:	bc 01       	movw	r22, r24
    21f2:	55 27       	eor	r21, r21
    21f4:	44 27       	eor	r20, r20
    21f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    21fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    21fe:	a0 e0       	ldi	r26, 0x00	; 0
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	84 2b       	or	r24, r20
    2204:	95 2b       	or	r25, r21
    2206:	a6 2b       	or	r26, r22
    2208:	b7 2b       	or	r27, r23
    ENABLE(status);
    220a:	22 23       	and	r18, r18
    220c:	09 f0       	breq	.+2      	; 0x2210 <CURRENT_OFFSET+0x6c>
    220e:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
    2210:	22 23       	and	r18, r18
    2212:	61 f0       	breq	.+24     	; 0x222c <CURRENT_OFFSET+0x88>
    2214:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2218:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    221c:	02 80       	ldd	r0, Z+2	; 0x02
    221e:	f3 81       	ldd	r31, Z+3	; 0x03
    2220:	e0 2d       	mov	r30, r0
    2222:	c2 80       	ldd	r12, Z+2	; 0x02
    2224:	d3 80       	ldd	r13, Z+3	; 0x03
    2226:	e4 80       	ldd	r14, Z+4	; 0x04
    2228:	f5 80       	ldd	r15, Z+5	; 0x05
    222a:	08 c0       	rjmp	.+16     	; 0x223c <CURRENT_OFFSET+0x98>
    222c:	c0 90 1e 01 	lds	r12, 0x011E	; 0x80011e <timestamp>
    2230:	d0 90 1f 01 	lds	r13, 0x011F	; 0x80011f <timestamp+0x1>
    2234:	e0 90 20 01 	lds	r14, 0x0120	; 0x800120 <timestamp+0x2>
    2238:	f0 90 21 01 	lds	r15, 0x0121	; 0x800121 <timestamp+0x3>
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	6c 19       	sub	r22, r12
    2242:	7d 09       	sbc	r23, r13
    2244:	8e 09       	sbc	r24, r14
    2246:	9f 09       	sbc	r25, r15
}
    2248:	ff 90       	pop	r15
    224a:	ef 90       	pop	r14
    224c:	df 90       	pop	r13
    224e:	cf 90       	pop	r12
    2250:	08 95       	ret

00002252 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    2252:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    2254:	42 31       	cpi	r20, 0x12	; 18
    2256:	b8 f4       	brcc	.+46     	; 0x2286 <install+0x34>
        char status;
        DISABLE(status);
    2258:	9f b7       	in	r25, 0x3f	; 63
    225a:	90 78       	andi	r25, 0x80	; 128
    225c:	f8 94       	cli
        otable[i] = obj;
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	44 0f       	add	r20, r20
    2262:	55 1f       	adc	r21, r21
    2264:	da 01       	movw	r26, r20
    2266:	aa 5d       	subi	r26, 0xDA	; 218
    2268:	be 4f       	sbci	r27, 0xFE	; 254
    226a:	ed 93       	st	X+, r30
    226c:	fc 93       	st	X, r31
        mtable[i] = m;
    226e:	da 01       	movw	r26, r20
    2270:	a2 54       	subi	r26, 0x42	; 66
    2272:	be 4f       	sbci	r27, 0xFE	; 254
    2274:	6d 93       	st	X+, r22
    2276:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	33 83       	std	Z+3, r19	; 0x03
    227e:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2280:	99 23       	and	r25, r25
    2282:	09 f0       	breq	.+2      	; 0x2286 <install+0x34>
    2284:	78 94       	sei
    2286:	08 95       	ret

00002288 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2288:	8c 01       	movw	r16, r24
    228a:	7b 01       	movw	r14, r22
    228c:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    228e:	8f b7       	in	r24, 0x3f	; 63
    2290:	f8 94       	cli
    initialize();
    2292:	0e 94 9e 04 	call	0x93c	; 0x93c <initialize>
    ENABLE(1);
    2296:	78 94       	sei
    if (m != NULL)
    2298:	e1 14       	cp	r14, r1
    229a:	f1 04       	cpc	r15, r1
    229c:	41 f0       	breq	.+16     	; 0x22ae <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	a9 01       	movw	r20, r18
    22a4:	60 e0       	ldi	r22, 0x00	; 0
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	cb 01       	movw	r24, r22
    22aa:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <async>
    DISABLE(status);
    22ae:	8f b7       	in	r24, 0x3f	; 63
    22b0:	f8 94       	cli
    idle();
    22b2:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <idle>

000022b6 <__divmodsi4>:
    22b6:	05 2e       	mov	r0, r21
    22b8:	97 fb       	bst	r25, 7
    22ba:	1e f4       	brtc	.+6      	; 0x22c2 <__divmodsi4+0xc>
    22bc:	00 94       	com	r0
    22be:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__negsi2>
    22c2:	57 fd       	sbrc	r21, 7
    22c4:	07 d0       	rcall	.+14     	; 0x22d4 <__divmodsi4_neg2>
    22c6:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <__udivmodsi4>
    22ca:	07 fc       	sbrc	r0, 7
    22cc:	03 d0       	rcall	.+6      	; 0x22d4 <__divmodsi4_neg2>
    22ce:	4e f4       	brtc	.+18     	; 0x22e2 <__divmodsi4_exit>
    22d0:	0c 94 72 11 	jmp	0x22e4	; 0x22e4 <__negsi2>

000022d4 <__divmodsi4_neg2>:
    22d4:	50 95       	com	r21
    22d6:	40 95       	com	r20
    22d8:	30 95       	com	r19
    22da:	21 95       	neg	r18
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	4f 4f       	sbci	r20, 0xFF	; 255
    22e0:	5f 4f       	sbci	r21, 0xFF	; 255

000022e2 <__divmodsi4_exit>:
    22e2:	08 95       	ret

000022e4 <__negsi2>:
    22e4:	90 95       	com	r25
    22e6:	80 95       	com	r24
    22e8:	70 95       	com	r23
    22ea:	61 95       	neg	r22
    22ec:	7f 4f       	sbci	r23, 0xFF	; 255
    22ee:	8f 4f       	sbci	r24, 0xFF	; 255
    22f0:	9f 4f       	sbci	r25, 0xFF	; 255
    22f2:	08 95       	ret

000022f4 <__udivmodsi4>:
    22f4:	a1 e2       	ldi	r26, 0x21	; 33
    22f6:	1a 2e       	mov	r1, r26
    22f8:	aa 1b       	sub	r26, r26
    22fa:	bb 1b       	sub	r27, r27
    22fc:	fd 01       	movw	r30, r26
    22fe:	0d c0       	rjmp	.+26     	; 0x231a <__udivmodsi4_ep>

00002300 <__udivmodsi4_loop>:
    2300:	aa 1f       	adc	r26, r26
    2302:	bb 1f       	adc	r27, r27
    2304:	ee 1f       	adc	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	a2 17       	cp	r26, r18
    230a:	b3 07       	cpc	r27, r19
    230c:	e4 07       	cpc	r30, r20
    230e:	f5 07       	cpc	r31, r21
    2310:	20 f0       	brcs	.+8      	; 0x231a <__udivmodsi4_ep>
    2312:	a2 1b       	sub	r26, r18
    2314:	b3 0b       	sbc	r27, r19
    2316:	e4 0b       	sbc	r30, r20
    2318:	f5 0b       	sbc	r31, r21

0000231a <__udivmodsi4_ep>:
    231a:	66 1f       	adc	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	1a 94       	dec	r1
    2324:	69 f7       	brne	.-38     	; 0x2300 <__udivmodsi4_loop>
    2326:	60 95       	com	r22
    2328:	70 95       	com	r23
    232a:	80 95       	com	r24
    232c:	90 95       	com	r25
    232e:	9b 01       	movw	r18, r22
    2330:	ac 01       	movw	r20, r24
    2332:	bd 01       	movw	r22, r26
    2334:	cf 01       	movw	r24, r30
    2336:	08 95       	ret

00002338 <setjmp>:
    2338:	dc 01       	movw	r26, r24
    233a:	2d 92       	st	X+, r2
    233c:	3d 92       	st	X+, r3
    233e:	4d 92       	st	X+, r4
    2340:	5d 92       	st	X+, r5
    2342:	6d 92       	st	X+, r6
    2344:	7d 92       	st	X+, r7
    2346:	8d 92       	st	X+, r8
    2348:	9d 92       	st	X+, r9
    234a:	ad 92       	st	X+, r10
    234c:	bd 92       	st	X+, r11
    234e:	cd 92       	st	X+, r12
    2350:	dd 92       	st	X+, r13
    2352:	ed 92       	st	X+, r14
    2354:	fd 92       	st	X+, r15
    2356:	0d 93       	st	X+, r16
    2358:	1d 93       	st	X+, r17
    235a:	cd 93       	st	X+, r28
    235c:	dd 93       	st	X+, r29
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	8d b7       	in	r24, 0x3d	; 61
    2364:	8d 93       	st	X+, r24
    2366:	8e b7       	in	r24, 0x3e	; 62
    2368:	8d 93       	st	X+, r24
    236a:	8f b7       	in	r24, 0x3f	; 63
    236c:	8d 93       	st	X+, r24
    236e:	ed 93       	st	X+, r30
    2370:	fd 93       	st	X+, r31
    2372:	88 27       	eor	r24, r24
    2374:	99 27       	eor	r25, r25
    2376:	09 94       	ijmp

00002378 <longjmp>:
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	81 1d       	adc	r24, r1
    2382:	2d 90       	ld	r2, X+
    2384:	3d 90       	ld	r3, X+
    2386:	4d 90       	ld	r4, X+
    2388:	5d 90       	ld	r5, X+
    238a:	6d 90       	ld	r6, X+
    238c:	7d 90       	ld	r7, X+
    238e:	8d 90       	ld	r8, X+
    2390:	9d 90       	ld	r9, X+
    2392:	ad 90       	ld	r10, X+
    2394:	bd 90       	ld	r11, X+
    2396:	cd 90       	ld	r12, X+
    2398:	dd 90       	ld	r13, X+
    239a:	ed 90       	ld	r14, X+
    239c:	fd 90       	ld	r15, X+
    239e:	0d 91       	ld	r16, X+
    23a0:	1d 91       	ld	r17, X+
    23a2:	cd 91       	ld	r28, X+
    23a4:	dd 91       	ld	r29, X+
    23a6:	ed 91       	ld	r30, X+
    23a8:	fd 91       	ld	r31, X+
    23aa:	0d 90       	ld	r0, X+
    23ac:	f8 94       	cli
    23ae:	fe bf       	out	0x3e, r31	; 62
    23b0:	0f be       	out	0x3f, r0	; 63
    23b2:	ed bf       	out	0x3d, r30	; 61
    23b4:	ed 91       	ld	r30, X+
    23b6:	fd 91       	ld	r31, X+
    23b8:	09 94       	ijmp

000023ba <_exit>:
    23ba:	f8 94       	cli

000023bc <__stop_program>:
    23bc:	ff cf       	rjmp	.-2      	; 0x23bc <__stop_program>
