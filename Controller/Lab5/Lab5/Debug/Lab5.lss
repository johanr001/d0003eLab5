
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000221c  000022b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000221c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800142  00800142  000022f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e6d  00000000  00000000  000025d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d1  00000000  00000000  00005441  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016ab  00000000  00000000  00006512  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c5c  00000000  00000000  00007bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d6  00000000  00000000  0000881c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002912  00000000  00000000  000091f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  0000bb04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_1>
       8:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_2>
       c:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <__vector_3>
      10:	0c 94 fb 06 	jmp	0xdf6	; 0xdf6 <__vector_4>
      14:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 83 0d 	jmp	0x1b06	; 0x1b06 <__vector_9>
      28:	0c 94 d9 07 	jmp	0xfb2	; 0xfb2 <__vector_10>
      2c:	0c 94 48 08 	jmp	0x1090	; 0x1090 <__vector_11>
      30:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__vector_12>
      34:	0c 94 26 09 	jmp	0x124c	; 0x124c <__vector_13>
      38:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_14>
      3c:	0c 94 04 0a 	jmp	0x1408	; 0x1408 <__vector_15>
      40:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_16>
      44:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__vector_17>
      48:	0c 94 51 0b 	jmp	0x16a2	; 0x16a2 <__vector_18>
      4c:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__vector_19>
      50:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_20>
      54:	0c 94 9e 0c 	jmp	0x193c	; 0x193c <__vector_21>
      58:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ec e1       	ldi	r30, 0x1C	; 28
      70:	f2 e2       	ldi	r31, 0x22	; 34
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 34       	cpi	r26, 0x42	; 66
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e4       	ldi	r26, 0x42	; 66
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 39       	cpi	r26, 0x99	; 153
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 07 04 	call	0x80e	; 0x80e <main>
      92:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <avr_init>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

void avr_init() {
    // Set clock prescaler to 1 (8 MHz)
    CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
    CLKPR = 0x00;
      a2:	10 82       	st	Z, r1
    // Timer1 config: CTC or normal? In TinyTimber, Timer1 is used internally,
    // so we only set up a base prescaler or skip, depending on your usage.
    // Done inside TinyTimber anyway, so no further changes needed here.

    // Set up UART0 with 9600 baud, 8N1.
    UBRR0H = (unsigned char)(MYUBRR >> 8);
      a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
    UBRR0L = (unsigned char)MYUBRR;
      a8:	8f ef       	ldi	r24, 0xFF	; 255
      aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>

    // Enable TX, RX, and RX interrupt
    UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
      ae:	88 e9       	ldi	r24, 0x98	; 152
      b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
    // 8 data bits, 1 stop bit
    UCSR0C = (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
      b4:	86 e0       	ldi	r24, 0x06	; 6
      b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
      ba:	08 95       	ret

000000bc <LampController>:
}

// ---------------------------------------------------------------------------
// LampController: Figures out which side to show green, if any
// ---------------------------------------------------------------------------
int LampController(Controller *self, int arg) {
      bc:	cf 92       	push	r12
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
	// If the bridge is not empty, we might want to keep the “active” side green
	// so more cars can keep entering from that side. But your code forced all red
	// if BridgeAmount>0. Let's do something different:
	if (self->BridgeAmount > 0) {
      c8:	fc 01       	movw	r30, r24
      ca:	46 85       	ldd	r20, Z+14	; 0x0e
      cc:	57 85       	ldd	r21, Z+15	; 0x0f
      ce:	60 89       	ldd	r22, Z+16	; 0x10
      d0:	71 89       	ldd	r23, Z+17	; 0x11
      d2:	45 2b       	or	r20, r21
      d4:	46 2b       	or	r20, r22
      d6:	47 2b       	or	r20, r23
      d8:	09 f0       	breq	.+2      	; 0xdc <LampController+0x20>
      da:	ec c0       	rjmp	.+472    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		// If we forced a gap, do nothing. Otherwise, keep whichever side was green
		return 0;
	}

	// At this point, the bridge is empty => we can choose which side to let in
	unsigned long NQ = self->NorthQueue;
      dc:	86 81       	ldd	r24, Z+6	; 0x06
      de:	97 81       	ldd	r25, Z+7	; 0x07
      e0:	a0 85       	ldd	r26, Z+8	; 0x08
      e2:	b1 85       	ldd	r27, Z+9	; 0x09
	unsigned long SQ = self->SouthQueue;
      e4:	42 85       	ldd	r20, Z+10	; 0x0a
      e6:	53 85       	ldd	r21, Z+11	; 0x0b
      e8:	64 85       	ldd	r22, Z+12	; 0x0c
      ea:	75 85       	ldd	r23, Z+13	; 0x0d

	// If nothing is waiting, set all red
	if (NQ == 0 && SQ == 0) {
      ec:	00 97       	sbiw	r24, 0x00	; 0
      ee:	a1 05       	cpc	r26, r1
      f0:	b1 05       	cpc	r27, r1
      f2:	29 f5       	brne	.+74     	; 0x13e <LampController+0x82>
      f4:	41 15       	cp	r20, r1
      f6:	51 05       	cpc	r21, r1
      f8:	61 05       	cpc	r22, r1
      fa:	71 05       	cpc	r23, r1
      fc:	01 f5       	brne	.+64     	; 0x13e <LampController+0x82>
		self->BridgePassedSameDir = 0;  // reset
      fe:	13 8a       	std	Z+19, r1	; 0x13
     100:	14 8a       	std	Z+20, r1	; 0x14
     102:	15 8a       	std	Z+21, r1	; 0x15
     104:	16 8a       	std	Z+22, r1	; 0x16
		if (self->LightStatus != NORTHRED_SOUTHRED) {
     106:	82 89       	ldd	r24, Z+18	; 0x12
     108:	8a 30       	cpi	r24, 0x0A	; 10
     10a:	09 f4       	brne	.+2      	; 0x10e <LampController+0x52>
     10c:	d3 c0       	rjmp	.+422    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			self->LightStatus = NORTHRED_SOUTHRED;
     10e:	8a e0       	ldi	r24, 0x0A	; 10
     110:	82 8b       	std	Z+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHRED);
     112:	04 81       	ldd	r16, Z+4	; 0x04
     114:	15 81       	ldd	r17, Z+5	; 0x05
     116:	0f 2e       	mov	r0, r31
     118:	fa e0       	ldi	r31, 0x0A	; 10
     11a:	cf 2e       	mov	r12, r31
     11c:	d1 2c       	mov	r13, r1
     11e:	f0 2d       	mov	r31, r0
     120:	0f 2e       	mov	r0, r31
     122:	fb e1       	ldi	r31, 0x1B	; 27
     124:	ef 2e       	mov	r14, r31
     126:	f4 e0       	ldi	r31, 0x04	; 4
     128:	ff 2e       	mov	r15, r31
     12a:	f0 2d       	mov	r31, r0
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	a9 01       	movw	r20, r18
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	cb 01       	movw	r24, r22
     138:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
     13c:	bb c0       	rjmp	.+374    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		}
		return 0;
	}

	// If only north has cars
	if (NQ > 0 && SQ == 0) {
     13e:	00 97       	sbiw	r24, 0x00	; 0
     140:	a1 05       	cpc	r26, r1
     142:	b1 05       	cpc	r27, r1
     144:	09 f1       	breq	.+66     	; 0x188 <LampController+0xcc>
     146:	41 15       	cp	r20, r1
     148:	51 05       	cpc	r21, r1
     14a:	61 05       	cpc	r22, r1
     14c:	71 05       	cpc	r23, r1
     14e:	e1 f4       	brne	.+56     	; 0x188 <LampController+0xcc>
		// Just show north green
		if (self->LightStatus != NORTHGREEN_SOUTHRED) {
     150:	82 89       	ldd	r24, Z+18	; 0x12
     152:	89 30       	cpi	r24, 0x09	; 9
     154:	09 f4       	brne	.+2      	; 0x158 <LampController+0x9c>
     156:	ae c0       	rjmp	.+348    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			self->LightStatus = NORTHGREEN_SOUTHRED;
     158:	89 e0       	ldi	r24, 0x09	; 9
     15a:	82 8b       	std	Z+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHGREEN_SOUTHRED);
     15c:	04 81       	ldd	r16, Z+4	; 0x04
     15e:	15 81       	ldd	r17, Z+5	; 0x05
     160:	0f 2e       	mov	r0, r31
     162:	f9 e0       	ldi	r31, 0x09	; 9
     164:	cf 2e       	mov	r12, r31
     166:	d1 2c       	mov	r13, r1
     168:	f0 2d       	mov	r31, r0
     16a:	0f 2e       	mov	r0, r31
     16c:	fb e1       	ldi	r31, 0x1B	; 27
     16e:	ef 2e       	mov	r14, r31
     170:	f4 e0       	ldi	r31, 0x04	; 4
     172:	ff 2e       	mov	r15, r31
     174:	f0 2d       	mov	r31, r0
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	a9 01       	movw	r20, r18
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	cb 01       	movw	r24, r22
     182:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
     186:	96 c0       	rjmp	.+300    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		}
		return 0;
	}

	// If only south has cars
	if (SQ > 0 && NQ == 0) {
     188:	41 15       	cp	r20, r1
     18a:	51 05       	cpc	r21, r1
     18c:	61 05       	cpc	r22, r1
     18e:	71 05       	cpc	r23, r1
     190:	01 f1       	breq	.+64     	; 0x1d2 <LampController+0x116>
     192:	00 97       	sbiw	r24, 0x00	; 0
     194:	a1 05       	cpc	r26, r1
     196:	b1 05       	cpc	r27, r1
     198:	e1 f4       	brne	.+56     	; 0x1d2 <LampController+0x116>
		// Just show south green
		if (self->LightStatus != NORTHRED_SOUTHGREEN) {
     19a:	82 89       	ldd	r24, Z+18	; 0x12
     19c:	86 30       	cpi	r24, 0x06	; 6
     19e:	09 f4       	brne	.+2      	; 0x1a2 <LampController+0xe6>
     1a0:	89 c0       	rjmp	.+274    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			self->LightStatus = NORTHRED_SOUTHGREEN;
     1a2:	86 e0       	ldi	r24, 0x06	; 6
     1a4:	82 8b       	std	Z+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHGREEN);
     1a6:	04 81       	ldd	r16, Z+4	; 0x04
     1a8:	15 81       	ldd	r17, Z+5	; 0x05
     1aa:	0f 2e       	mov	r0, r31
     1ac:	f6 e0       	ldi	r31, 0x06	; 6
     1ae:	cf 2e       	mov	r12, r31
     1b0:	d1 2c       	mov	r13, r1
     1b2:	f0 2d       	mov	r31, r0
     1b4:	0f 2e       	mov	r0, r31
     1b6:	fb e1       	ldi	r31, 0x1B	; 27
     1b8:	ef 2e       	mov	r14, r31
     1ba:	f4 e0       	ldi	r31, 0x04	; 4
     1bc:	ff 2e       	mov	r15, r31
     1be:	f0 2d       	mov	r31, r0
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	a9 01       	movw	r20, r18
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	70 e0       	ldi	r23, 0x00	; 0
     1ca:	cb 01       	movw	r24, r22
     1cc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
     1d0:	71 c0       	rjmp	.+226    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		}
		return 0;
	}

	// If both sides have queued cars => check for possible “starvation.”
	if (self->BridgePassedSameDir >= MAX_PASS_SAME_SIDE) {
     1d2:	03 89       	ldd	r16, Z+19	; 0x13
     1d4:	14 89       	ldd	r17, Z+20	; 0x14
     1d6:	25 89       	ldd	r18, Z+21	; 0x15
     1d8:	36 89       	ldd	r19, Z+22	; 0x16
     1da:	04 30       	cpi	r16, 0x04	; 4
     1dc:	11 05       	cpc	r17, r1
     1de:	21 05       	cpc	r18, r1
     1e0:	31 05       	cpc	r19, r1
     1e2:	80 f1       	brcs	.+96     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
		// Force a switch if there's a queue on the other side
		self->BridgePassedSameDir = 0;  // reset count
     1e4:	13 8a       	std	Z+19, r1	; 0x13
     1e6:	14 8a       	std	Z+20, r1	; 0x14
     1e8:	15 8a       	std	Z+21, r1	; 0x15
     1ea:	16 8a       	std	Z+22, r1	; 0x16
		if (self->lastBridgeDir && SQ > 0) {
     1ec:	27 89       	ldd	r18, Z+23	; 0x17
     1ee:	22 23       	and	r18, r18
     1f0:	39 f0       	breq	.+14     	; 0x200 <__EEPROM_REGION_LENGTH__>
     1f2:	45 2b       	or	r20, r21
     1f4:	46 2b       	or	r20, r22
     1f6:	47 2b       	or	r20, r23
     1f8:	19 f0       	breq	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__>
			// We last passed north, but we want to let south go now
			self->LightStatus = NORTHRED_SOUTHGREEN;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	82 8b       	std	Z+18, r24	; 0x12
     1fe:	0f c0       	rjmp	.+30     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
			} else if (!self->lastBridgeDir && NQ > 0) {
     200:	21 11       	cpse	r18, r1
     202:	07 c0       	rjmp	.+14     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
     204:	89 2b       	or	r24, r25
     206:	8a 2b       	or	r24, r26
     208:	8b 2b       	or	r24, r27
     20a:	19 f0       	breq	.+6      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
			// We last passed south, let north go
			self->LightStatus = NORTHGREEN_SOUTHRED;
     20c:	89 e0       	ldi	r24, 0x09	; 9
     20e:	82 8b       	std	Z+18, r24	; 0x12
     210:	06 c0       	rjmp	.+12     	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
			} else {
			// If there's some mismatch, pick either side
			self->LightStatus = (self->lastBridgeDir) ? NORTHGREEN_SOUTHRED : NORTHRED_SOUTHGREEN;
     212:	22 23       	and	r18, r18
     214:	11 f0       	breq	.+4      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
     216:	89 e0       	ldi	r24, 0x09	; 9
     218:	01 c0       	rjmp	.+2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
     21a:	86 e0       	ldi	r24, 0x06	; 6
     21c:	82 8b       	std	Z+18, r24	; 0x12
		}
		ASYNC(self->serialCom, USARTtransmit, self->LightStatus);
     21e:	c2 88       	ldd	r12, Z+18	; 0x12
     220:	04 81       	ldd	r16, Z+4	; 0x04
     222:	15 81       	ldd	r17, Z+5	; 0x05
     224:	d1 2c       	mov	r13, r1
     226:	0f 2e       	mov	r0, r31
     228:	fb e1       	ldi	r31, 0x1B	; 27
     22a:	ef 2e       	mov	r14, r31
     22c:	f4 e0       	ldi	r31, 0x04	; 4
     22e:	ff 2e       	mov	r15, r31
     230:	f0 2d       	mov	r31, r0
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	a9 01       	movw	r20, r18
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	cb 01       	movw	r24, r22
     23e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
		return 0;
     242:	38 c0       	rjmp	.+112    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
	}

	// If no starvation, pick side that queued last
	if (self->lastQueueSensor) {
     244:	80 8d       	ldd	r24, Z+24	; 0x18
     246:	88 23       	and	r24, r24
     248:	d9 f0       	breq	.+54     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
		// last arrival was north
		if (self->LightStatus != NORTHGREEN_SOUTHRED) {
     24a:	82 89       	ldd	r24, Z+18	; 0x12
     24c:	89 30       	cpi	r24, 0x09	; 9
     24e:	91 f1       	breq	.+100    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			self->LightStatus = NORTHGREEN_SOUTHRED;
     250:	89 e0       	ldi	r24, 0x09	; 9
     252:	82 8b       	std	Z+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHGREEN_SOUTHRED);
     254:	04 81       	ldd	r16, Z+4	; 0x04
     256:	15 81       	ldd	r17, Z+5	; 0x05
     258:	0f 2e       	mov	r0, r31
     25a:	f9 e0       	ldi	r31, 0x09	; 9
     25c:	cf 2e       	mov	r12, r31
     25e:	d1 2c       	mov	r13, r1
     260:	f0 2d       	mov	r31, r0
     262:	0f 2e       	mov	r0, r31
     264:	fb e1       	ldi	r31, 0x1B	; 27
     266:	ef 2e       	mov	r14, r31
     268:	f4 e0       	ldi	r31, 0x04	; 4
     26a:	ff 2e       	mov	r15, r31
     26c:	f0 2d       	mov	r31, r0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	cb 01       	movw	r24, r22
     27a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
     27e:	1a c0       	rjmp	.+52     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
		}
		} else {
		// last arrival was south
		if (self->LightStatus != NORTHRED_SOUTHGREEN) {
     280:	82 89       	ldd	r24, Z+18	; 0x12
     282:	86 30       	cpi	r24, 0x06	; 6
     284:	b9 f0       	breq	.+46     	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
			self->LightStatus = NORTHRED_SOUTHGREEN;
     286:	86 e0       	ldi	r24, 0x06	; 6
     288:	82 8b       	std	Z+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHGREEN);
     28a:	04 81       	ldd	r16, Z+4	; 0x04
     28c:	15 81       	ldd	r17, Z+5	; 0x05
     28e:	0f 2e       	mov	r0, r31
     290:	f6 e0       	ldi	r31, 0x06	; 6
     292:	cf 2e       	mov	r12, r31
     294:	d1 2c       	mov	r13, r1
     296:	f0 2d       	mov	r31, r0
     298:	0f 2e       	mov	r0, r31
     29a:	fb e1       	ldi	r31, 0x1B	; 27
     29c:	ef 2e       	mov	r14, r31
     29e:	f4 e0       	ldi	r31, 0x04	; 4
     2a0:	ff 2e       	mov	r15, r31
     2a2:	f0 2d       	mov	r31, r0
     2a4:	20 e0       	ldi	r18, 0x00	; 0
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	a9 01       	movw	r20, r18
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	cb 01       	movw	r24, r22
     2b0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
		}
	}
	return 0;
}
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	1f 91       	pop	r17
     2ba:	0f 91       	pop	r16
     2bc:	ff 90       	pop	r15
     2be:	ef 90       	pop	r14
     2c0:	df 90       	pop	r13
     2c2:	cf 90       	pop	r12
     2c4:	08 95       	ret

000002c6 <sensorEvent>:


// ---------------------------------------------------------------------------
// sensorEvent: Called whenever the controller receives a sensor byte
// ---------------------------------------------------------------------------
int sensorEvent(Controller *self, int sensorData) {
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ec 01       	movw	r28, r24
     2da:	b6 2e       	mov	r11, r22
	// ARRIVALS
	if (sensorData & NORTH_ARRIVAL) {
     2dc:	60 ff       	sbrs	r22, 0
     2de:	0d c0       	rjmp	.+26     	; 0x2fa <sensorEvent+0x34>
		self->NorthQueue++;
     2e0:	8e 81       	ldd	r24, Y+6	; 0x06
     2e2:	9f 81       	ldd	r25, Y+7	; 0x07
     2e4:	a8 85       	ldd	r26, Y+8	; 0x08
     2e6:	b9 85       	ldd	r27, Y+9	; 0x09
     2e8:	01 96       	adiw	r24, 0x01	; 1
     2ea:	a1 1d       	adc	r26, r1
     2ec:	b1 1d       	adc	r27, r1
     2ee:	8e 83       	std	Y+6, r24	; 0x06
     2f0:	9f 83       	std	Y+7, r25	; 0x07
     2f2:	a8 87       	std	Y+8, r26	; 0x08
     2f4:	b9 87       	std	Y+9, r27	; 0x09
		self->lastQueueSensor = true;   // last queue side was north
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (sensorData & SOUTH_ARRIVAL) {
     2fa:	b2 fe       	sbrs	r11, 2
     2fc:	0c c0       	rjmp	.+24     	; 0x316 <sensorEvent+0x50>
		self->SouthQueue++;
     2fe:	8a 85       	ldd	r24, Y+10	; 0x0a
     300:	9b 85       	ldd	r25, Y+11	; 0x0b
     302:	ac 85       	ldd	r26, Y+12	; 0x0c
     304:	bd 85       	ldd	r27, Y+13	; 0x0d
     306:	01 96       	adiw	r24, 0x01	; 1
     308:	a1 1d       	adc	r26, r1
     30a:	b1 1d       	adc	r27, r1
     30c:	8a 87       	std	Y+10, r24	; 0x0a
     30e:	9b 87       	std	Y+11, r25	; 0x0b
     310:	ac 87       	std	Y+12, r26	; 0x0c
     312:	bd 87       	std	Y+13, r27	; 0x0d
		self->lastQueueSensor = false;  // last queue side was south
     314:	18 8e       	std	Y+24, r1	; 0x18
	}

	// ENTRIES
	if (sensorData & NORTH_ENTRY) {
     316:	b1 fe       	sbrs	r11, 1
     318:	66 c0       	rjmp	.+204    	; 0x3e6 <sensorEvent+0x120>
		// only valid if we are currently showing north green
		if (self->LightStatus & NORTH_GREEN) {
     31a:	8a 89       	ldd	r24, Y+18	; 0x12
     31c:	80 ff       	sbrs	r24, 0
     31e:	63 c0       	rjmp	.+198    	; 0x3e6 <sensorEvent+0x120>
			if (self->NorthQueue > 0) {
     320:	8e 81       	ldd	r24, Y+6	; 0x06
     322:	9f 81       	ldd	r25, Y+7	; 0x07
     324:	a8 85       	ldd	r26, Y+8	; 0x08
     326:	b9 85       	ldd	r27, Y+9	; 0x09
     328:	00 97       	sbiw	r24, 0x00	; 0
     32a:	a1 05       	cpc	r26, r1
     32c:	b1 05       	cpc	r27, r1
     32e:	39 f0       	breq	.+14     	; 0x33e <sensorEvent+0x78>
				self->NorthQueue--;
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	a1 09       	sbc	r26, r1
     334:	b1 09       	sbc	r27, r1
     336:	8e 83       	std	Y+6, r24	; 0x06
     338:	9f 83       	std	Y+7, r25	; 0x07
     33a:	a8 87       	std	Y+8, r26	; 0x08
     33c:	b9 87       	std	Y+9, r27	; 0x09
			}
			self->BridgeAmount++;
     33e:	8e 85       	ldd	r24, Y+14	; 0x0e
     340:	9f 85       	ldd	r25, Y+15	; 0x0f
     342:	a8 89       	ldd	r26, Y+16	; 0x10
     344:	b9 89       	ldd	r27, Y+17	; 0x11
     346:	01 96       	adiw	r24, 0x01	; 1
     348:	a1 1d       	adc	r26, r1
     34a:	b1 1d       	adc	r27, r1
     34c:	8e 87       	std	Y+14, r24	; 0x0e
     34e:	9f 87       	std	Y+15, r25	; 0x0f
     350:	a8 8b       	std	Y+16, r26	; 0x10
     352:	b9 8b       	std	Y+17, r27	; 0x11
			self->BridgePassedSameDir++;
     354:	8b 89       	ldd	r24, Y+19	; 0x13
     356:	9c 89       	ldd	r25, Y+20	; 0x14
     358:	ad 89       	ldd	r26, Y+21	; 0x15
     35a:	be 89       	ldd	r27, Y+22	; 0x16
     35c:	01 96       	adiw	r24, 0x01	; 1
     35e:	a1 1d       	adc	r26, r1
     360:	b1 1d       	adc	r27, r1
     362:	8b 8b       	std	Y+19, r24	; 0x13
     364:	9c 8b       	std	Y+20, r25	; 0x14
     366:	ad 8b       	std	Y+21, r26	; 0x15
     368:	be 8b       	std	Y+22, r27	; 0x16
			self->lastBridgeDir = true;   // just passed a north car
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	8f 8b       	std	Y+23, r24	; 0x17

			// schedule the car to leave after 5 seconds
			AFTER(MSEC(BRIDGE_TIME_MS), self, carLeavesBridge, 1);
     36e:	cc 24       	eor	r12, r12
     370:	c3 94       	inc	r12
     372:	d1 2c       	mov	r13, r1
     374:	0f 2e       	mov	r0, r31
     376:	ff e6       	ldi	r31, 0x6F	; 111
     378:	ef 2e       	mov	r14, r31
     37a:	f2 e0       	ldi	r31, 0x02	; 2
     37c:	ff 2e       	mov	r15, r31
     37e:	f0 2d       	mov	r31, r0
     380:	8e 01       	movw	r16, r28
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	a9 01       	movw	r20, r18
     388:	6a e5       	ldi	r22, 0x5A	; 90
     38a:	72 e6       	ldi	r23, 0x62	; 98
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>

			// briefly force all red, then re-check lamps
			self->LightStatus = NORTHRED_SOUTHRED;
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	8a 8b       	std	Y+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHRED);
     398:	0c 81       	ldd	r16, Y+4	; 0x04
     39a:	1d 81       	ldd	r17, Y+5	; 0x05
     39c:	0f 2e       	mov	r0, r31
     39e:	fa e0       	ldi	r31, 0x0A	; 10
     3a0:	cf 2e       	mov	r12, r31
     3a2:	d1 2c       	mov	r13, r1
     3a4:	f0 2d       	mov	r31, r0
     3a6:	0f 2e       	mov	r0, r31
     3a8:	fb e1       	ldi	r31, 0x1B	; 27
     3aa:	ef 2e       	mov	r14, r31
     3ac:	f4 e0       	ldi	r31, 0x04	; 4
     3ae:	ff 2e       	mov	r15, r31
     3b0:	f0 2d       	mov	r31, r0
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	a9 01       	movw	r20, r18
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	cb 01       	movw	r24, r22
     3be:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
			AFTER(MSEC(ALL_RED_GAP_MS), self, afterRedGap, 0);
     3c2:	c1 2c       	mov	r12, r1
     3c4:	d1 2c       	mov	r13, r1
     3c6:	0f 2e       	mov	r0, r31
     3c8:	fa e6       	ldi	r31, 0x6A	; 106
     3ca:	ef 2e       	mov	r14, r31
     3cc:	f2 e0       	ldi	r31, 0x02	; 2
     3ce:	ff 2e       	mov	r15, r31
     3d0:	f0 2d       	mov	r31, r0
     3d2:	8e 01       	movw	r16, r28
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	a9 01       	movw	r20, r18
     3da:	62 e1       	ldi	r22, 0x12	; 18
     3dc:	7a e7       	ldi	r23, 0x7A	; 122
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
		}
	}
	if (sensorData & SOUTH_ENTRY) {
     3e6:	b3 fe       	sbrs	r11, 3
     3e8:	64 c0       	rjmp	.+200    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		// only valid if we are currently showing south green
		if (self->LightStatus & SOUTH_GREEN) {
     3ea:	8a 89       	ldd	r24, Y+18	; 0x12
     3ec:	82 ff       	sbrs	r24, 2
     3ee:	61 c0       	rjmp	.+194    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
			if (self->SouthQueue > 0) {
     3f0:	8a 85       	ldd	r24, Y+10	; 0x0a
     3f2:	9b 85       	ldd	r25, Y+11	; 0x0b
     3f4:	ac 85       	ldd	r26, Y+12	; 0x0c
     3f6:	bd 85       	ldd	r27, Y+13	; 0x0d
     3f8:	00 97       	sbiw	r24, 0x00	; 0
     3fa:	a1 05       	cpc	r26, r1
     3fc:	b1 05       	cpc	r27, r1
     3fe:	39 f0       	breq	.+14     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
				self->SouthQueue--;
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	a1 09       	sbc	r26, r1
     404:	b1 09       	sbc	r27, r1
     406:	8a 87       	std	Y+10, r24	; 0x0a
     408:	9b 87       	std	Y+11, r25	; 0x0b
     40a:	ac 87       	std	Y+12, r26	; 0x0c
     40c:	bd 87       	std	Y+13, r27	; 0x0d
			}
			self->BridgeAmount++;
     40e:	8e 85       	ldd	r24, Y+14	; 0x0e
     410:	9f 85       	ldd	r25, Y+15	; 0x0f
     412:	a8 89       	ldd	r26, Y+16	; 0x10
     414:	b9 89       	ldd	r27, Y+17	; 0x11
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	a1 1d       	adc	r26, r1
     41a:	b1 1d       	adc	r27, r1
     41c:	8e 87       	std	Y+14, r24	; 0x0e
     41e:	9f 87       	std	Y+15, r25	; 0x0f
     420:	a8 8b       	std	Y+16, r26	; 0x10
     422:	b9 8b       	std	Y+17, r27	; 0x11
			self->BridgePassedSameDir++;
     424:	8b 89       	ldd	r24, Y+19	; 0x13
     426:	9c 89       	ldd	r25, Y+20	; 0x14
     428:	ad 89       	ldd	r26, Y+21	; 0x15
     42a:	be 89       	ldd	r27, Y+22	; 0x16
     42c:	01 96       	adiw	r24, 0x01	; 1
     42e:	a1 1d       	adc	r26, r1
     430:	b1 1d       	adc	r27, r1
     432:	8b 8b       	std	Y+19, r24	; 0x13
     434:	9c 8b       	std	Y+20, r25	; 0x14
     436:	ad 8b       	std	Y+21, r26	; 0x15
     438:	be 8b       	std	Y+22, r27	; 0x16
			self->lastBridgeDir = false;  // just passed a south car
     43a:	1f 8a       	std	Y+23, r1	; 0x17

			// schedule the car to leave after 5 seconds
			AFTER(MSEC(BRIDGE_TIME_MS), self, carLeavesBridge, 0);
     43c:	c1 2c       	mov	r12, r1
     43e:	d1 2c       	mov	r13, r1
     440:	0f 2e       	mov	r0, r31
     442:	ff e6       	ldi	r31, 0x6F	; 111
     444:	ef 2e       	mov	r14, r31
     446:	f2 e0       	ldi	r31, 0x02	; 2
     448:	ff 2e       	mov	r15, r31
     44a:	f0 2d       	mov	r31, r0
     44c:	8e 01       	movw	r16, r28
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	6a e5       	ldi	r22, 0x5A	; 90
     456:	72 e6       	ldi	r23, 0x62	; 98
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>

			// briefly force all red, then re-check lamps
			self->LightStatus = NORTHRED_SOUTHRED;
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	8a 8b       	std	Y+18, r24	; 0x12
			ASYNC(self->serialCom, USARTtransmit, NORTHRED_SOUTHRED);
     464:	0c 81       	ldd	r16, Y+4	; 0x04
     466:	1d 81       	ldd	r17, Y+5	; 0x05
     468:	0f 2e       	mov	r0, r31
     46a:	fa e0       	ldi	r31, 0x0A	; 10
     46c:	cf 2e       	mov	r12, r31
     46e:	d1 2c       	mov	r13, r1
     470:	f0 2d       	mov	r31, r0
     472:	0f 2e       	mov	r0, r31
     474:	fb e1       	ldi	r31, 0x1B	; 27
     476:	ef 2e       	mov	r14, r31
     478:	f4 e0       	ldi	r31, 0x04	; 4
     47a:	ff 2e       	mov	r15, r31
     47c:	f0 2d       	mov	r31, r0
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	a9 01       	movw	r20, r18
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	cb 01       	movw	r24, r22
     48a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
			AFTER(MSEC(ALL_RED_GAP_MS), self, afterRedGap, 0);
     48e:	c1 2c       	mov	r12, r1
     490:	d1 2c       	mov	r13, r1
     492:	0f 2e       	mov	r0, r31
     494:	fa e6       	ldi	r31, 0x6A	; 106
     496:	ef 2e       	mov	r14, r31
     498:	f2 e0       	ldi	r31, 0x02	; 2
     49a:	ff 2e       	mov	r15, r31
     49c:	f0 2d       	mov	r31, r0
     49e:	8e 01       	movw	r16, r28
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	a9 01       	movw	r20, r18
     4a6:	62 e1       	ldi	r22, 0x12	; 18
     4a8:	7a e7       	ldi	r23, 0x7A	; 122
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
		}
	}

	// After processing sensor data, recalc the lamps
	LampController(self, 0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	ce 01       	movw	r24, r28
     4b8:	0e 94 5e 00 	call	0xbc	; 0xbc <LampController>
	return 0;
}
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	08 95       	ret

000004d4 <afterRedGap>:
// afterRedGap: Called after the 1-second all-red gap
// ---------------------------------------------------------------------------
int afterRedGap(Controller *self, int arg) {
	// Re-check the lamps. If the bridge is still not empty, we might
	// keep the same side or do some other policy. We'll see below.
	return LampController(self, 0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	0e 94 5e 00 	call	0xbc	; 0xbc <LampController>
}
     4dc:	08 95       	ret

000004de <carLeavesBridge>:

// ---------------------------------------------------------------------------
// carLeavesBridge: Called 5 seconds after a car enters
// ---------------------------------------------------------------------------
int carLeavesBridge(Controller *self, int direction) {
	if (self->BridgeAmount > 0) {
     4de:	fc 01       	movw	r30, r24
     4e0:	46 85       	ldd	r20, Z+14	; 0x0e
     4e2:	57 85       	ldd	r21, Z+15	; 0x0f
     4e4:	60 89       	ldd	r22, Z+16	; 0x10
     4e6:	71 89       	ldd	r23, Z+17	; 0x11
     4e8:	41 15       	cp	r20, r1
     4ea:	51 05       	cpc	r21, r1
     4ec:	61 05       	cpc	r22, r1
     4ee:	71 05       	cpc	r23, r1
     4f0:	41 f0       	breq	.+16     	; 0x502 <__stack+0x3>
		self->BridgeAmount--;
     4f2:	41 50       	subi	r20, 0x01	; 1
     4f4:	51 09       	sbc	r21, r1
     4f6:	61 09       	sbc	r22, r1
     4f8:	71 09       	sbc	r23, r1
     4fa:	46 87       	std	Z+14, r20	; 0x0e
     4fc:	57 87       	std	Z+15, r21	; 0x0f
     4fe:	60 8b       	std	Z+16, r22	; 0x10
     500:	71 8b       	std	Z+17, r23	; 0x11
	}
	// Re-check lights
	LampController(self, 0);
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	0e 94 5e 00 	call	0xbc	; 0xbc <LampController>
	return 0;
}
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	08 95       	ret

00000510 <getNorthQueue>:
// ---------------------------------------------------------------------------
// Simple getters used by GUI
// ---------------------------------------------------------------------------
int getNorthQueue(Controller *self, int unused) {
	return self->NorthQueue;
}
     510:	fc 01       	movw	r30, r24
     512:	86 81       	ldd	r24, Z+6	; 0x06
     514:	97 81       	ldd	r25, Z+7	; 0x07
     516:	08 95       	ret

00000518 <getSouthQueue>:
int getSouthQueue(Controller *self, int unused) {
	return self->SouthQueue;
}
     518:	fc 01       	movw	r30, r24
     51a:	82 85       	ldd	r24, Z+10	; 0x0a
     51c:	93 85       	ldd	r25, Z+11	; 0x0b
     51e:	08 95       	ret

00000520 <getBridgeAmount>:
int getBridgeAmount(Controller *self, int unused) {
	return self->BridgeAmount;
}
     520:	fc 01       	movw	r30, r24
     522:	86 85       	ldd	r24, Z+14	; 0x0e
     524:	97 85       	ldd	r25, Z+15	; 0x0f
     526:	08 95       	ret

00000528 <periodicUpdate>:

    return 0;
}

// This method calls updateDisplay and then re-schedules itself
int periodicUpdate(GUI *self, int arg) {
     528:	cf 92       	push	r12
     52a:	df 92       	push	r13
     52c:	ef 92       	push	r14
     52e:	ff 92       	push	r15
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
    // Update once right now
    ASYNC(self, updateDisplay, 0);
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	0f 2e       	mov	r0, r31
     53e:	ff e6       	ldi	r31, 0x6F	; 111
     540:	ef 2e       	mov	r14, r31
     542:	f3 e0       	ldi	r31, 0x03	; 3
     544:	ff 2e       	mov	r15, r31
     546:	f0 2d       	mov	r31, r0
     548:	8c 01       	movw	r16, r24
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	a9 01       	movw	r20, r18
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	cb 01       	movw	r24, r22
     556:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>

    // Schedule next update in 500 ms
    AFTER(MSEC(500), self, periodicUpdate, 0);
     55a:	0f 2e       	mov	r0, r31
     55c:	f4 e9       	ldi	r31, 0x94	; 148
     55e:	ef 2e       	mov	r14, r31
     560:	f2 e0       	ldi	r31, 0x02	; 2
     562:	ff 2e       	mov	r15, r31
     564:	f0 2d       	mov	r31, r0
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	a9 01       	movw	r20, r18
     56c:	69 e0       	ldi	r22, 0x09	; 9
     56e:	7d e3       	ldi	r23, 0x3D	; 61
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
    return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	df 91       	pop	r29
     57e:	cf 91       	pop	r28
     580:	1f 91       	pop	r17
     582:	0f 91       	pop	r16
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	08 95       	ret

0000058e <lcd_init>:
    0x1B51  // 9
};

void lcd_init(void) {
    // Typical LCD init for the Butterfly
    LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     58e:	80 ec       	ldi	r24, 0xC0	; 192
     590:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0)
     594:	87 eb       	ldi	r24, 0xB7	; 183
     596:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
           | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0)
           | (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
    LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     59a:	8f e0       	ldi	r24, 0x0F	; 15
     59c:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     5a0:	08 95       	ret

000005a2 <writeChar>:
}

void writeChar(char ch, int pos) {
    if (pos < 0 || pos > 5) return;
     5a2:	66 30       	cpi	r22, 0x06	; 6
     5a4:	71 05       	cpc	r23, r1
     5a6:	08 f0       	brcs	.+2      	; 0x5aa <writeChar+0x8>
     5a8:	6b c0       	rjmp	.+214    	; 0x680 <writeChar+0xde>
    uint16_t segments = 0;
    if (ch >= '0' && ch <= '9') {
     5aa:	90 ed       	ldi	r25, 0xD0	; 208
     5ac:	98 0f       	add	r25, r24
     5ae:	9a 30       	cpi	r25, 0x0A	; 10
     5b0:	50 f4       	brcc	.+20     	; 0x5c6 <writeChar+0x24>
        segments = font[ch - '0'];
     5b2:	e8 2f       	mov	r30, r24
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	f0 97       	sbiw	r30, 0x30	; 48
     5b8:	ee 0f       	add	r30, r30
     5ba:	ff 1f       	adc	r31, r31
     5bc:	e3 5d       	subi	r30, 0xD3	; 211
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	80 81       	ld	r24, Z
     5c2:	91 81       	ldd	r25, Z+1	; 0x01
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <writeChar+0x28>
    LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
}

void writeChar(char ch, int pos) {
    if (pos < 0 || pos > 5) return;
    uint16_t segments = 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
    if (ch >= '0' && ch <= '9') {
        segments = font[ch - '0'];
    }
    uint8_t *base = (uint8_t*)&LCDDR0 + (pos / 2);
     5ca:	fb 01       	movw	r30, r22
     5cc:	77 23       	and	r23, r23
     5ce:	0c f4       	brge	.+2      	; 0x5d2 <writeChar+0x30>
     5d0:	31 96       	adiw	r30, 0x01	; 1
     5d2:	f5 95       	asr	r31
     5d4:	e7 95       	ror	r30
     5d6:	e4 51       	subi	r30, 0x14	; 20
     5d8:	ff 4f       	sbci	r31, 0xFF	; 255
    int offset = (pos % 2) * 4;
     5da:	61 70       	andi	r22, 0x01	; 1
     5dc:	70 78       	andi	r23, 0x80	; 128
     5de:	77 23       	and	r23, r23
     5e0:	34 f4       	brge	.+12     	; 0x5ee <writeChar+0x4c>
     5e2:	61 50       	subi	r22, 0x01	; 1
     5e4:	71 09       	sbc	r23, r1
     5e6:	6e 6f       	ori	r22, 0xFE	; 254
     5e8:	7f 6f       	ori	r23, 0xFF	; 255
     5ea:	6f 5f       	subi	r22, 0xFF	; 255
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	66 0f       	add	r22, r22
     5f0:	77 1f       	adc	r23, r23
     5f2:	66 0f       	add	r22, r22
     5f4:	77 1f       	adc	r23, r23

    base[0]  = (base[0]  & ~(0xF << offset)) | ((segments & 0xF)     << offset);
     5f6:	30 81       	ld	r19, Z
     5f8:	4f e0       	ldi	r20, 0x0F	; 15
     5fa:	50 e0       	ldi	r21, 0x00	; 0
     5fc:	06 2e       	mov	r0, r22
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <writeChar+0x62>
     600:	44 0f       	add	r20, r20
     602:	55 1f       	adc	r21, r21
     604:	0a 94       	dec	r0
     606:	e2 f7       	brpl	.-8      	; 0x600 <writeChar+0x5e>
     608:	24 2f       	mov	r18, r20
     60a:	20 95       	com	r18
     60c:	ac 01       	movw	r20, r24
     60e:	4f 70       	andi	r20, 0x0F	; 15
     610:	55 27       	eor	r21, r21
     612:	06 2e       	mov	r0, r22
     614:	02 c0       	rjmp	.+4      	; 0x61a <writeChar+0x78>
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	0a 94       	dec	r0
     61c:	e2 f7       	brpl	.-8      	; 0x616 <writeChar+0x74>
     61e:	32 23       	and	r19, r18
     620:	43 2b       	or	r20, r19
     622:	40 83       	st	Z, r20
    base[5]  = (base[5]  & ~(0xF << offset)) | (((segments >> 4) & 0xF)  << offset);
     624:	35 81       	ldd	r19, Z+5	; 0x05
     626:	ac 01       	movw	r20, r24
     628:	52 95       	swap	r21
     62a:	42 95       	swap	r20
     62c:	4f 70       	andi	r20, 0x0F	; 15
     62e:	45 27       	eor	r20, r21
     630:	5f 70       	andi	r21, 0x0F	; 15
     632:	45 27       	eor	r20, r21
     634:	4f 70       	andi	r20, 0x0F	; 15
     636:	55 27       	eor	r21, r21
     638:	06 2e       	mov	r0, r22
     63a:	02 c0       	rjmp	.+4      	; 0x640 <writeChar+0x9e>
     63c:	44 0f       	add	r20, r20
     63e:	55 1f       	adc	r21, r21
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <writeChar+0x9a>
     644:	32 23       	and	r19, r18
     646:	43 2b       	or	r20, r19
     648:	45 83       	std	Z+5, r20	; 0x05
    base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF)  << offset);
     64a:	32 85       	ldd	r19, Z+10	; 0x0a
     64c:	49 2f       	mov	r20, r25
     64e:	55 27       	eor	r21, r21
     650:	4f 70       	andi	r20, 0x0F	; 15
     652:	55 27       	eor	r21, r21
     654:	06 2e       	mov	r0, r22
     656:	02 c0       	rjmp	.+4      	; 0x65c <writeChar+0xba>
     658:	44 0f       	add	r20, r20
     65a:	55 1f       	adc	r21, r21
     65c:	0a 94       	dec	r0
     65e:	e2 f7       	brpl	.-8      	; 0x658 <writeChar+0xb6>
     660:	32 23       	and	r19, r18
     662:	43 2b       	or	r20, r19
     664:	42 87       	std	Z+10, r20	; 0x0a
    base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);
     666:	37 85       	ldd	r19, Z+15	; 0x0f
     668:	89 2f       	mov	r24, r25
     66a:	99 27       	eor	r25, r25
     66c:	82 95       	swap	r24
     66e:	8f 70       	andi	r24, 0x0F	; 15
     670:	02 c0       	rjmp	.+4      	; 0x676 <writeChar+0xd4>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <writeChar+0xd0>
     67a:	23 23       	and	r18, r19
     67c:	82 2b       	or	r24, r18
     67e:	87 87       	std	Z+15, r24	; 0x0f
     680:	08 95       	ret

00000682 <printAt>:
}

void printAt(long num, int pos) {
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	ea 01       	movw	r28, r20
    int tens = (num / 10) % 10;
     692:	0f 2e       	mov	r0, r31
     694:	fa e0       	ldi	r31, 0x0A	; 10
     696:	cf 2e       	mov	r12, r31
     698:	d1 2c       	mov	r13, r1
     69a:	e1 2c       	mov	r14, r1
     69c:	f1 2c       	mov	r15, r1
     69e:	f0 2d       	mov	r31, r0
     6a0:	a7 01       	movw	r20, r14
     6a2:	96 01       	movw	r18, r12
     6a4:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodsi4>
     6a8:	16 2f       	mov	r17, r22
     6aa:	ca 01       	movw	r24, r20
     6ac:	b9 01       	movw	r22, r18
     6ae:	a7 01       	movw	r20, r14
     6b0:	96 01       	movw	r18, r12
     6b2:	0e 94 8a 10 	call	0x2114	; 0x2114 <__divmodsi4>
     6b6:	86 2f       	mov	r24, r22
    int ones = num % 10;
    writeChar((char)('0' + tens), pos);
     6b8:	be 01       	movw	r22, r28
     6ba:	80 5d       	subi	r24, 0xD0	; 208
     6bc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <writeChar>
    writeChar((char)('0' + ones), pos + 1);
     6c0:	be 01       	movw	r22, r28
     6c2:	6f 5f       	subi	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	80 e3       	ldi	r24, 0x30	; 48
     6c8:	81 0f       	add	r24, r17
     6ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <writeChar>
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <updateDisplay>:

// Called to update the display with current N, B, S counts
int updateDisplay(GUI *self, int arg) {
     6de:	ef 92       	push	r14
     6e0:	ff 92       	push	r15
     6e2:	0f 93       	push	r16
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	ec 01       	movw	r28, r24
    int n = SYNC(self->controller, getNorthQueue, 0);
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	68 e8       	ldi	r22, 0x88	; 136
     6f2:	72 e0       	ldi	r23, 0x02	; 2
     6f4:	8c 81       	ldd	r24, Y+4	; 0x04
     6f6:	9d 81       	ldd	r25, Y+5	; 0x05
     6f8:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <sync>
     6fc:	7c 01       	movw	r14, r24
    int b = SYNC(self->controller, getBridgeAmount, 0);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	60 e9       	ldi	r22, 0x90	; 144
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	8c 81       	ldd	r24, Y+4	; 0x04
     708:	9d 81       	ldd	r25, Y+5	; 0x05
     70a:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <sync>
     70e:	8c 01       	movw	r16, r24
    int s = SYNC(self->controller, getSouthQueue, 0);
     710:	40 e0       	ldi	r20, 0x00	; 0
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	6c e8       	ldi	r22, 0x8C	; 140
     716:	72 e0       	ldi	r23, 0x02	; 2
     718:	8c 81       	ldd	r24, Y+4	; 0x04
     71a:	9d 81       	ldd	r25, Y+5	; 0x05
     71c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <sync>
     720:	ec 01       	movw	r28, r24

    // positions: 0..1 = N-queue, 2..3 = Bridge, 4..5 = S-queue
    printAt(n, 0);
     722:	b7 01       	movw	r22, r14
     724:	ff 0c       	add	r15, r15
     726:	88 0b       	sbc	r24, r24
     728:	99 0b       	sbc	r25, r25
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	0e 94 41 03 	call	0x682	; 0x682 <printAt>
    printAt(b, 2);
     732:	b8 01       	movw	r22, r16
     734:	11 0f       	add	r17, r17
     736:	88 0b       	sbc	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	42 e0       	ldi	r20, 0x02	; 2
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	0e 94 41 03 	call	0x682	; 0x682 <printAt>
    printAt(s, 4);
     742:	be 01       	movw	r22, r28
     744:	dd 0f       	add	r29, r29
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	44 e0       	ldi	r20, 0x04	; 4
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	0e 94 41 03 	call	0x682	; 0x682 <printAt>

    return 0;
}
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	df 91       	pop	r29
     758:	cf 91       	pop	r28
     75a:	1f 91       	pop	r17
     75c:	0f 91       	pop	r16
     75e:	ff 90       	pop	r15
     760:	ef 90       	pop	r14
     762:	08 95       	ret

00000764 <interruptreceiver>:
#include "interruptHandler.h"
#include <avr/io.h>
#include "TinyTimber.h"

// When the USART RX interrupt fires, a byte is in UDR0.
int interruptreceiver(Interrupthandler *self, int arg) {
     764:	cf 92       	push	r12
     766:	df 92       	push	r13
     768:	ef 92       	push	r14
     76a:	ff 92       	push	r15
     76c:	0f 93       	push	r16
     76e:	1f 93       	push	r17
    // arg == IRQ index, but we can ignore it.
    // The new character is in UDR0
    char sensorByte = UDR0;
     770:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>

    // Forward it as a sensorEvent to the Controller
    ASYNC(self->controller, sensorEvent, sensorByte);
     774:	fc 01       	movw	r30, r24
     776:	04 81       	ldd	r16, Z+4	; 0x04
     778:	15 81       	ldd	r17, Z+5	; 0x05
     77a:	d1 2c       	mov	r13, r1
     77c:	0f 2e       	mov	r0, r31
     77e:	f3 e6       	ldi	r31, 0x63	; 99
     780:	ef 2e       	mov	r14, r31
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	ff 2e       	mov	r15, r31
     786:	f0 2d       	mov	r31, r0
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	a9 01       	movw	r20, r18
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	cb 01       	movw	r24, r22
     794:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>

    return 0;
}
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <startProgram>:
Controller      controller = initController(&serial);
GUI             gui        = initGUI(&controller);
Interrupthandler ih        = initInterruptHandler(&controller);

// Simple start function that triggers a one-time LCD update
int startProgram(GUI *self, int arg) {
     7aa:	cf 92       	push	r12
     7ac:	df 92       	push	r13
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
    // Draw initial display
    ASYNC(self, updateDisplay, 0);
     7ba:	c1 2c       	mov	r12, r1
     7bc:	d1 2c       	mov	r13, r1
     7be:	0f 2e       	mov	r0, r31
     7c0:	ff e6       	ldi	r31, 0x6F	; 111
     7c2:	ef 2e       	mov	r14, r31
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	ff 2e       	mov	r15, r31
     7c8:	f0 2d       	mov	r31, r0
     7ca:	8c 01       	movw	r16, r24
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	a9 01       	movw	r20, r18
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	cb 01       	movw	r24, r22
     7d8:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
    // Also start a recurring update every 500ms
    ASYNC(self, periodicUpdate, 0);
     7dc:	0f 2e       	mov	r0, r31
     7de:	f4 e9       	ldi	r31, 0x94	; 148
     7e0:	ef 2e       	mov	r14, r31
     7e2:	f2 e0       	ldi	r31, 0x02	; 2
     7e4:	ff 2e       	mov	r15, r31
     7e6:	f0 2d       	mov	r31, r0
     7e8:	20 e0       	ldi	r18, 0x00	; 0
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	a9 01       	movw	r20, r18
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	cb 01       	movw	r24, r22
     7f4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
    return 0;
}
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	08 95       	ret

0000080e <main>:

int main(void) {
    // Initialize hardware
    avr_init();    // clock, UART, etc.
     80e:	0e 94 4d 00 	call	0x9a	; 0x9a <avr_init>
    lcd_init();    // the LCD
     812:	0e 94 c7 02 	call	0x58e	; 0x58e <lcd_init>

    // Install the USART RX interrupt
    INSTALL(&ih, interruptreceiver, IRQ_USART0_RX);
     816:	48 e0       	ldi	r20, 0x08	; 8
     818:	62 eb       	ldi	r22, 0xB2	; 178
     81a:	73 e0       	ldi	r23, 0x03	; 3
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 58 10 	call	0x20b0	; 0x20b0 <install>

    // Start TinyTimber: initial event is startProgram(gui).
    return TINYTIMBER(&gui, startProgram, 0);
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	65 ed       	ldi	r22, 0xD5	; 213
     82a:	73 e0       	ldi	r23, 0x03	; 3
     82c:	86 e0       	ldi	r24, 0x06	; 6
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 73 10 	call	0x20e6	; 0x20e6 <tinytimber>
}
     834:	08 95       	ret

00000836 <USARTtransmit>:
#include "serialCom.h"

int USARTtransmit(SerialCom *self, int arg) {
    // Wait until transmit buffer is empty
    while (!(UCSR0A & (1 << UDRE0))) {
     836:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     83a:	85 ff       	sbrs	r24, 5
     83c:	fc cf       	rjmp	.-8      	; 0x836 <USARTtransmit>
        // spin
    }
    UDR0 = (uint8_t) arg;
     83e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    return 0;
}
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	08 95       	ret

00000848 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	00 d0       	rcall	.+0      	; 0x84e <initialize+0x6>
     84e:	00 d0       	rcall	.+0      	; 0x850 <initialize+0x8>
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	18 c0       	rjmp	.+48     	; 0x88a <initialize+0x42>
     85a:	ac 01       	movw	r20, r24
     85c:	4f 5f       	subi	r20, 0xFF	; 255
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	9a 01       	movw	r18, r20
     862:	22 95       	swap	r18
     864:	32 95       	swap	r19
     866:	30 7f       	andi	r19, 0xF0	; 240
     868:	32 27       	eor	r19, r18
     86a:	20 7f       	andi	r18, 0xF0	; 240
     86c:	32 27       	eor	r19, r18
     86e:	27 5d       	subi	r18, 0xD7	; 215
     870:	3d 4f       	sbci	r19, 0xFD	; 253
     872:	82 95       	swap	r24
     874:	92 95       	swap	r25
     876:	90 7f       	andi	r25, 0xF0	; 240
     878:	98 27       	eor	r25, r24
     87a:	80 7f       	andi	r24, 0xF0	; 240
     87c:	98 27       	eor	r25, r24
     87e:	fc 01       	movw	r30, r24
     880:	e7 5d       	subi	r30, 0xD7	; 215
     882:	fd 4f       	sbci	r31, 0xFD	; 253
     884:	31 83       	std	Z+1, r19	; 0x01
     886:	20 83       	st	Z, r18
     888:	ca 01       	movw	r24, r20
     88a:	8e 30       	cpi	r24, 0x0E	; 14
     88c:	91 05       	cpc	r25, r1
     88e:	2c f3       	brlt	.-54     	; 0x85a <initialize+0x12>
     890:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <messages+0xe1>
     894:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <messages+0xe0>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	15 c0       	rjmp	.+42     	; 0x8c8 <initialize+0x80>
     89e:	ac 01       	movw	r20, r24
     8a0:	4f 5f       	subi	r20, 0xFF	; 255
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	6d e1       	ldi	r22, 0x1D	; 29
     8a6:	64 9f       	mul	r22, r20
     8a8:	90 01       	movw	r18, r0
     8aa:	65 9f       	mul	r22, r21
     8ac:	30 0d       	add	r19, r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2c 58       	subi	r18, 0x8C	; 140
     8b2:	3e 4f       	sbci	r19, 0xFE	; 254
     8b4:	68 9f       	mul	r22, r24
     8b6:	f0 01       	movw	r30, r0
     8b8:	69 9f       	mul	r22, r25
     8ba:	f0 0d       	add	r31, r0
     8bc:	11 24       	eor	r1, r1
     8be:	ec 58       	subi	r30, 0x8C	; 140
     8c0:	fe 4f       	sbci	r31, 0xFE	; 254
     8c2:	31 83       	std	Z+1, r19	; 0x01
     8c4:	20 83       	st	Z, r18
     8c6:	ca 01       	movw	r24, r20
     8c8:	83 30       	cpi	r24, 0x03	; 3
     8ca:	91 05       	cpc	r25, r1
     8cc:	44 f3       	brlt	.-48     	; 0x89e <initialize+0x56>
     8ce:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <threads+0x58>
     8d2:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <threads+0x57>
     8d6:	1a 82       	std	Y+2, r1	; 0x02
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	32 c0       	rjmp	.+100    	; 0x940 <initialize+0xf8>
     8dc:	2d e1       	ldi	r18, 0x1D	; 29
     8de:	49 81       	ldd	r20, Y+1	; 0x01
     8e0:	5a 81       	ldd	r21, Y+2	; 0x02
     8e2:	24 9f       	mul	r18, r20
     8e4:	c0 01       	movw	r24, r0
     8e6:	25 9f       	mul	r18, r21
     8e8:	90 0d       	add	r25, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	fc 01       	movw	r30, r24
     8ee:	e6 58       	subi	r30, 0x86	; 134
     8f0:	fe 4f       	sbci	r31, 0xFE	; 254
     8f2:	fc 83       	std	Y+4, r31	; 0x04
     8f4:	eb 83       	std	Y+3, r30	; 0x03
     8f6:	cf 01       	movw	r24, r30
     8f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <setjmp>
     8fc:	20 e6       	ldi	r18, 0x60	; 96
     8fe:	49 81       	ldd	r20, Y+1	; 0x01
     900:	5a 81       	ldd	r21, Y+2	; 0x02
     902:	24 9f       	mul	r18, r20
     904:	c0 01       	movw	r24, r0
     906:	25 9f       	mul	r18, r21
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	8b 58       	subi	r24, 0x8B	; 139
     90e:	9c 4f       	sbci	r25, 0xFC	; 252
     910:	eb 81       	ldd	r30, Y+3	; 0x03
     912:	fc 81       	ldd	r31, Y+4	; 0x04
     914:	91 8b       	std	Z+17, r25	; 0x11
     916:	80 8b       	std	Z+16, r24	; 0x10
     918:	93 8b       	std	Z+19, r25	; 0x13
     91a:	82 8b       	std	Z+18, r24	; 0x12
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e1       	ldi	r25, 0x10	; 16
     920:	96 8b       	std	Z+22, r25	; 0x16
     922:	85 8b       	std	Z+21, r24	; 0x15
     924:	8d e1       	ldi	r24, 0x1D	; 29
     926:	84 9f       	mul	r24, r20
     928:	f0 01       	movw	r30, r0
     92a:	85 9f       	mul	r24, r21
     92c:	f0 0d       	add	r31, r0
     92e:	11 24       	eor	r1, r1
     930:	ec 58       	subi	r30, 0x8C	; 140
     932:	fe 4f       	sbci	r31, 0xFE	; 254
     934:	15 82       	std	Z+5, r1	; 0x05
     936:	14 82       	std	Z+4, r1	; 0x04
     938:	4f 5f       	subi	r20, 0xFF	; 255
     93a:	5f 4f       	sbci	r21, 0xFF	; 255
     93c:	5a 83       	std	Y+2, r21	; 0x02
     93e:	49 83       	std	Y+1, r20	; 0x01
     940:	29 81       	ldd	r18, Y+1	; 0x01
     942:	3a 81       	ldd	r19, Y+2	; 0x02
     944:	24 30       	cpi	r18, 0x04	; 4
     946:	31 05       	cpc	r19, r1
     948:	4c f2       	brlt	.-110    	; 0x8dc <initialize+0x94>
     94a:	ec e0       	ldi	r30, 0x0C	; 12
     94c:	f2 e0       	ldi	r31, 0x02	; 2
     94e:	11 82       	std	Z+1, r1	; 0x01
     950:	10 82       	st	Z, r1
     952:	15 82       	std	Z+5, r1	; 0x05
     954:	14 82       	std	Z+4, r1	; 0x04
     956:	13 82       	std	Z+3, r1	; 0x03
     958:	12 82       	std	Z+2, r1	; 0x02
     95a:	e1 e6       	ldi	r30, 0x61	; 97
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	80 83       	st	Z, r24
     962:	10 82       	st	Z, r1
     964:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     968:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     96c:	84 e0       	ldi	r24, 0x04	; 4
     96e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <dispatch>:
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	00 d0       	rcall	.+0      	; 0x98c <dispatch+0x6>
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	9a 83       	std	Y+2, r25	; 0x02
     992:	89 83       	std	Y+1, r24	; 0x01
     994:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
     998:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
     99c:	06 96       	adiw	r24, 0x06	; 6
     99e:	0e 94 cb 10 	call	0x2196	; 0x2196 <setjmp>
     9a2:	89 2b       	or	r24, r25
     9a4:	59 f4       	brne	.+22     	; 0x9bc <dispatch+0x36>
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <current+0x1>
     9ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <current>
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	06 96       	adiw	r24, 0x06	; 6
     9b8:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <longjmp>
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <enqueueByDeadline>:
     9c6:	0f 93       	push	r16
     9c8:	1f 93       	push	r17
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	dc 01       	movw	r26, r24
     9d0:	cb 01       	movw	r24, r22
     9d2:	eb 01       	movw	r28, r22
     9d4:	e8 81       	ld	r30, Y
     9d6:	f9 81       	ldd	r31, Y+1	; 0x01
     9d8:	c0 e0       	ldi	r28, 0x00	; 0
     9da:	d0 e0       	ldi	r29, 0x00	; 0
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <enqueueByDeadline+0x20>
     9de:	ef 01       	movw	r28, r30
     9e0:	01 90       	ld	r0, Z+
     9e2:	f0 81       	ld	r31, Z
     9e4:	e0 2d       	mov	r30, r0
     9e6:	30 97       	sbiw	r30, 0x00	; 0
     9e8:	79 f0       	breq	.+30     	; 0xa08 <enqueueByDeadline+0x42>
     9ea:	06 81       	ldd	r16, Z+6	; 0x06
     9ec:	17 81       	ldd	r17, Z+7	; 0x07
     9ee:	20 85       	ldd	r18, Z+8	; 0x08
     9f0:	31 85       	ldd	r19, Z+9	; 0x09
     9f2:	16 96       	adiw	r26, 0x06	; 6
     9f4:	4d 91       	ld	r20, X+
     9f6:	5d 91       	ld	r21, X+
     9f8:	6d 91       	ld	r22, X+
     9fa:	7c 91       	ld	r23, X
     9fc:	19 97       	sbiw	r26, 0x09	; 9
     9fe:	40 17       	cp	r20, r16
     a00:	51 07       	cpc	r21, r17
     a02:	62 07       	cpc	r22, r18
     a04:	73 07       	cpc	r23, r19
     a06:	5c f7       	brge	.-42     	; 0x9de <enqueueByDeadline+0x18>
     a08:	11 96       	adiw	r26, 0x01	; 1
     a0a:	fc 93       	st	X, r31
     a0c:	ee 93       	st	-X, r30
     a0e:	20 97       	sbiw	r28, 0x00	; 0
     a10:	21 f4       	brne	.+8      	; 0xa1a <enqueueByDeadline+0x54>
     a12:	fc 01       	movw	r30, r24
     a14:	b1 83       	std	Z+1, r27	; 0x01
     a16:	a0 83       	st	Z, r26
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <enqueueByDeadline+0x58>
     a1a:	b9 83       	std	Y+1, r27	; 0x01
     a1c:	a8 83       	st	Y, r26
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	08 95       	ret

00000a28 <enqueueByBaseline>:
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	eb 01       	movw	r28, r22
     a36:	e8 81       	ld	r30, Y
     a38:	f9 81       	ldd	r31, Y+1	; 0x01
     a3a:	c0 e0       	ldi	r28, 0x00	; 0
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <enqueueByBaseline+0x20>
     a40:	ef 01       	movw	r28, r30
     a42:	01 90       	ld	r0, Z+
     a44:	f0 81       	ld	r31, Z
     a46:	e0 2d       	mov	r30, r0
     a48:	30 97       	sbiw	r30, 0x00	; 0
     a4a:	79 f0       	breq	.+30     	; 0xa6a <enqueueByBaseline+0x42>
     a4c:	02 81       	ldd	r16, Z+2	; 0x02
     a4e:	13 81       	ldd	r17, Z+3	; 0x03
     a50:	24 81       	ldd	r18, Z+4	; 0x04
     a52:	35 81       	ldd	r19, Z+5	; 0x05
     a54:	12 96       	adiw	r26, 0x02	; 2
     a56:	4d 91       	ld	r20, X+
     a58:	5d 91       	ld	r21, X+
     a5a:	6d 91       	ld	r22, X+
     a5c:	7c 91       	ld	r23, X
     a5e:	15 97       	sbiw	r26, 0x05	; 5
     a60:	40 17       	cp	r20, r16
     a62:	51 07       	cpc	r21, r17
     a64:	62 07       	cpc	r22, r18
     a66:	73 07       	cpc	r23, r19
     a68:	5c f7       	brge	.-42     	; 0xa40 <enqueueByBaseline+0x18>
     a6a:	11 96       	adiw	r26, 0x01	; 1
     a6c:	fc 93       	st	X, r31
     a6e:	ee 93       	st	-X, r30
     a70:	20 97       	sbiw	r28, 0x00	; 0
     a72:	21 f4       	brne	.+8      	; 0xa7c <enqueueByBaseline+0x54>
     a74:	fc 01       	movw	r30, r24
     a76:	b1 83       	std	Z+1, r27	; 0x01
     a78:	a0 83       	st	Z, r26
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <enqueueByBaseline+0x58>
     a7c:	b9 83       	std	Y+1, r27	; 0x01
     a7e:	a8 83       	st	Y, r26
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <dequeue>:
     a8a:	dc 01       	movw	r26, r24
     a8c:	ed 91       	ld	r30, X+
     a8e:	fc 91       	ld	r31, X
     a90:	11 97       	sbiw	r26, 0x01	; 1
     a92:	30 97       	sbiw	r30, 0x00	; 0
     a94:	59 f4       	brne	.+22     	; 0xaac <dequeue+0x22>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     a9c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     aa0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	83 bf       	out	0x33, r24	; 51
     aa8:	88 95       	sleep
     aaa:	fc cf       	rjmp	.-8      	; 0xaa4 <dequeue+0x1a>
     aac:	20 81       	ld	r18, Z
     aae:	31 81       	ldd	r19, Z+1	; 0x01
     ab0:	2d 93       	st	X+, r18
     ab2:	3c 93       	st	X, r19
     ab4:	cf 01       	movw	r24, r30
     ab6:	08 95       	ret

00000ab8 <insert>:
     ab8:	fb 01       	movw	r30, r22
     aba:	20 81       	ld	r18, Z
     abc:	31 81       	ldd	r19, Z+1	; 0x01
     abe:	fc 01       	movw	r30, r24
     ac0:	31 83       	std	Z+1, r19	; 0x01
     ac2:	20 83       	st	Z, r18
     ac4:	fb 01       	movw	r30, r22
     ac6:	91 83       	std	Z+1, r25	; 0x01
     ac8:	80 83       	st	Z, r24
     aca:	08 95       	ret

00000acc <push>:
     acc:	fb 01       	movw	r30, r22
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	fc 01       	movw	r30, r24
     ad4:	31 83       	std	Z+1, r19	; 0x01
     ad6:	20 83       	st	Z, r18
     ad8:	fb 01       	movw	r30, r22
     ada:	91 83       	std	Z+1, r25	; 0x01
     adc:	80 83       	st	Z, r24
     ade:	08 95       	ret

00000ae0 <pop>:
     ae0:	dc 01       	movw	r26, r24
     ae2:	ed 91       	ld	r30, X+
     ae4:	fc 91       	ld	r31, X
     ae6:	11 97       	sbiw	r26, 0x01	; 1
     ae8:	20 81       	ld	r18, Z
     aea:	31 81       	ldd	r19, Z+1	; 0x01
     aec:	2d 93       	st	X+, r18
     aee:	3c 93       	st	X, r19
     af0:	cf 01       	movw	r24, r30
     af2:	08 95       	ret

00000af4 <schedule>:
     af4:	cf 93       	push	r28
     af6:	df 93       	push	r29
     af8:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
     afc:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
     b00:	c2 81       	ldd	r28, Z+2	; 0x02
     b02:	d3 81       	ldd	r29, Z+3	; 0x03
     b04:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
     b08:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
     b0c:	30 97       	sbiw	r30, 0x00	; 0
     b0e:	19 f1       	breq	.+70     	; 0xb56 <schedule+0x62>
     b10:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
     b14:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
     b18:	89 2b       	or	r24, r25
     b1a:	e9 f0       	breq	.+58     	; 0xb56 <schedule+0x62>
     b1c:	20 97       	sbiw	r28, 0x00	; 0
     b1e:	69 f0       	breq	.+26     	; 0xb3a <schedule+0x46>
     b20:	86 81       	ldd	r24, Z+6	; 0x06
     b22:	97 81       	ldd	r25, Z+7	; 0x07
     b24:	a0 85       	ldd	r26, Z+8	; 0x08
     b26:	b1 85       	ldd	r27, Z+9	; 0x09
     b28:	4e 81       	ldd	r20, Y+6	; 0x06
     b2a:	5f 81       	ldd	r21, Y+7	; 0x07
     b2c:	68 85       	ldd	r22, Y+8	; 0x08
     b2e:	79 85       	ldd	r23, Y+9	; 0x09
     b30:	84 1b       	sub	r24, r20
     b32:	95 0b       	sbc	r25, r21
     b34:	a6 0b       	sbc	r26, r22
     b36:	b7 0b       	sbc	r27, r23
     b38:	72 f4       	brpl	.+28     	; 0xb56 <schedule+0x62>
     b3a:	89 e2       	ldi	r24, 0x29	; 41
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 70 05 	call	0xae0	; 0xae0 <pop>
     b42:	67 e2       	ldi	r22, 0x27	; 39
     b44:	71 e0       	ldi	r23, 0x01	; 1
     b46:	0e 94 66 05 	call	0xacc	; 0xacc <push>
     b4a:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <activeStack>
     b4e:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <activeStack+0x1>
     b52:	0e 94 c3 04 	call	0x986	; 0x986 <dispatch>
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <__vector_1>:
     b5c:	1f 92       	push	r1
     b5e:	0f 92       	push	r0
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	0f 92       	push	r0
     b64:	11 24       	eor	r1, r1
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     b86:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     b8a:	ac 01       	movw	r20, r24
     b8c:	09 2e       	mov	r0, r25
     b8e:	00 0c       	add	r0, r0
     b90:	66 0b       	sbc	r22, r22
     b92:	77 0b       	sbc	r23, r23
     b94:	9a 01       	movw	r18, r20
     b96:	11 27       	eor	r17, r17
     b98:	00 27       	eor	r16, r16
     b9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	40 2b       	or	r20, r16
     ba8:	51 2b       	or	r21, r17
     baa:	62 2b       	or	r22, r18
     bac:	73 2b       	or	r23, r19
     bae:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     bb2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     bb6:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     bba:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     bbe:	b0 9b       	sbis	0x16, 0	; 22
     bc0:	1a c0       	rjmp	.+52     	; 0xbf6 <__vector_1+0x9a>
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	09 2e       	mov	r0, r25
     bc6:	00 0c       	add	r0, r0
     bc8:	aa 0b       	sbc	r26, r26
     bca:	bb 0b       	sbc	r27, r27
     bcc:	bc 01       	movw	r22, r24
     bce:	55 27       	eor	r21, r21
     bd0:	44 27       	eor	r20, r20
     bd2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bd6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	84 2b       	or	r24, r20
     be0:	95 2b       	or	r25, r21
     be2:	a6 2b       	or	r26, r22
     be4:	b7 2b       	or	r27, r23
     be6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     bea:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     bee:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     bf2:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     bf6:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable>
     bfa:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x1>
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	39 f0       	breq	.+14     	; 0xc10 <__vector_1+0xb4>
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable>
     c0a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x1>
     c0e:	09 95       	icall
     c10:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <__vector_2>:
     c3a:	1f 92       	push	r1
     c3c:	0f 92       	push	r0
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	0f 92       	push	r0
     c42:	11 24       	eor	r1, r1
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	2f 93       	push	r18
     c4a:	3f 93       	push	r19
     c4c:	4f 93       	push	r20
     c4e:	5f 93       	push	r21
     c50:	6f 93       	push	r22
     c52:	7f 93       	push	r23
     c54:	8f 93       	push	r24
     c56:	9f 93       	push	r25
     c58:	af 93       	push	r26
     c5a:	bf 93       	push	r27
     c5c:	ef 93       	push	r30
     c5e:	ff 93       	push	r31
     c60:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     c64:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     c68:	ac 01       	movw	r20, r24
     c6a:	09 2e       	mov	r0, r25
     c6c:	00 0c       	add	r0, r0
     c6e:	66 0b       	sbc	r22, r22
     c70:	77 0b       	sbc	r23, r23
     c72:	9a 01       	movw	r18, r20
     c74:	11 27       	eor	r17, r17
     c76:	00 27       	eor	r16, r16
     c78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	40 2b       	or	r20, r16
     c86:	51 2b       	or	r21, r17
     c88:	62 2b       	or	r22, r18
     c8a:	73 2b       	or	r23, r19
     c8c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     c90:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     c94:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     c98:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     c9c:	b0 9b       	sbis	0x16, 0	; 22
     c9e:	1a c0       	rjmp	.+52     	; 0xcd4 <__vector_2+0x9a>
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	09 2e       	mov	r0, r25
     ca4:	00 0c       	add	r0, r0
     ca6:	aa 0b       	sbc	r26, r26
     ca8:	bb 0b       	sbc	r27, r27
     caa:	bc 01       	movw	r22, r24
     cac:	55 27       	eor	r21, r21
     cae:	44 27       	eor	r20, r20
     cb0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	84 2b       	or	r24, r20
     cbe:	95 2b       	or	r25, r21
     cc0:	a6 2b       	or	r26, r22
     cc2:	b7 2b       	or	r27, r23
     cc4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     cc8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     ccc:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     cd0:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     cd4:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x2>
     cd8:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x3>
     cdc:	30 97       	sbiw	r30, 0x00	; 0
     cde:	39 f0       	breq	.+14     	; 0xcee <__vector_2+0xb4>
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x2>
     ce8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x3>
     cec:	09 95       	icall
     cee:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
     cf2:	ff 91       	pop	r31
     cf4:	ef 91       	pop	r30
     cf6:	bf 91       	pop	r27
     cf8:	af 91       	pop	r26
     cfa:	9f 91       	pop	r25
     cfc:	8f 91       	pop	r24
     cfe:	7f 91       	pop	r23
     d00:	6f 91       	pop	r22
     d02:	5f 91       	pop	r21
     d04:	4f 91       	pop	r20
     d06:	3f 91       	pop	r19
     d08:	2f 91       	pop	r18
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <__vector_3>:
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
     d3e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     d42:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     d46:	ac 01       	movw	r20, r24
     d48:	09 2e       	mov	r0, r25
     d4a:	00 0c       	add	r0, r0
     d4c:	66 0b       	sbc	r22, r22
     d4e:	77 0b       	sbc	r23, r23
     d50:	9a 01       	movw	r18, r20
     d52:	11 27       	eor	r17, r17
     d54:	00 27       	eor	r16, r16
     d56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	40 2b       	or	r20, r16
     d64:	51 2b       	or	r21, r17
     d66:	62 2b       	or	r22, r18
     d68:	73 2b       	or	r23, r19
     d6a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     d6e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     d72:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     d76:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     d7a:	b0 9b       	sbis	0x16, 0	; 22
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <__vector_3+0x9a>
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	09 2e       	mov	r0, r25
     d82:	00 0c       	add	r0, r0
     d84:	aa 0b       	sbc	r26, r26
     d86:	bb 0b       	sbc	r27, r27
     d88:	bc 01       	movw	r22, r24
     d8a:	55 27       	eor	r21, r21
     d8c:	44 27       	eor	r20, r20
     d8e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d92:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	84 2b       	or	r24, r20
     d9c:	95 2b       	or	r25, r21
     d9e:	a6 2b       	or	r26, r22
     da0:	b7 2b       	or	r27, r23
     da2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     da6:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     daa:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     dae:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     db2:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x4>
     db6:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x5>
     dba:	30 97       	sbiw	r30, 0x00	; 0
     dbc:	39 f0       	breq	.+14     	; 0xdcc <__vector_3+0xb4>
     dbe:	62 e0       	ldi	r22, 0x02	; 2
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x4>
     dc6:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x5>
     dca:	09 95       	icall
     dcc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	0f 90       	pop	r0
     df2:	1f 90       	pop	r1
     df4:	18 95       	reti

00000df6 <__vector_4>:
     df6:	1f 92       	push	r1
     df8:	0f 92       	push	r0
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	0f 92       	push	r0
     dfe:	11 24       	eor	r1, r1
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     e20:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     e24:	ac 01       	movw	r20, r24
     e26:	09 2e       	mov	r0, r25
     e28:	00 0c       	add	r0, r0
     e2a:	66 0b       	sbc	r22, r22
     e2c:	77 0b       	sbc	r23, r23
     e2e:	9a 01       	movw	r18, r20
     e30:	11 27       	eor	r17, r17
     e32:	00 27       	eor	r16, r16
     e34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	40 2b       	or	r20, r16
     e42:	51 2b       	or	r21, r17
     e44:	62 2b       	or	r22, r18
     e46:	73 2b       	or	r23, r19
     e48:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     e4c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     e50:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     e54:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     e58:	b0 9b       	sbis	0x16, 0	; 22
     e5a:	1a c0       	rjmp	.+52     	; 0xe90 <__vector_4+0x9a>
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	09 2e       	mov	r0, r25
     e60:	00 0c       	add	r0, r0
     e62:	aa 0b       	sbc	r26, r26
     e64:	bb 0b       	sbc	r27, r27
     e66:	bc 01       	movw	r22, r24
     e68:	55 27       	eor	r21, r21
     e6a:	44 27       	eor	r20, r20
     e6c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e70:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	84 2b       	or	r24, r20
     e7a:	95 2b       	or	r25, r21
     e7c:	a6 2b       	or	r26, r22
     e7e:	b7 2b       	or	r27, r23
     e80:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     e84:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     e88:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     e8c:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     e90:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x6>
     e94:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x7>
     e98:	30 97       	sbiw	r30, 0x00	; 0
     e9a:	39 f0       	breq	.+14     	; 0xeaa <__vector_4+0xb4>
     e9c:	63 e0       	ldi	r22, 0x03	; 3
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x6>
     ea4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x7>
     ea8:	09 95       	icall
     eaa:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_5>:
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     efe:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     f02:	ac 01       	movw	r20, r24
     f04:	09 2e       	mov	r0, r25
     f06:	00 0c       	add	r0, r0
     f08:	66 0b       	sbc	r22, r22
     f0a:	77 0b       	sbc	r23, r23
     f0c:	9a 01       	movw	r18, r20
     f0e:	11 27       	eor	r17, r17
     f10:	00 27       	eor	r16, r16
     f12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	40 2b       	or	r20, r16
     f20:	51 2b       	or	r21, r17
     f22:	62 2b       	or	r22, r18
     f24:	73 2b       	or	r23, r19
     f26:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
     f2a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
     f2e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
     f32:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
     f36:	b0 9b       	sbis	0x16, 0	; 22
     f38:	1a c0       	rjmp	.+52     	; 0xf6e <__vector_5+0x9a>
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	09 2e       	mov	r0, r25
     f3e:	00 0c       	add	r0, r0
     f40:	aa 0b       	sbc	r26, r26
     f42:	bb 0b       	sbc	r27, r27
     f44:	bc 01       	movw	r22, r24
     f46:	55 27       	eor	r21, r21
     f48:	44 27       	eor	r20, r20
     f4a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f4e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f52:	a0 e0       	ldi	r26, 0x00	; 0
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	84 2b       	or	r24, r20
     f58:	95 2b       	or	r25, r21
     f5a:	a6 2b       	or	r26, r22
     f5c:	b7 2b       	or	r27, r23
     f5e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
     f62:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
     f66:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
     f6a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
     f6e:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x8>
     f72:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x9>
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	39 f0       	breq	.+14     	; 0xf88 <__vector_5+0xb4>
     f7a:	64 e0       	ldi	r22, 0x04	; 4
     f7c:	70 e0       	ldi	r23, 0x00	; 0
     f7e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x8>
     f82:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x9>
     f86:	09 95       	icall
     f88:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <__vector_10>:
     fb2:	1f 92       	push	r1
     fb4:	0f 92       	push	r0
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	0f 92       	push	r0
     fba:	11 24       	eor	r1, r1
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	2f 93       	push	r18
     fc2:	3f 93       	push	r19
     fc4:	4f 93       	push	r20
     fc6:	5f 93       	push	r21
     fc8:	6f 93       	push	r22
     fca:	7f 93       	push	r23
     fcc:	8f 93       	push	r24
     fce:	9f 93       	push	r25
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	ef 93       	push	r30
     fd6:	ff 93       	push	r31
     fd8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
     fdc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
     fe0:	ac 01       	movw	r20, r24
     fe2:	09 2e       	mov	r0, r25
     fe4:	00 0c       	add	r0, r0
     fe6:	66 0b       	sbc	r22, r22
     fe8:	77 0b       	sbc	r23, r23
     fea:	9a 01       	movw	r18, r20
     fec:	11 27       	eor	r17, r17
     fee:	00 27       	eor	r16, r16
     ff0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	40 2b       	or	r20, r16
     ffe:	51 2b       	or	r21, r17
    1000:	62 2b       	or	r22, r18
    1002:	73 2b       	or	r23, r19
    1004:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1008:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    100c:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1010:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1014:	b0 9b       	sbis	0x16, 0	; 22
    1016:	1a c0       	rjmp	.+52     	; 0x104c <__vector_10+0x9a>
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	09 2e       	mov	r0, r25
    101c:	00 0c       	add	r0, r0
    101e:	aa 0b       	sbc	r26, r26
    1020:	bb 0b       	sbc	r27, r27
    1022:	bc 01       	movw	r22, r24
    1024:	55 27       	eor	r21, r21
    1026:	44 27       	eor	r20, r20
    1028:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	84 2b       	or	r24, r20
    1036:	95 2b       	or	r25, r21
    1038:	a6 2b       	or	r26, r22
    103a:	b7 2b       	or	r27, r23
    103c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1040:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1044:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1048:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    104c:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0xa>
    1050:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0xb>
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	39 f0       	breq	.+14     	; 0x1066 <__vector_10+0xb4>
    1058:	65 e0       	ldi	r22, 0x05	; 5
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0xa>
    1060:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0xb>
    1064:	09 95       	icall
    1066:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    106a:	ff 91       	pop	r31
    106c:	ef 91       	pop	r30
    106e:	bf 91       	pop	r27
    1070:	af 91       	pop	r26
    1072:	9f 91       	pop	r25
    1074:	8f 91       	pop	r24
    1076:	7f 91       	pop	r23
    1078:	6f 91       	pop	r22
    107a:	5f 91       	pop	r21
    107c:	4f 91       	pop	r20
    107e:	3f 91       	pop	r19
    1080:	2f 91       	pop	r18
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	0f 90       	pop	r0
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	0f 90       	pop	r0
    108c:	1f 90       	pop	r1
    108e:	18 95       	reti

00001090 <__vector_11>:
    1090:	1f 92       	push	r1
    1092:	0f 92       	push	r0
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	0f 92       	push	r0
    1098:	11 24       	eor	r1, r1
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
    10b6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    10ba:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    10be:	ac 01       	movw	r20, r24
    10c0:	09 2e       	mov	r0, r25
    10c2:	00 0c       	add	r0, r0
    10c4:	66 0b       	sbc	r22, r22
    10c6:	77 0b       	sbc	r23, r23
    10c8:	9a 01       	movw	r18, r20
    10ca:	11 27       	eor	r17, r17
    10cc:	00 27       	eor	r16, r16
    10ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	40 2b       	or	r20, r16
    10dc:	51 2b       	or	r21, r17
    10de:	62 2b       	or	r22, r18
    10e0:	73 2b       	or	r23, r19
    10e2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    10e6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    10ea:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    10ee:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    10f2:	b0 9b       	sbis	0x16, 0	; 22
    10f4:	1a c0       	rjmp	.+52     	; 0x112a <__vector_11+0x9a>
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	09 2e       	mov	r0, r25
    10fa:	00 0c       	add	r0, r0
    10fc:	aa 0b       	sbc	r26, r26
    10fe:	bb 0b       	sbc	r27, r27
    1100:	bc 01       	movw	r22, r24
    1102:	55 27       	eor	r21, r21
    1104:	44 27       	eor	r20, r20
    1106:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    110a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	84 2b       	or	r24, r20
    1114:	95 2b       	or	r25, r21
    1116:	a6 2b       	or	r26, r22
    1118:	b7 2b       	or	r27, r23
    111a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    111e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1122:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1126:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    112a:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0xc>
    112e:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0xd>
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	39 f0       	breq	.+14     	; 0x1144 <__vector_11+0xb4>
    1136:	66 e0       	ldi	r22, 0x06	; 6
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0xc>
    113e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0xd>
    1142:	09 95       	icall
    1144:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <__vector_12>:
    116e:	1f 92       	push	r1
    1170:	0f 92       	push	r0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	0f 92       	push	r0
    1176:	11 24       	eor	r1, r1
    1178:	0f 93       	push	r16
    117a:	1f 93       	push	r17
    117c:	2f 93       	push	r18
    117e:	3f 93       	push	r19
    1180:	4f 93       	push	r20
    1182:	5f 93       	push	r21
    1184:	6f 93       	push	r22
    1186:	7f 93       	push	r23
    1188:	8f 93       	push	r24
    118a:	9f 93       	push	r25
    118c:	af 93       	push	r26
    118e:	bf 93       	push	r27
    1190:	ef 93       	push	r30
    1192:	ff 93       	push	r31
    1194:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1198:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    119c:	ac 01       	movw	r20, r24
    119e:	09 2e       	mov	r0, r25
    11a0:	00 0c       	add	r0, r0
    11a2:	66 0b       	sbc	r22, r22
    11a4:	77 0b       	sbc	r23, r23
    11a6:	9a 01       	movw	r18, r20
    11a8:	11 27       	eor	r17, r17
    11aa:	00 27       	eor	r16, r16
    11ac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	40 2b       	or	r20, r16
    11ba:	51 2b       	or	r21, r17
    11bc:	62 2b       	or	r22, r18
    11be:	73 2b       	or	r23, r19
    11c0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    11c4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    11c8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    11cc:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    11d0:	b0 9b       	sbis	0x16, 0	; 22
    11d2:	1a c0       	rjmp	.+52     	; 0x1208 <__vector_12+0x9a>
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	09 2e       	mov	r0, r25
    11d8:	00 0c       	add	r0, r0
    11da:	aa 0b       	sbc	r26, r26
    11dc:	bb 0b       	sbc	r27, r27
    11de:	bc 01       	movw	r22, r24
    11e0:	55 27       	eor	r21, r21
    11e2:	44 27       	eor	r20, r20
    11e4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11e8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ec:	a0 e0       	ldi	r26, 0x00	; 0
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	84 2b       	or	r24, r20
    11f2:	95 2b       	or	r25, r21
    11f4:	a6 2b       	or	r26, r22
    11f6:	b7 2b       	or	r27, r23
    11f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    11fc:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1200:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1204:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1208:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0xe>
    120c:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0xf>
    1210:	30 97       	sbiw	r30, 0x00	; 0
    1212:	39 f0       	breq	.+14     	; 0x1222 <__vector_12+0xb4>
    1214:	67 e0       	ldi	r22, 0x07	; 7
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0xe>
    121c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0xf>
    1220:	09 95       	icall
    1222:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1226:	ff 91       	pop	r31
    1228:	ef 91       	pop	r30
    122a:	bf 91       	pop	r27
    122c:	af 91       	pop	r26
    122e:	9f 91       	pop	r25
    1230:	8f 91       	pop	r24
    1232:	7f 91       	pop	r23
    1234:	6f 91       	pop	r22
    1236:	5f 91       	pop	r21
    1238:	4f 91       	pop	r20
    123a:	3f 91       	pop	r19
    123c:	2f 91       	pop	r18
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	0f 90       	pop	r0
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	0f 90       	pop	r0
    1248:	1f 90       	pop	r1
    124a:	18 95       	reti

0000124c <__vector_13>:
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	2f 93       	push	r18
    125c:	3f 93       	push	r19
    125e:	4f 93       	push	r20
    1260:	5f 93       	push	r21
    1262:	6f 93       	push	r22
    1264:	7f 93       	push	r23
    1266:	8f 93       	push	r24
    1268:	9f 93       	push	r25
    126a:	af 93       	push	r26
    126c:	bf 93       	push	r27
    126e:	ef 93       	push	r30
    1270:	ff 93       	push	r31
    1272:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1276:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    127a:	ac 01       	movw	r20, r24
    127c:	09 2e       	mov	r0, r25
    127e:	00 0c       	add	r0, r0
    1280:	66 0b       	sbc	r22, r22
    1282:	77 0b       	sbc	r23, r23
    1284:	9a 01       	movw	r18, r20
    1286:	11 27       	eor	r17, r17
    1288:	00 27       	eor	r16, r16
    128a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    128e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	40 2b       	or	r20, r16
    1298:	51 2b       	or	r21, r17
    129a:	62 2b       	or	r22, r18
    129c:	73 2b       	or	r23, r19
    129e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    12a2:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    12a6:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    12aa:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    12ae:	b0 9b       	sbis	0x16, 0	; 22
    12b0:	1a c0       	rjmp	.+52     	; 0x12e6 <__vector_13+0x9a>
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	09 2e       	mov	r0, r25
    12b6:	00 0c       	add	r0, r0
    12b8:	aa 0b       	sbc	r26, r26
    12ba:	bb 0b       	sbc	r27, r27
    12bc:	bc 01       	movw	r22, r24
    12be:	55 27       	eor	r21, r21
    12c0:	44 27       	eor	r20, r20
    12c2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	84 2b       	or	r24, r20
    12d0:	95 2b       	or	r25, r21
    12d2:	a6 2b       	or	r26, r22
    12d4:	b7 2b       	or	r27, r23
    12d6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    12da:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    12de:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    12e2:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    12e6:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x10>
    12ea:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x11>
    12ee:	30 97       	sbiw	r30, 0x00	; 0
    12f0:	39 f0       	breq	.+14     	; 0x1300 <__vector_13+0xb4>
    12f2:	68 e0       	ldi	r22, 0x08	; 8
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x10>
    12fa:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x11>
    12fe:	09 95       	icall
    1300:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_14>:
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	2f 93       	push	r18
    133a:	3f 93       	push	r19
    133c:	4f 93       	push	r20
    133e:	5f 93       	push	r21
    1340:	6f 93       	push	r22
    1342:	7f 93       	push	r23
    1344:	8f 93       	push	r24
    1346:	9f 93       	push	r25
    1348:	af 93       	push	r26
    134a:	bf 93       	push	r27
    134c:	ef 93       	push	r30
    134e:	ff 93       	push	r31
    1350:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1354:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1358:	ac 01       	movw	r20, r24
    135a:	09 2e       	mov	r0, r25
    135c:	00 0c       	add	r0, r0
    135e:	66 0b       	sbc	r22, r22
    1360:	77 0b       	sbc	r23, r23
    1362:	9a 01       	movw	r18, r20
    1364:	11 27       	eor	r17, r17
    1366:	00 27       	eor	r16, r16
    1368:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    136c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	40 2b       	or	r20, r16
    1376:	51 2b       	or	r21, r17
    1378:	62 2b       	or	r22, r18
    137a:	73 2b       	or	r23, r19
    137c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1380:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1384:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1388:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    138c:	b0 9b       	sbis	0x16, 0	; 22
    138e:	1a c0       	rjmp	.+52     	; 0x13c4 <__vector_14+0x9a>
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	09 2e       	mov	r0, r25
    1394:	00 0c       	add	r0, r0
    1396:	aa 0b       	sbc	r26, r26
    1398:	bb 0b       	sbc	r27, r27
    139a:	bc 01       	movw	r22, r24
    139c:	55 27       	eor	r21, r21
    139e:	44 27       	eor	r20, r20
    13a0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13a4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	84 2b       	or	r24, r20
    13ae:	95 2b       	or	r25, r21
    13b0:	a6 2b       	or	r26, r22
    13b2:	b7 2b       	or	r27, r23
    13b4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    13b8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    13bc:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    13c0:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    13c4:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x12>
    13c8:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x13>
    13cc:	30 97       	sbiw	r30, 0x00	; 0
    13ce:	39 f0       	breq	.+14     	; 0x13de <__vector_14+0xb4>
    13d0:	69 e0       	ldi	r22, 0x09	; 9
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x12>
    13d8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x13>
    13dc:	09 95       	icall
    13de:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    13e2:	ff 91       	pop	r31
    13e4:	ef 91       	pop	r30
    13e6:	bf 91       	pop	r27
    13e8:	af 91       	pop	r26
    13ea:	9f 91       	pop	r25
    13ec:	8f 91       	pop	r24
    13ee:	7f 91       	pop	r23
    13f0:	6f 91       	pop	r22
    13f2:	5f 91       	pop	r21
    13f4:	4f 91       	pop	r20
    13f6:	3f 91       	pop	r19
    13f8:	2f 91       	pop	r18
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <__vector_15>:
    1408:	1f 92       	push	r1
    140a:	0f 92       	push	r0
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	0f 92       	push	r0
    1410:	11 24       	eor	r1, r1
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	4f 93       	push	r20
    141c:	5f 93       	push	r21
    141e:	6f 93       	push	r22
    1420:	7f 93       	push	r23
    1422:	8f 93       	push	r24
    1424:	9f 93       	push	r25
    1426:	af 93       	push	r26
    1428:	bf 93       	push	r27
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
    142e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1432:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1436:	ac 01       	movw	r20, r24
    1438:	09 2e       	mov	r0, r25
    143a:	00 0c       	add	r0, r0
    143c:	66 0b       	sbc	r22, r22
    143e:	77 0b       	sbc	r23, r23
    1440:	9a 01       	movw	r18, r20
    1442:	11 27       	eor	r17, r17
    1444:	00 27       	eor	r16, r16
    1446:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    144a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	40 2b       	or	r20, r16
    1454:	51 2b       	or	r21, r17
    1456:	62 2b       	or	r22, r18
    1458:	73 2b       	or	r23, r19
    145a:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    145e:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1462:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1466:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    146a:	b0 9b       	sbis	0x16, 0	; 22
    146c:	1a c0       	rjmp	.+52     	; 0x14a2 <__vector_15+0x9a>
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	09 2e       	mov	r0, r25
    1472:	00 0c       	add	r0, r0
    1474:	aa 0b       	sbc	r26, r26
    1476:	bb 0b       	sbc	r27, r27
    1478:	bc 01       	movw	r22, r24
    147a:	55 27       	eor	r21, r21
    147c:	44 27       	eor	r20, r20
    147e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1482:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1486:	a0 e0       	ldi	r26, 0x00	; 0
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	84 2b       	or	r24, r20
    148c:	95 2b       	or	r25, r21
    148e:	a6 2b       	or	r26, r22
    1490:	b7 2b       	or	r27, r23
    1492:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1496:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    149a:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    149e:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    14a2:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x14>
    14a6:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x15>
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	39 f0       	breq	.+14     	; 0x14bc <__vector_15+0xb4>
    14ae:	6a e0       	ldi	r22, 0x0A	; 10
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x14>
    14b6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x15>
    14ba:	09 95       	icall
    14bc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    14c0:	ff 91       	pop	r31
    14c2:	ef 91       	pop	r30
    14c4:	bf 91       	pop	r27
    14c6:	af 91       	pop	r26
    14c8:	9f 91       	pop	r25
    14ca:	8f 91       	pop	r24
    14cc:	7f 91       	pop	r23
    14ce:	6f 91       	pop	r22
    14d0:	5f 91       	pop	r21
    14d2:	4f 91       	pop	r20
    14d4:	3f 91       	pop	r19
    14d6:	2f 91       	pop	r18
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <__vector_16>:
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1510:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1514:	ac 01       	movw	r20, r24
    1516:	09 2e       	mov	r0, r25
    1518:	00 0c       	add	r0, r0
    151a:	66 0b       	sbc	r22, r22
    151c:	77 0b       	sbc	r23, r23
    151e:	9a 01       	movw	r18, r20
    1520:	11 27       	eor	r17, r17
    1522:	00 27       	eor	r16, r16
    1524:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1528:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	70 e0       	ldi	r23, 0x00	; 0
    1530:	40 2b       	or	r20, r16
    1532:	51 2b       	or	r21, r17
    1534:	62 2b       	or	r22, r18
    1536:	73 2b       	or	r23, r19
    1538:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    153c:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1540:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1544:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1548:	b0 9b       	sbis	0x16, 0	; 22
    154a:	1a c0       	rjmp	.+52     	; 0x1580 <__vector_16+0x9a>
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	09 2e       	mov	r0, r25
    1550:	00 0c       	add	r0, r0
    1552:	aa 0b       	sbc	r26, r26
    1554:	bb 0b       	sbc	r27, r27
    1556:	bc 01       	movw	r22, r24
    1558:	55 27       	eor	r21, r21
    155a:	44 27       	eor	r20, r20
    155c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1560:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1564:	a0 e0       	ldi	r26, 0x00	; 0
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	84 2b       	or	r24, r20
    156a:	95 2b       	or	r25, r21
    156c:	a6 2b       	or	r26, r22
    156e:	b7 2b       	or	r27, r23
    1570:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1574:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1578:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    157c:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1580:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x16>
    1584:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x17>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	39 f0       	breq	.+14     	; 0x159a <__vector_16+0xb4>
    158c:	6b e0       	ldi	r22, 0x0B	; 11
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x16>
    1594:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x17>
    1598:	09 95       	icall
    159a:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    159e:	ff 91       	pop	r31
    15a0:	ef 91       	pop	r30
    15a2:	bf 91       	pop	r27
    15a4:	af 91       	pop	r26
    15a6:	9f 91       	pop	r25
    15a8:	8f 91       	pop	r24
    15aa:	7f 91       	pop	r23
    15ac:	6f 91       	pop	r22
    15ae:	5f 91       	pop	r21
    15b0:	4f 91       	pop	r20
    15b2:	3f 91       	pop	r19
    15b4:	2f 91       	pop	r18
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	0f 90       	pop	r0
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	0f 90       	pop	r0
    15c0:	1f 90       	pop	r1
    15c2:	18 95       	reti

000015c4 <__vector_17>:
    15c4:	1f 92       	push	r1
    15c6:	0f 92       	push	r0
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	0f 92       	push	r0
    15cc:	11 24       	eor	r1, r1
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	2f 93       	push	r18
    15d4:	3f 93       	push	r19
    15d6:	4f 93       	push	r20
    15d8:	5f 93       	push	r21
    15da:	6f 93       	push	r22
    15dc:	7f 93       	push	r23
    15de:	8f 93       	push	r24
    15e0:	9f 93       	push	r25
    15e2:	af 93       	push	r26
    15e4:	bf 93       	push	r27
    15e6:	ef 93       	push	r30
    15e8:	ff 93       	push	r31
    15ea:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    15ee:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    15f2:	ac 01       	movw	r20, r24
    15f4:	09 2e       	mov	r0, r25
    15f6:	00 0c       	add	r0, r0
    15f8:	66 0b       	sbc	r22, r22
    15fa:	77 0b       	sbc	r23, r23
    15fc:	9a 01       	movw	r18, r20
    15fe:	11 27       	eor	r17, r17
    1600:	00 27       	eor	r16, r16
    1602:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1606:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	70 e0       	ldi	r23, 0x00	; 0
    160e:	40 2b       	or	r20, r16
    1610:	51 2b       	or	r21, r17
    1612:	62 2b       	or	r22, r18
    1614:	73 2b       	or	r23, r19
    1616:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    161a:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    161e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1622:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1626:	b0 9b       	sbis	0x16, 0	; 22
    1628:	1a c0       	rjmp	.+52     	; 0x165e <__vector_17+0x9a>
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	09 2e       	mov	r0, r25
    162e:	00 0c       	add	r0, r0
    1630:	aa 0b       	sbc	r26, r26
    1632:	bb 0b       	sbc	r27, r27
    1634:	bc 01       	movw	r22, r24
    1636:	55 27       	eor	r21, r21
    1638:	44 27       	eor	r20, r20
    163a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    163e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1642:	a0 e0       	ldi	r26, 0x00	; 0
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	84 2b       	or	r24, r20
    1648:	95 2b       	or	r25, r21
    164a:	a6 2b       	or	r26, r22
    164c:	b7 2b       	or	r27, r23
    164e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1652:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1656:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    165a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    165e:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x18>
    1662:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x19>
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	39 f0       	breq	.+14     	; 0x1678 <__vector_17+0xb4>
    166a:	6c e0       	ldi	r22, 0x0C	; 12
    166c:	70 e0       	ldi	r23, 0x00	; 0
    166e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x18>
    1672:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x19>
    1676:	09 95       	icall
    1678:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	0f 90       	pop	r0
    169a:	0f be       	out	0x3f, r0	; 63
    169c:	0f 90       	pop	r0
    169e:	1f 90       	pop	r1
    16a0:	18 95       	reti

000016a2 <__vector_18>:
    16a2:	1f 92       	push	r1
    16a4:	0f 92       	push	r0
    16a6:	0f b6       	in	r0, 0x3f	; 63
    16a8:	0f 92       	push	r0
    16aa:	11 24       	eor	r1, r1
    16ac:	0f 93       	push	r16
    16ae:	1f 93       	push	r17
    16b0:	2f 93       	push	r18
    16b2:	3f 93       	push	r19
    16b4:	4f 93       	push	r20
    16b6:	5f 93       	push	r21
    16b8:	6f 93       	push	r22
    16ba:	7f 93       	push	r23
    16bc:	8f 93       	push	r24
    16be:	9f 93       	push	r25
    16c0:	af 93       	push	r26
    16c2:	bf 93       	push	r27
    16c4:	ef 93       	push	r30
    16c6:	ff 93       	push	r31
    16c8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    16cc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    16d0:	ac 01       	movw	r20, r24
    16d2:	09 2e       	mov	r0, r25
    16d4:	00 0c       	add	r0, r0
    16d6:	66 0b       	sbc	r22, r22
    16d8:	77 0b       	sbc	r23, r23
    16da:	9a 01       	movw	r18, r20
    16dc:	11 27       	eor	r17, r17
    16de:	00 27       	eor	r16, r16
    16e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	40 2b       	or	r20, r16
    16ee:	51 2b       	or	r21, r17
    16f0:	62 2b       	or	r22, r18
    16f2:	73 2b       	or	r23, r19
    16f4:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    16f8:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    16fc:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1700:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1704:	b0 9b       	sbis	0x16, 0	; 22
    1706:	1a c0       	rjmp	.+52     	; 0x173c <__vector_18+0x9a>
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	09 2e       	mov	r0, r25
    170c:	00 0c       	add	r0, r0
    170e:	aa 0b       	sbc	r26, r26
    1710:	bb 0b       	sbc	r27, r27
    1712:	bc 01       	movw	r22, r24
    1714:	55 27       	eor	r21, r21
    1716:	44 27       	eor	r20, r20
    1718:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    171c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	84 2b       	or	r24, r20
    1726:	95 2b       	or	r25, r21
    1728:	a6 2b       	or	r26, r22
    172a:	b7 2b       	or	r27, r23
    172c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1730:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1734:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1738:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    173c:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x1a>
    1740:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x1b>
    1744:	30 97       	sbiw	r30, 0x00	; 0
    1746:	39 f0       	breq	.+14     	; 0x1756 <__vector_18+0xb4>
    1748:	6d e0       	ldi	r22, 0x0D	; 13
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x1a>
    1750:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x1b>
    1754:	09 95       	icall
    1756:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    175a:	ff 91       	pop	r31
    175c:	ef 91       	pop	r30
    175e:	bf 91       	pop	r27
    1760:	af 91       	pop	r26
    1762:	9f 91       	pop	r25
    1764:	8f 91       	pop	r24
    1766:	7f 91       	pop	r23
    1768:	6f 91       	pop	r22
    176a:	5f 91       	pop	r21
    176c:	4f 91       	pop	r20
    176e:	3f 91       	pop	r19
    1770:	2f 91       	pop	r18
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	0f 90       	pop	r0
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	0f 90       	pop	r0
    177c:	1f 90       	pop	r1
    177e:	18 95       	reti

00001780 <__vector_19>:
    1780:	1f 92       	push	r1
    1782:	0f 92       	push	r0
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	0f 92       	push	r0
    1788:	11 24       	eor	r1, r1
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	2f 93       	push	r18
    1790:	3f 93       	push	r19
    1792:	4f 93       	push	r20
    1794:	5f 93       	push	r21
    1796:	6f 93       	push	r22
    1798:	7f 93       	push	r23
    179a:	8f 93       	push	r24
    179c:	9f 93       	push	r25
    179e:	af 93       	push	r26
    17a0:	bf 93       	push	r27
    17a2:	ef 93       	push	r30
    17a4:	ff 93       	push	r31
    17a6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    17aa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    17ae:	ac 01       	movw	r20, r24
    17b0:	09 2e       	mov	r0, r25
    17b2:	00 0c       	add	r0, r0
    17b4:	66 0b       	sbc	r22, r22
    17b6:	77 0b       	sbc	r23, r23
    17b8:	9a 01       	movw	r18, r20
    17ba:	11 27       	eor	r17, r17
    17bc:	00 27       	eor	r16, r16
    17be:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	40 2b       	or	r20, r16
    17cc:	51 2b       	or	r21, r17
    17ce:	62 2b       	or	r22, r18
    17d0:	73 2b       	or	r23, r19
    17d2:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    17d6:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    17da:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    17de:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    17e2:	b0 9b       	sbis	0x16, 0	; 22
    17e4:	1a c0       	rjmp	.+52     	; 0x181a <__vector_19+0x9a>
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	09 2e       	mov	r0, r25
    17ea:	00 0c       	add	r0, r0
    17ec:	aa 0b       	sbc	r26, r26
    17ee:	bb 0b       	sbc	r27, r27
    17f0:	bc 01       	movw	r22, r24
    17f2:	55 27       	eor	r21, r21
    17f4:	44 27       	eor	r20, r20
    17f6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17fa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	84 2b       	or	r24, r20
    1804:	95 2b       	or	r25, r21
    1806:	a6 2b       	or	r26, r22
    1808:	b7 2b       	or	r27, r23
    180a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    180e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1812:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1816:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    181a:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <mtable+0x1c>
    181e:	f0 91 05 02 	lds	r31, 0x0205	; 0x800205 <mtable+0x1d>
    1822:	30 97       	sbiw	r30, 0x00	; 0
    1824:	39 f0       	breq	.+14     	; 0x1834 <__vector_19+0xb4>
    1826:	6e e0       	ldi	r22, 0x0E	; 14
    1828:	70 e0       	ldi	r23, 0x00	; 0
    182a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <otable+0x1c>
    182e:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <otable+0x1d>
    1832:	09 95       	icall
    1834:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1838:	ff 91       	pop	r31
    183a:	ef 91       	pop	r30
    183c:	bf 91       	pop	r27
    183e:	af 91       	pop	r26
    1840:	9f 91       	pop	r25
    1842:	8f 91       	pop	r24
    1844:	7f 91       	pop	r23
    1846:	6f 91       	pop	r22
    1848:	5f 91       	pop	r21
    184a:	4f 91       	pop	r20
    184c:	3f 91       	pop	r19
    184e:	2f 91       	pop	r18
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_20>:
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	2f 93       	push	r18
    186e:	3f 93       	push	r19
    1870:	4f 93       	push	r20
    1872:	5f 93       	push	r21
    1874:	6f 93       	push	r22
    1876:	7f 93       	push	r23
    1878:	8f 93       	push	r24
    187a:	9f 93       	push	r25
    187c:	af 93       	push	r26
    187e:	bf 93       	push	r27
    1880:	ef 93       	push	r30
    1882:	ff 93       	push	r31
    1884:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1888:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    188c:	ac 01       	movw	r20, r24
    188e:	09 2e       	mov	r0, r25
    1890:	00 0c       	add	r0, r0
    1892:	66 0b       	sbc	r22, r22
    1894:	77 0b       	sbc	r23, r23
    1896:	9a 01       	movw	r18, r20
    1898:	11 27       	eor	r17, r17
    189a:	00 27       	eor	r16, r16
    189c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	40 2b       	or	r20, r16
    18aa:	51 2b       	or	r21, r17
    18ac:	62 2b       	or	r22, r18
    18ae:	73 2b       	or	r23, r19
    18b0:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    18b4:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    18b8:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    18bc:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    18c0:	b0 9b       	sbis	0x16, 0	; 22
    18c2:	1a c0       	rjmp	.+52     	; 0x18f8 <__vector_20+0x9a>
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	09 2e       	mov	r0, r25
    18c8:	00 0c       	add	r0, r0
    18ca:	aa 0b       	sbc	r26, r26
    18cc:	bb 0b       	sbc	r27, r27
    18ce:	bc 01       	movw	r22, r24
    18d0:	55 27       	eor	r21, r21
    18d2:	44 27       	eor	r20, r20
    18d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18dc:	a0 e0       	ldi	r26, 0x00	; 0
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	84 2b       	or	r24, r20
    18e2:	95 2b       	or	r25, r21
    18e4:	a6 2b       	or	r26, r22
    18e6:	b7 2b       	or	r27, r23
    18e8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    18ec:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    18f0:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    18f4:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    18f8:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <mtable+0x1e>
    18fc:	f0 91 07 02 	lds	r31, 0x0207	; 0x800207 <mtable+0x1f>
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	39 f0       	breq	.+14     	; 0x1912 <__vector_20+0xb4>
    1904:	6f e0       	ldi	r22, 0x0F	; 15
    1906:	70 e0       	ldi	r23, 0x00	; 0
    1908:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <otable+0x1e>
    190c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <otable+0x1f>
    1910:	09 95       	icall
    1912:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1916:	ff 91       	pop	r31
    1918:	ef 91       	pop	r30
    191a:	bf 91       	pop	r27
    191c:	af 91       	pop	r26
    191e:	9f 91       	pop	r25
    1920:	8f 91       	pop	r24
    1922:	7f 91       	pop	r23
    1924:	6f 91       	pop	r22
    1926:	5f 91       	pop	r21
    1928:	4f 91       	pop	r20
    192a:	3f 91       	pop	r19
    192c:	2f 91       	pop	r18
    192e:	1f 91       	pop	r17
    1930:	0f 91       	pop	r16
    1932:	0f 90       	pop	r0
    1934:	0f be       	out	0x3f, r0	; 63
    1936:	0f 90       	pop	r0
    1938:	1f 90       	pop	r1
    193a:	18 95       	reti

0000193c <__vector_21>:
    193c:	1f 92       	push	r1
    193e:	0f 92       	push	r0
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	0f 92       	push	r0
    1944:	11 24       	eor	r1, r1
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    1962:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1966:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    196a:	ac 01       	movw	r20, r24
    196c:	09 2e       	mov	r0, r25
    196e:	00 0c       	add	r0, r0
    1970:	66 0b       	sbc	r22, r22
    1972:	77 0b       	sbc	r23, r23
    1974:	9a 01       	movw	r18, r20
    1976:	11 27       	eor	r17, r17
    1978:	00 27       	eor	r16, r16
    197a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    197e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	40 2b       	or	r20, r16
    1988:	51 2b       	or	r21, r17
    198a:	62 2b       	or	r22, r18
    198c:	73 2b       	or	r23, r19
    198e:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1992:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1996:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    199a:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    199e:	b0 9b       	sbis	0x16, 0	; 22
    19a0:	1a c0       	rjmp	.+52     	; 0x19d6 <__vector_21+0x9a>
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	09 2e       	mov	r0, r25
    19a6:	00 0c       	add	r0, r0
    19a8:	aa 0b       	sbc	r26, r26
    19aa:	bb 0b       	sbc	r27, r27
    19ac:	bc 01       	movw	r22, r24
    19ae:	55 27       	eor	r21, r21
    19b0:	44 27       	eor	r20, r20
    19b2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19ba:	a0 e0       	ldi	r26, 0x00	; 0
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	84 2b       	or	r24, r20
    19c0:	95 2b       	or	r25, r21
    19c2:	a6 2b       	or	r26, r22
    19c4:	b7 2b       	or	r27, r23
    19c6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    19ca:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    19ce:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    19d2:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    19d6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <mtable+0x20>
    19da:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <mtable+0x21>
    19de:	30 97       	sbiw	r30, 0x00	; 0
    19e0:	39 f0       	breq	.+14     	; 0x19f0 <__vector_21+0xb4>
    19e2:	60 e1       	ldi	r22, 0x10	; 16
    19e4:	70 e0       	ldi	r23, 0x00	; 0
    19e6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <otable+0x20>
    19ea:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <otable+0x21>
    19ee:	09 95       	icall
    19f0:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_22>:
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	2f 93       	push	r18
    1a2a:	3f 93       	push	r19
    1a2c:	4f 93       	push	r20
    1a2e:	5f 93       	push	r21
    1a30:	6f 93       	push	r22
    1a32:	7f 93       	push	r23
    1a34:	8f 93       	push	r24
    1a36:	9f 93       	push	r25
    1a38:	af 93       	push	r26
    1a3a:	bf 93       	push	r27
    1a3c:	ef 93       	push	r30
    1a3e:	ff 93       	push	r31
    1a40:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1a44:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1a48:	ac 01       	movw	r20, r24
    1a4a:	09 2e       	mov	r0, r25
    1a4c:	00 0c       	add	r0, r0
    1a4e:	66 0b       	sbc	r22, r22
    1a50:	77 0b       	sbc	r23, r23
    1a52:	9a 01       	movw	r18, r20
    1a54:	11 27       	eor	r17, r17
    1a56:	00 27       	eor	r16, r16
    1a58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	40 2b       	or	r20, r16
    1a66:	51 2b       	or	r21, r17
    1a68:	62 2b       	or	r22, r18
    1a6a:	73 2b       	or	r23, r19
    1a6c:	40 93 48 01 	sts	0x0148, r20	; 0x800148 <timestamp>
    1a70:	50 93 49 01 	sts	0x0149, r21	; 0x800149 <timestamp+0x1>
    1a74:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <timestamp+0x2>
    1a78:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <timestamp+0x3>
    1a7c:	b0 9b       	sbis	0x16, 0	; 22
    1a7e:	1a c0       	rjmp	.+52     	; 0x1ab4 <__vector_22+0x9a>
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	09 2e       	mov	r0, r25
    1a84:	00 0c       	add	r0, r0
    1a86:	aa 0b       	sbc	r26, r26
    1a88:	bb 0b       	sbc	r27, r27
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	55 27       	eor	r21, r21
    1a8e:	44 27       	eor	r20, r20
    1a90:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a94:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	84 2b       	or	r24, r20
    1a9e:	95 2b       	or	r25, r21
    1aa0:	a6 2b       	or	r26, r22
    1aa2:	b7 2b       	or	r27, r23
    1aa4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <timestamp>
    1aa8:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <timestamp+0x1>
    1aac:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <timestamp+0x2>
    1ab0:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <timestamp+0x3>
    1ab4:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <mtable+0x22>
    1ab8:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <mtable+0x23>
    1abc:	30 97       	sbiw	r30, 0x00	; 0
    1abe:	39 f0       	breq	.+14     	; 0x1ace <__vector_22+0xb4>
    1ac0:	61 e1       	ldi	r22, 0x11	; 17
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <otable+0x22>
    1ac8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <otable+0x23>
    1acc:	09 95       	icall
    1ace:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1ad2:	ff 91       	pop	r31
    1ad4:	ef 91       	pop	r30
    1ad6:	bf 91       	pop	r27
    1ad8:	af 91       	pop	r26
    1ada:	9f 91       	pop	r25
    1adc:	8f 91       	pop	r24
    1ade:	7f 91       	pop	r23
    1ae0:	6f 91       	pop	r22
    1ae2:	5f 91       	pop	r21
    1ae4:	4f 91       	pop	r20
    1ae6:	3f 91       	pop	r19
    1ae8:	2f 91       	pop	r18
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	0f 90       	pop	r0
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	0f 90       	pop	r0
    1af4:	1f 90       	pop	r1
    1af6:	18 95       	reti

00001af8 <idle>:
    1af8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1afc:	78 94       	sei
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	83 bf       	out	0x33, r24	; 51
    1b02:	88 95       	sleep
    1b04:	fc cf       	rjmp	.-8      	; 0x1afe <idle+0x6>

00001b06 <__vector_9>:
    1b06:	1f 92       	push	r1
    1b08:	0f 92       	push	r0
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	0f 92       	push	r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	2f 93       	push	r18
    1b12:	3f 93       	push	r19
    1b14:	4f 93       	push	r20
    1b16:	5f 93       	push	r21
    1b18:	6f 93       	push	r22
    1b1a:	7f 93       	push	r23
    1b1c:	8f 93       	push	r24
    1b1e:	9f 93       	push	r25
    1b20:	ef 93       	push	r30
    1b22:	ff 93       	push	r31
    1b24:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1b28:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1b2c:	01 96       	adiw	r24, 0x01	; 1
    1b2e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <overflows+0x1>
    1b32:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <overflows>
    1b36:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1b3a:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1b3e:	30 97       	sbiw	r30, 0x00	; 0
    1b40:	01 f1       	breq	.+64     	; 0x1b82 <__vector_9+0x7c>
    1b42:	42 81       	ldd	r20, Z+2	; 0x02
    1b44:	53 81       	ldd	r21, Z+3	; 0x03
    1b46:	64 81       	ldd	r22, Z+4	; 0x04
    1b48:	75 81       	ldd	r23, Z+5	; 0x05
    1b4a:	86 17       	cp	r24, r22
    1b4c:	97 07       	cpc	r25, r23
    1b4e:	c9 f4       	brne	.+50     	; 0x1b82 <__vector_9+0x7c>
    1b50:	ca 01       	movw	r24, r20
    1b52:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b56:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b5a:	42 1b       	sub	r20, r18
    1b5c:	53 0b       	sbc	r21, r19
    1b5e:	41 30       	cpi	r20, 0x01	; 1
    1b60:	51 05       	cpc	r21, r1
    1b62:	29 f4       	brne	.+10     	; 0x1b6e <__vector_9+0x68>
    1b64:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b68:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b72:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b76:	ef e6       	ldi	r30, 0x6F	; 111
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	82 60       	ori	r24, 0x02	; 2
    1b7e:	80 83       	st	Z, r24
    1b80:	05 c0       	rjmp	.+10     	; 0x1b8c <__vector_9+0x86>
    1b82:	ef e6       	ldi	r30, 0x6F	; 111
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	8d 7f       	andi	r24, 0xFD	; 253
    1b8a:	80 83       	st	Z, r24
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	9f 91       	pop	r25
    1b92:	8f 91       	pop	r24
    1b94:	7f 91       	pop	r23
    1b96:	6f 91       	pop	r22
    1b98:	5f 91       	pop	r21
    1b9a:	4f 91       	pop	r20
    1b9c:	3f 91       	pop	r19
    1b9e:	2f 91       	pop	r18
    1ba0:	0f 90       	pop	r0
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	0f 90       	pop	r0
    1ba6:	1f 90       	pop	r1
    1ba8:	18 95       	reti

00001baa <__vector_7>:
    1baa:	1f 92       	push	r1
    1bac:	0f 92       	push	r0
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	0f 92       	push	r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	cf 92       	push	r12
    1bb6:	df 92       	push	r13
    1bb8:	ef 92       	push	r14
    1bba:	ff 92       	push	r15
    1bbc:	2f 93       	push	r18
    1bbe:	3f 93       	push	r19
    1bc0:	4f 93       	push	r20
    1bc2:	5f 93       	push	r21
    1bc4:	6f 93       	push	r22
    1bc6:	7f 93       	push	r23
    1bc8:	8f 93       	push	r24
    1bca:	9f 93       	push	r25
    1bcc:	af 93       	push	r26
    1bce:	bf 93       	push	r27
    1bd0:	ef 93       	push	r30
    1bd2:	ff 93       	push	r31
    1bd4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <overflows>
    1bd8:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <overflows+0x1>
    1bdc:	6c 01       	movw	r12, r24
    1bde:	09 2e       	mov	r0, r25
    1be0:	00 0c       	add	r0, r0
    1be2:	ee 08       	sbc	r14, r14
    1be4:	ff 08       	sbc	r15, r15
    1be6:	76 01       	movw	r14, r12
    1be8:	dd 24       	eor	r13, r13
    1bea:	cc 24       	eor	r12, r12
    1bec:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bf0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	70 e0       	ldi	r23, 0x00	; 0
    1bf8:	c4 2a       	or	r12, r20
    1bfa:	d5 2a       	or	r13, r21
    1bfc:	e6 2a       	or	r14, r22
    1bfe:	f7 2a       	or	r15, r23
    1c00:	b0 9b       	sbis	0x16, 0	; 22
    1c02:	1e c0       	rjmp	.+60     	; 0x1c40 <__vector_7+0x96>
    1c04:	6c 01       	movw	r12, r24
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	c2 1a       	sub	r12, r18
    1c0a:	d2 0a       	sbc	r13, r18
    1c0c:	0d 2c       	mov	r0, r13
    1c0e:	00 0c       	add	r0, r0
    1c10:	ee 08       	sbc	r14, r14
    1c12:	ff 08       	sbc	r15, r15
    1c14:	d6 01       	movw	r26, r12
    1c16:	99 27       	eor	r25, r25
    1c18:	88 27       	eor	r24, r24
    1c1a:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c1e:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c22:	e1 2c       	mov	r14, r1
    1c24:	f1 2c       	mov	r15, r1
    1c26:	c8 2a       	or	r12, r24
    1c28:	d9 2a       	or	r13, r25
    1c2a:	ea 2a       	or	r14, r26
    1c2c:	fb 2a       	or	r15, r27
    1c2e:	08 c0       	rjmp	.+16     	; 0x1c40 <__vector_7+0x96>
    1c30:	8c e4       	ldi	r24, 0x4C	; 76
    1c32:	91 e0       	ldi	r25, 0x01	; 1
    1c34:	0e 94 45 05 	call	0xa8a	; 0xa8a <dequeue>
    1c38:	6e e4       	ldi	r22, 0x4E	; 78
    1c3a:	71 e0       	ldi	r23, 0x01	; 1
    1c3c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <enqueueByDeadline>
    1c40:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1c44:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1c48:	30 97       	sbiw	r30, 0x00	; 0
    1c4a:	69 f0       	breq	.+26     	; 0x1c66 <__vector_7+0xbc>
    1c4c:	82 81       	ldd	r24, Z+2	; 0x02
    1c4e:	93 81       	ldd	r25, Z+3	; 0x03
    1c50:	a4 81       	ldd	r26, Z+4	; 0x04
    1c52:	b5 81       	ldd	r27, Z+5	; 0x05
    1c54:	8c 19       	sub	r24, r12
    1c56:	9d 09       	sbc	r25, r13
    1c58:	ae 09       	sbc	r26, r14
    1c5a:	bf 09       	sbc	r27, r15
    1c5c:	18 16       	cp	r1, r24
    1c5e:	19 06       	cpc	r1, r25
    1c60:	1a 06       	cpc	r1, r26
    1c62:	1b 06       	cpc	r1, r27
    1c64:	2c f7       	brge	.-54     	; 0x1c30 <__vector_7+0x86>
    1c66:	30 97       	sbiw	r30, 0x00	; 0
    1c68:	21 f1       	breq	.+72     	; 0x1cb2 <__vector_7+0x108>
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	93 81       	ldd	r25, Z+3	; 0x03
    1c6e:	a4 81       	ldd	r26, Z+4	; 0x04
    1c70:	b5 81       	ldd	r27, Z+5	; 0x05
    1c72:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1c76:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1c7a:	2a 17       	cp	r18, r26
    1c7c:	3b 07       	cpc	r19, r27
    1c7e:	c9 f4       	brne	.+50     	; 0x1cb2 <__vector_7+0x108>
    1c80:	9c 01       	movw	r18, r24
    1c82:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c86:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c8a:	84 1b       	sub	r24, r20
    1c8c:	95 0b       	sbc	r25, r21
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	31 f4       	brne	.+12     	; 0x1c9e <__vector_7+0xf4>
    1c92:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c96:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c9a:	2f 5f       	subi	r18, 0xFF	; 255
    1c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c9e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ca2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ca6:	ef e6       	ldi	r30, 0x6F	; 111
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	82 60       	ori	r24, 0x02	; 2
    1cae:	80 83       	st	Z, r24
    1cb0:	05 c0       	rjmp	.+10     	; 0x1cbc <__vector_7+0x112>
    1cb2:	ef e6       	ldi	r30, 0x6F	; 111
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	8d 7f       	andi	r24, 0xFD	; 253
    1cba:	80 83       	st	Z, r24
    1cbc:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <schedule>
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <async>:
    1cea:	3f 92       	push	r3
    1cec:	4f 92       	push	r4
    1cee:	5f 92       	push	r5
    1cf0:	6f 92       	push	r6
    1cf2:	7f 92       	push	r7
    1cf4:	8f 92       	push	r8
    1cf6:	9f 92       	push	r9
    1cf8:	af 92       	push	r10
    1cfa:	bf 92       	push	r11
    1cfc:	cf 92       	push	r12
    1cfe:	df 92       	push	r13
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	2b 01       	movw	r4, r22
    1d0e:	3c 01       	movw	r6, r24
    1d10:	49 01       	movw	r8, r18
    1d12:	5a 01       	movw	r10, r20
    1d14:	8f b7       	in	r24, 0x3f	; 63
    1d16:	80 78       	andi	r24, 0x80	; 128
    1d18:	38 2e       	mov	r3, r24
    1d1a:	f8 94       	cli
    1d1c:	8b e2       	ldi	r24, 0x2B	; 43
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	0e 94 45 05 	call	0xa8a	; 0xa8a <dequeue>
    1d24:	ec 01       	movw	r28, r24
    1d26:	1b 87       	std	Y+11, r17	; 0x0b
    1d28:	0a 87       	std	Y+10, r16	; 0x0a
    1d2a:	fd 86       	std	Y+13, r15	; 0x0d
    1d2c:	ec 86       	std	Y+12, r14	; 0x0c
    1d2e:	df 86       	std	Y+15, r13	; 0x0f
    1d30:	ce 86       	std	Y+14, r12	; 0x0e
    1d32:	33 20       	and	r3, r3
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <async+0x64>
    1d36:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1d3a:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1d3e:	02 80       	ldd	r0, Z+2	; 0x02
    1d40:	f3 81       	ldd	r31, Z+3	; 0x03
    1d42:	e0 2d       	mov	r30, r0
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	a4 81       	ldd	r26, Z+4	; 0x04
    1d4a:	b5 81       	ldd	r27, Z+5	; 0x05
    1d4c:	08 c0       	rjmp	.+16     	; 0x1d5e <async+0x74>
    1d4e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <timestamp>
    1d52:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <timestamp+0x1>
    1d56:	a0 91 4a 01 	lds	r26, 0x014A	; 0x80014a <timestamp+0x2>
    1d5a:	b0 91 4b 01 	lds	r27, 0x014B	; 0x80014b <timestamp+0x3>
    1d5e:	48 0e       	add	r4, r24
    1d60:	59 1e       	adc	r5, r25
    1d62:	6a 1e       	adc	r6, r26
    1d64:	7b 1e       	adc	r7, r27
    1d66:	4a 82       	std	Y+2, r4	; 0x02
    1d68:	5b 82       	std	Y+3, r5	; 0x03
    1d6a:	6c 82       	std	Y+4, r6	; 0x04
    1d6c:	7d 82       	std	Y+5, r7	; 0x05
    1d6e:	18 14       	cp	r1, r8
    1d70:	19 04       	cpc	r1, r9
    1d72:	1a 04       	cpc	r1, r10
    1d74:	1b 04       	cpc	r1, r11
    1d76:	44 f0       	brlt	.+16     	; 0x1d88 <async+0x9e>
    1d78:	0f 2e       	mov	r0, r31
    1d7a:	88 24       	eor	r8, r8
    1d7c:	8a 94       	dec	r8
    1d7e:	98 2c       	mov	r9, r8
    1d80:	a8 2c       	mov	r10, r8
    1d82:	ff e7       	ldi	r31, 0x7F	; 127
    1d84:	bf 2e       	mov	r11, r31
    1d86:	f0 2d       	mov	r31, r0
    1d88:	84 0c       	add	r8, r4
    1d8a:	95 1c       	adc	r9, r5
    1d8c:	a6 1c       	adc	r10, r6
    1d8e:	b7 1c       	adc	r11, r7
    1d90:	8e 82       	std	Y+6, r8	; 0x06
    1d92:	9f 82       	std	Y+7, r9	; 0x07
    1d94:	a8 86       	std	Y+8, r10	; 0x08
    1d96:	b9 86       	std	Y+9, r11	; 0x09
    1d98:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1d9c:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1da0:	c9 01       	movw	r24, r18
    1da2:	03 2e       	mov	r0, r19
    1da4:	00 0c       	add	r0, r0
    1da6:	aa 0b       	sbc	r26, r26
    1da8:	bb 0b       	sbc	r27, r27
    1daa:	dc 01       	movw	r26, r24
    1dac:	99 27       	eor	r25, r25
    1dae:	88 27       	eor	r24, r24
    1db0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1db4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	84 2b       	or	r24, r20
    1dbe:	95 2b       	or	r25, r21
    1dc0:	a6 2b       	or	r26, r22
    1dc2:	b7 2b       	or	r27, r23
    1dc4:	b0 9b       	sbis	0x16, 0	; 22
    1dc6:	13 c0       	rjmp	.+38     	; 0x1dee <async+0x104>
    1dc8:	c9 01       	movw	r24, r18
    1dca:	01 96       	adiw	r24, 0x01	; 1
    1dcc:	09 2e       	mov	r0, r25
    1dce:	00 0c       	add	r0, r0
    1dd0:	aa 0b       	sbc	r26, r26
    1dd2:	bb 0b       	sbc	r27, r27
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	99 27       	eor	r25, r25
    1dd8:	88 27       	eor	r24, r24
    1dda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1dde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1de2:	60 e0       	ldi	r22, 0x00	; 0
    1de4:	70 e0       	ldi	r23, 0x00	; 0
    1de6:	84 2b       	or	r24, r20
    1de8:	95 2b       	or	r25, r21
    1dea:	a6 2b       	or	r26, r22
    1dec:	b7 2b       	or	r27, r23
    1dee:	48 1a       	sub	r4, r24
    1df0:	59 0a       	sbc	r5, r25
    1df2:	6a 0a       	sbc	r6, r26
    1df4:	7b 0a       	sbc	r7, r27
    1df6:	14 14       	cp	r1, r4
    1df8:	15 04       	cpc	r1, r5
    1dfa:	16 04       	cpc	r1, r6
    1dfc:	17 04       	cpc	r1, r7
    1dfe:	ac f5       	brge	.+106    	; 0x1e6a <async+0x180>
    1e00:	6c e4       	ldi	r22, 0x4C	; 76
    1e02:	71 e0       	ldi	r23, 0x01	; 1
    1e04:	ce 01       	movw	r24, r28
    1e06:	0e 94 14 05 	call	0xa28	; 0xa28 <enqueueByBaseline>
    1e0a:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <timerQ>
    1e0e:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <timerQ+0x1>
    1e12:	30 97       	sbiw	r30, 0x00	; 0
    1e14:	21 f1       	breq	.+72     	; 0x1e5e <async+0x174>
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e1c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e1e:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <overflows>
    1e22:	30 91 47 01 	lds	r19, 0x0147	; 0x800147 <overflows+0x1>
    1e26:	2a 17       	cp	r18, r26
    1e28:	3b 07       	cpc	r19, r27
    1e2a:	c9 f4       	brne	.+50     	; 0x1e5e <async+0x174>
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e36:	84 1b       	sub	r24, r20
    1e38:	95 0b       	sbc	r25, r21
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	31 f4       	brne	.+12     	; 0x1e4a <async+0x160>
    1e3e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e42:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e46:	2f 5f       	subi	r18, 0xFF	; 255
    1e48:	3f 4f       	sbci	r19, 0xFF	; 255
    1e4a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1e4e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1e52:	ef e6       	ldi	r30, 0x6F	; 111
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	82 60       	ori	r24, 0x02	; 2
    1e5a:	80 83       	st	Z, r24
    1e5c:	39 c0       	rjmp	.+114    	; 0x1ed0 <async+0x1e6>
    1e5e:	ef e6       	ldi	r30, 0x6F	; 111
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8d 7f       	andi	r24, 0xFD	; 253
    1e66:	80 83       	st	Z, r24
    1e68:	33 c0       	rjmp	.+102    	; 0x1ed0 <async+0x1e6>
    1e6a:	6e e4       	ldi	r22, 0x4E	; 78
    1e6c:	71 e0       	ldi	r23, 0x01	; 1
    1e6e:	ce 01       	movw	r24, r28
    1e70:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <enqueueByDeadline>
    1e74:	33 20       	and	r3, r3
    1e76:	61 f1       	breq	.+88     	; 0x1ed0 <async+0x1e6>
    1e78:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <threadPool>
    1e7c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <threadPool+0x1>
    1e80:	89 2b       	or	r24, r25
    1e82:	31 f1       	breq	.+76     	; 0x1ed0 <async+0x1e6>
    1e84:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
    1e88:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
    1e8c:	86 81       	ldd	r24, Z+6	; 0x06
    1e8e:	97 81       	ldd	r25, Z+7	; 0x07
    1e90:	a0 85       	ldd	r26, Z+8	; 0x08
    1e92:	b1 85       	ldd	r27, Z+9	; 0x09
    1e94:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    1e98:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    1e9c:	02 80       	ldd	r0, Z+2	; 0x02
    1e9e:	f3 81       	ldd	r31, Z+3	; 0x03
    1ea0:	e0 2d       	mov	r30, r0
    1ea2:	46 81       	ldd	r20, Z+6	; 0x06
    1ea4:	57 81       	ldd	r21, Z+7	; 0x07
    1ea6:	60 85       	ldd	r22, Z+8	; 0x08
    1ea8:	71 85       	ldd	r23, Z+9	; 0x09
    1eaa:	84 1b       	sub	r24, r20
    1eac:	95 0b       	sbc	r25, r21
    1eae:	a6 0b       	sbc	r26, r22
    1eb0:	b7 0b       	sbc	r27, r23
    1eb2:	72 f4       	brpl	.+28     	; 0x1ed0 <async+0x1e6>
    1eb4:	89 e2       	ldi	r24, 0x29	; 41
    1eb6:	91 e0       	ldi	r25, 0x01	; 1
    1eb8:	0e 94 70 05 	call	0xae0	; 0xae0 <pop>
    1ebc:	67 e2       	ldi	r22, 0x27	; 39
    1ebe:	71 e0       	ldi	r23, 0x01	; 1
    1ec0:	0e 94 66 05 	call	0xacc	; 0xacc <push>
    1ec4:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <activeStack>
    1ec8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <activeStack+0x1>
    1ecc:	0e 94 c3 04 	call	0x986	; 0x986 <dispatch>
    1ed0:	33 20       	and	r3, r3
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <async+0x1ec>
    1ed4:	78 94       	sei
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	4f 90       	pop	r4
    1ef8:	3f 90       	pop	r3
    1efa:	08 95       	ret

00001efc <sync>:
    1efc:	cf 92       	push	r12
    1efe:	df 92       	push	r13
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	ec 01       	movw	r28, r24
    1f0e:	7b 01       	movw	r14, r22
    1f10:	6a 01       	movw	r12, r20
    1f12:	1f b7       	in	r17, 0x3f	; 63
    1f14:	10 78       	andi	r17, 0x80	; 128
    1f16:	f8 94       	cli
    1f18:	a8 81       	ld	r26, Y
    1f1a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f1c:	10 97       	sbiw	r26, 0x00	; 0
    1f1e:	19 f4       	brne	.+6      	; 0x1f26 <sync+0x2a>
    1f20:	35 c0       	rjmp	.+106    	; 0x1f8c <sync+0x90>
    1f22:	a0 81       	ld	r26, Z
    1f24:	b1 81       	ldd	r27, Z+1	; 0x01
    1f26:	14 96       	adiw	r26, 0x04	; 4
    1f28:	ed 91       	ld	r30, X+
    1f2a:	fc 91       	ld	r31, X
    1f2c:	15 97       	sbiw	r26, 0x05	; 5
    1f2e:	30 97       	sbiw	r30, 0x00	; 0
    1f30:	c1 f7       	brne	.-16     	; 0x1f22 <sync+0x26>
    1f32:	20 91 25 01 	lds	r18, 0x0125	; 0x800125 <current>
    1f36:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <current+0x1>
    1f3a:	a2 17       	cp	r26, r18
    1f3c:	b3 07       	cpc	r27, r19
    1f3e:	11 f0       	breq	.+4      	; 0x1f44 <sync+0x48>
    1f40:	11 11       	cpse	r17, r1
    1f42:	07 c0       	rjmp	.+14     	; 0x1f52 <sync+0x56>
    1f44:	11 23       	and	r17, r17
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <sync+0x4e>
    1f48:	4a c0       	rjmp	.+148    	; 0x1fde <sync+0xe2>
    1f4a:	78 94       	sei
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	4e c0       	rjmp	.+156    	; 0x1fee <sync+0xf2>
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <sync+0x64>
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	15 82       	std	Z+5, r1	; 0x05
    1f5e:	14 82       	std	Z+4, r1	; 0x04
    1f60:	3b 83       	std	Y+3, r19	; 0x03
    1f62:	2a 83       	std	Y+2, r18	; 0x02
    1f64:	f9 01       	movw	r30, r18
    1f66:	d5 83       	std	Z+5, r29	; 0x05
    1f68:	c4 83       	std	Z+4, r28	; 0x04
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 c3 04 	call	0x986	; 0x986 <dispatch>
    1f70:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <current>
    1f74:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <current+0x1>
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	89 2b       	or	r24, r25
    1f7e:	31 f4       	brne	.+12     	; 0x1f8c <sync+0x90>
    1f80:	11 23       	and	r17, r17
    1f82:	81 f1       	breq	.+96     	; 0x1fe4 <sync+0xe8>
    1f84:	78 94       	sei
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	31 c0       	rjmp	.+98     	; 0x1fee <sync+0xf2>
    1f8c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <current>
    1f90:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <current+0x1>
    1f94:	99 83       	std	Y+1, r25	; 0x01
    1f96:	88 83       	st	Y, r24
    1f98:	11 23       	and	r17, r17
    1f9a:	29 f0       	breq	.+10     	; 0x1fa6 <sync+0xaa>
    1f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	09 f0       	breq	.+2      	; 0x1fa6 <sync+0xaa>
    1fa4:	78 94       	sei
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	ce 01       	movw	r24, r28
    1faa:	f7 01       	movw	r30, r14
    1fac:	09 95       	icall
    1fae:	f8 2e       	mov	r15, r24
    1fb0:	09 2f       	mov	r16, r25
    1fb2:	8f b7       	in	r24, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	19 82       	std	Y+1, r1	; 0x01
    1fb8:	18 82       	st	Y, r1
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	38 f0       	brcs	.+14     	; 0x1fd2 <sync+0xd6>
    1fc4:	1b 82       	std	Y+3, r1	; 0x03
    1fc6:	1a 82       	std	Y+2, r1	; 0x02
    1fc8:	fc 01       	movw	r30, r24
    1fca:	15 82       	std	Z+5, r1	; 0x05
    1fcc:	14 82       	std	Z+4, r1	; 0x04
    1fce:	0e 94 c3 04 	call	0x986	; 0x986 <dispatch>
    1fd2:	11 23       	and	r17, r17
    1fd4:	51 f0       	breq	.+20     	; 0x1fea <sync+0xee>
    1fd6:	78 94       	sei
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	90 2f       	mov	r25, r16
    1fdc:	08 c0       	rjmp	.+16     	; 0x1fee <sync+0xf2>
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	9f ef       	ldi	r25, 0xFF	; 255
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <sync+0xf2>
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <sync+0xf2>
    1fea:	8f 2d       	mov	r24, r15
    1fec:	90 2f       	mov	r25, r16
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	df 90       	pop	r13
    1ffc:	cf 90       	pop	r12
    1ffe:	08 95       	ret

00002000 <run>:
    2000:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <current>
    2004:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <current+0x1>
    2008:	8e e4       	ldi	r24, 0x4E	; 78
    200a:	91 e0       	ldi	r25, 0x01	; 1
    200c:	0e 94 45 05 	call	0xa8a	; 0xa8a <dequeue>
    2010:	ec 01       	movw	r28, r24
    2012:	f8 01       	movw	r30, r16
    2014:	93 83       	std	Z+3, r25	; 0x03
    2016:	82 83       	std	Z+2, r24	; 0x02
    2018:	78 94       	sei
    201a:	6c 85       	ldd	r22, Y+12	; 0x0c
    201c:	7d 85       	ldd	r23, Y+13	; 0x0d
    201e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2020:	5f 85       	ldd	r21, Y+15	; 0x0f
    2022:	8a 85       	ldd	r24, Y+10	; 0x0a
    2024:	9b 85       	ldd	r25, Y+11	; 0x0b
    2026:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <sync>
    202a:	8f b7       	in	r24, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	6b e2       	ldi	r22, 0x2B	; 43
    2030:	71 e0       	ldi	r23, 0x01	; 1
    2032:	ce 01       	movw	r24, r28
    2034:	0e 94 5c 05 	call	0xab8	; 0xab8 <insert>
    2038:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <activeStack>
    203c:	f0 91 28 01 	lds	r31, 0x0128	; 0x800128 <activeStack+0x1>
    2040:	01 90       	ld	r0, Z+
    2042:	f0 81       	ld	r31, Z
    2044:	e0 2d       	mov	r30, r0
    2046:	c2 81       	ldd	r28, Z+2	; 0x02
    2048:	d3 81       	ldd	r29, Z+3	; 0x03
    204a:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <msgQ>
    204e:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <msgQ+0x1>
    2052:	30 97       	sbiw	r30, 0x00	; 0
    2054:	a1 f0       	breq	.+40     	; 0x207e <run+0x7e>
    2056:	20 97       	sbiw	r28, 0x00	; 0
    2058:	99 f2       	breq	.-90     	; 0x2000 <run>
    205a:	86 81       	ldd	r24, Z+6	; 0x06
    205c:	97 81       	ldd	r25, Z+7	; 0x07
    205e:	a0 85       	ldd	r26, Z+8	; 0x08
    2060:	b1 85       	ldd	r27, Z+9	; 0x09
    2062:	4e 81       	ldd	r20, Y+6	; 0x06
    2064:	5f 81       	ldd	r21, Y+7	; 0x07
    2066:	68 85       	ldd	r22, Y+8	; 0x08
    2068:	79 85       	ldd	r23, Y+9	; 0x09
    206a:	84 1b       	sub	r24, r20
    206c:	95 0b       	sbc	r25, r21
    206e:	a6 0b       	sbc	r26, r22
    2070:	b7 0b       	sbc	r27, r23
    2072:	18 16       	cp	r1, r24
    2074:	19 06       	cpc	r1, r25
    2076:	1a 06       	cpc	r1, r26
    2078:	1b 06       	cpc	r1, r27
    207a:	0c f0       	brlt	.+2      	; 0x207e <run+0x7e>
    207c:	c1 cf       	rjmp	.-126    	; 0x2000 <run>
    207e:	87 e2       	ldi	r24, 0x27	; 39
    2080:	91 e0       	ldi	r25, 0x01	; 1
    2082:	0e 94 70 05 	call	0xae0	; 0xae0 <pop>
    2086:	69 e2       	ldi	r22, 0x29	; 41
    2088:	71 e0       	ldi	r23, 0x01	; 1
    208a:	0e 94 66 05 	call	0xacc	; 0xacc <push>
    208e:	a0 91 27 01 	lds	r26, 0x0127	; 0x800127 <activeStack>
    2092:	b0 91 28 01 	lds	r27, 0x0128	; 0x800128 <activeStack+0x1>
    2096:	02 c0       	rjmp	.+4      	; 0x209c <run+0x9c>
    2098:	a0 81       	ld	r26, Z
    209a:	b1 81       	ldd	r27, Z+1	; 0x01
    209c:	14 96       	adiw	r26, 0x04	; 4
    209e:	ed 91       	ld	r30, X+
    20a0:	fc 91       	ld	r31, X
    20a2:	15 97       	sbiw	r26, 0x05	; 5
    20a4:	30 97       	sbiw	r30, 0x00	; 0
    20a6:	c1 f7       	brne	.-16     	; 0x2098 <run+0x98>
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 c3 04 	call	0x986	; 0x986 <dispatch>
    20ae:	a8 cf       	rjmp	.-176    	; 0x2000 <run>

000020b0 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    20b0:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    20b2:	42 31       	cpi	r20, 0x12	; 18
    20b4:	b8 f4       	brcc	.+46     	; 0x20e4 <install+0x34>
        char status;
        DISABLE(status);
    20b6:	9f b7       	in	r25, 0x3f	; 63
    20b8:	90 78       	andi	r25, 0x80	; 128
    20ba:	f8 94       	cli
        otable[i] = obj;
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	44 0f       	add	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	da 01       	movw	r26, r20
    20c4:	a0 5b       	subi	r26, 0xB0	; 176
    20c6:	be 4f       	sbci	r27, 0xFE	; 254
    20c8:	ed 93       	st	X+, r30
    20ca:	fc 93       	st	X, r31
        mtable[i] = m;
    20cc:	da 01       	movw	r26, r20
    20ce:	a8 51       	subi	r26, 0x18	; 24
    20d0:	be 4f       	sbci	r27, 0xFE	; 254
    20d2:	6d 93       	st	X+, r22
    20d4:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	33 83       	std	Z+3, r19	; 0x03
    20dc:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    20de:	99 23       	and	r25, r25
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <install+0x34>
    20e2:	78 94       	sei
    20e4:	08 95       	ret

000020e6 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    20e6:	8c 01       	movw	r16, r24
    20e8:	7b 01       	movw	r14, r22
    20ea:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    20ec:	8f b7       	in	r24, 0x3f	; 63
    20ee:	f8 94       	cli
    initialize();
    20f0:	0e 94 24 04 	call	0x848	; 0x848 <initialize>
    ENABLE(1);
    20f4:	78 94       	sei
    if (m != NULL)
    20f6:	e1 14       	cp	r14, r1
    20f8:	f1 04       	cpc	r15, r1
    20fa:	41 f0       	breq	.+16     	; 0x210c <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	a9 01       	movw	r20, r18
    2102:	60 e0       	ldi	r22, 0x00	; 0
    2104:	70 e0       	ldi	r23, 0x00	; 0
    2106:	cb 01       	movw	r24, r22
    2108:	0e 94 75 0e 	call	0x1cea	; 0x1cea <async>
    DISABLE(status);
    210c:	8f b7       	in	r24, 0x3f	; 63
    210e:	f8 94       	cli
    idle();
    2110:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <idle>

00002114 <__divmodsi4>:
    2114:	05 2e       	mov	r0, r21
    2116:	97 fb       	bst	r25, 7
    2118:	1e f4       	brtc	.+6      	; 0x2120 <__divmodsi4+0xc>
    211a:	00 94       	com	r0
    211c:	0e 94 a1 10 	call	0x2142	; 0x2142 <__negsi2>
    2120:	57 fd       	sbrc	r21, 7
    2122:	07 d0       	rcall	.+14     	; 0x2132 <__divmodsi4_neg2>
    2124:	0e 94 a9 10 	call	0x2152	; 0x2152 <__udivmodsi4>
    2128:	07 fc       	sbrc	r0, 7
    212a:	03 d0       	rcall	.+6      	; 0x2132 <__divmodsi4_neg2>
    212c:	4e f4       	brtc	.+18     	; 0x2140 <__divmodsi4_exit>
    212e:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__negsi2>

00002132 <__divmodsi4_neg2>:
    2132:	50 95       	com	r21
    2134:	40 95       	com	r20
    2136:	30 95       	com	r19
    2138:	21 95       	neg	r18
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	4f 4f       	sbci	r20, 0xFF	; 255
    213e:	5f 4f       	sbci	r21, 0xFF	; 255

00002140 <__divmodsi4_exit>:
    2140:	08 95       	ret

00002142 <__negsi2>:
    2142:	90 95       	com	r25
    2144:	80 95       	com	r24
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255
    214c:	8f 4f       	sbci	r24, 0xFF	; 255
    214e:	9f 4f       	sbci	r25, 0xFF	; 255
    2150:	08 95       	ret

00002152 <__udivmodsi4>:
    2152:	a1 e2       	ldi	r26, 0x21	; 33
    2154:	1a 2e       	mov	r1, r26
    2156:	aa 1b       	sub	r26, r26
    2158:	bb 1b       	sub	r27, r27
    215a:	fd 01       	movw	r30, r26
    215c:	0d c0       	rjmp	.+26     	; 0x2178 <__udivmodsi4_ep>

0000215e <__udivmodsi4_loop>:
    215e:	aa 1f       	adc	r26, r26
    2160:	bb 1f       	adc	r27, r27
    2162:	ee 1f       	adc	r30, r30
    2164:	ff 1f       	adc	r31, r31
    2166:	a2 17       	cp	r26, r18
    2168:	b3 07       	cpc	r27, r19
    216a:	e4 07       	cpc	r30, r20
    216c:	f5 07       	cpc	r31, r21
    216e:	20 f0       	brcs	.+8      	; 0x2178 <__udivmodsi4_ep>
    2170:	a2 1b       	sub	r26, r18
    2172:	b3 0b       	sbc	r27, r19
    2174:	e4 0b       	sbc	r30, r20
    2176:	f5 0b       	sbc	r31, r21

00002178 <__udivmodsi4_ep>:
    2178:	66 1f       	adc	r22, r22
    217a:	77 1f       	adc	r23, r23
    217c:	88 1f       	adc	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	1a 94       	dec	r1
    2182:	69 f7       	brne	.-38     	; 0x215e <__udivmodsi4_loop>
    2184:	60 95       	com	r22
    2186:	70 95       	com	r23
    2188:	80 95       	com	r24
    218a:	90 95       	com	r25
    218c:	9b 01       	movw	r18, r22
    218e:	ac 01       	movw	r20, r24
    2190:	bd 01       	movw	r22, r26
    2192:	cf 01       	movw	r24, r30
    2194:	08 95       	ret

00002196 <setjmp>:
    2196:	dc 01       	movw	r26, r24
    2198:	2d 92       	st	X+, r2
    219a:	3d 92       	st	X+, r3
    219c:	4d 92       	st	X+, r4
    219e:	5d 92       	st	X+, r5
    21a0:	6d 92       	st	X+, r6
    21a2:	7d 92       	st	X+, r7
    21a4:	8d 92       	st	X+, r8
    21a6:	9d 92       	st	X+, r9
    21a8:	ad 92       	st	X+, r10
    21aa:	bd 92       	st	X+, r11
    21ac:	cd 92       	st	X+, r12
    21ae:	dd 92       	st	X+, r13
    21b0:	ed 92       	st	X+, r14
    21b2:	fd 92       	st	X+, r15
    21b4:	0d 93       	st	X+, r16
    21b6:	1d 93       	st	X+, r17
    21b8:	cd 93       	st	X+, r28
    21ba:	dd 93       	st	X+, r29
    21bc:	ff 91       	pop	r31
    21be:	ef 91       	pop	r30
    21c0:	8d b7       	in	r24, 0x3d	; 61
    21c2:	8d 93       	st	X+, r24
    21c4:	8e b7       	in	r24, 0x3e	; 62
    21c6:	8d 93       	st	X+, r24
    21c8:	8f b7       	in	r24, 0x3f	; 63
    21ca:	8d 93       	st	X+, r24
    21cc:	ed 93       	st	X+, r30
    21ce:	fd 93       	st	X+, r31
    21d0:	88 27       	eor	r24, r24
    21d2:	99 27       	eor	r25, r25
    21d4:	09 94       	ijmp

000021d6 <longjmp>:
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	81 1d       	adc	r24, r1
    21e0:	2d 90       	ld	r2, X+
    21e2:	3d 90       	ld	r3, X+
    21e4:	4d 90       	ld	r4, X+
    21e6:	5d 90       	ld	r5, X+
    21e8:	6d 90       	ld	r6, X+
    21ea:	7d 90       	ld	r7, X+
    21ec:	8d 90       	ld	r8, X+
    21ee:	9d 90       	ld	r9, X+
    21f0:	ad 90       	ld	r10, X+
    21f2:	bd 90       	ld	r11, X+
    21f4:	cd 90       	ld	r12, X+
    21f6:	dd 90       	ld	r13, X+
    21f8:	ed 90       	ld	r14, X+
    21fa:	fd 90       	ld	r15, X+
    21fc:	0d 91       	ld	r16, X+
    21fe:	1d 91       	ld	r17, X+
    2200:	cd 91       	ld	r28, X+
    2202:	dd 91       	ld	r29, X+
    2204:	ed 91       	ld	r30, X+
    2206:	fd 91       	ld	r31, X+
    2208:	0d 90       	ld	r0, X+
    220a:	f8 94       	cli
    220c:	fe bf       	out	0x3e, r31	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	ed bf       	out	0x3d, r30	; 61
    2212:	ed 91       	ld	r30, X+
    2214:	fd 91       	ld	r31, X+
    2216:	09 94       	ijmp

00002218 <_exit>:
    2218:	f8 94       	cli

0000221a <__stop_program>:
    221a:	ff cf       	rjmp	.-2      	; 0x221a <__stop_program>
