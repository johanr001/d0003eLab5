
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000233a  000023ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000233a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  0080013a  0080013a  00002408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cdc  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001027  00000000  00000000  000053c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015cd  00000000  00000000  000063eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cec  00000000  00000000  000079b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e0  00000000  00000000  000086a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a52  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000bad6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 e6 05 	jmp	0xbcc	; 0xbcc <__vector_1>
       8:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__vector_2>
       c:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__vector_3>
      10:	0c 94 33 07 	jmp	0xe66	; 0xe66 <__vector_4>
      14:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_9>
      28:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_10>
      2c:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__vector_11>
      30:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_12>
      34:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_13>
      38:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_14>
      3c:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_15>
      40:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <__vector_16>
      44:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__vector_17>
      48:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_18>
      4c:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_19>
      50:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_20>
      54:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_21>
      58:	0c 94 45 0d 	jmp	0x1a8a	; 0x1a8a <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea e3       	ldi	r30, 0x3A	; 58
      70:	f3 e2       	ldi	r31, 0x23	; 35
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	aa 33       	cpi	r26, 0x3A	; 58
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	aa e3       	ldi	r26, 0x3A	; 58
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a1 39       	cpi	r26, 0x91	; 145
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 37 04 	call	0x86e	; 0x86e <main>
      92:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <avr_init>:
#define BAUD 9600
#define MYUBRR FOSC/16/BAUD-1

// avr_init() initierar klockan, timer1, prescalers etc.
void avr_init(){
	CLKPR = 0x80;
      9a:	e1 e6       	ldi	r30, 0x61	; 97
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	80 e8       	ldi	r24, 0x80	; 128
      a0:	80 83       	st	Z, r24
	CLKPR = 0x00;
      a2:	10 82       	st	Z, r1

	
	TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);
      a4:	e1 e8       	ldi	r30, 0x81	; 129
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8d 60       	ori	r24, 0x0D	; 13
      ac:	80 83       	st	Z, r24
	
	TCNT1 = 0;
      ae:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
      b2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
	
	TIMSK1 |= (1 << OCIE1A);
      b6:	ef e6       	ldi	r30, 0x6F	; 111
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	80 83       	st	Z, r24
	OCR1A=194; //f_oCnA = (f_clk_I/O)/(2*N*(1+OCRnA) 194 eller 3905 för en sekund
      c0:	e2 ec       	ldi	r30, 0xC2	; 194
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
      c8:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	
	UBRR0H |= (MYUBRR>>8);
      cc:	a5 ec       	ldi	r26, 0xC5	; 197
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	8c 91       	ld	r24, X
      d2:	8c 93       	st	X, r24
	UBRR0L |= MYUBRR;
      d4:	a4 ec       	ldi	r26, 0xC4	; 196
      d6:	b0 e0       	ldi	r27, 0x00	; 0
      d8:	8c 91       	ld	r24, X
      da:	83 63       	ori	r24, 0x33	; 51
      dc:	8c 93       	st	X, r24
	// Reciever, transmitter, och interrupt.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
      de:	88 e9       	ldi	r24, 0x98	; 152
      e0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	// 8 Data, 1 stop bit
	UCSR0C = (0 << USBS0) | (1 << UCSZ01) | (1 << UCSZ00);
      e4:	86 e0       	ldi	r24, 0x06	; 6
      e6:	80 83       	st	Z, r24
      e8:	08 95       	ret

000000ea <updateBridgeAmount>:
	}

	return 0;
}

int updateBridgeAmount(Controller *self, int arg) {
      ea:	fc 01       	movw	r30, r24
	self->BridgeAmount += arg;
      ec:	ab 01       	movw	r20, r22
      ee:	77 0f       	add	r23, r23
      f0:	66 0b       	sbc	r22, r22
      f2:	77 0b       	sbc	r23, r23
      f4:	86 85       	ldd	r24, Z+14	; 0x0e
      f6:	97 85       	ldd	r25, Z+15	; 0x0f
      f8:	a0 89       	ldd	r26, Z+16	; 0x10
      fa:	b1 89       	ldd	r27, Z+17	; 0x11
      fc:	84 0f       	add	r24, r20
      fe:	95 1f       	adc	r25, r21
     100:	a6 1f       	adc	r26, r22
     102:	b7 1f       	adc	r27, r23
     104:	86 87       	std	Z+14, r24	; 0x0e
     106:	97 87       	std	Z+15, r25	; 0x0f
     108:	a0 8b       	std	Z+16, r26	; 0x10
     10a:	b1 8b       	std	Z+17, r27	; 0x11
	return 0;
}
     10c:	80 e0       	ldi	r24, 0x00	; 0
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	08 95       	ret

00000112 <idleState>:

int idleState(Controller *self, int arg) {
     112:	cf 92       	push	r12
     114:	df 92       	push	r13
     116:	ef 92       	push	r14
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	fc 01       	movw	r30, r24
	self->BridgePassedSameDir = 0;
     124:	12 8a       	std	Z+18, r1	; 0x12
     126:	13 8a       	std	Z+19, r1	; 0x13
     128:	14 8a       	std	Z+20, r1	; 0x14
     12a:	15 8a       	std	Z+21, r1	; 0x15
	
	int *priorityQueue = self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
     12c:	86 89       	ldd	r24, Z+22	; 0x16
     12e:	88 23       	and	r24, r24
     130:	19 f0       	breq	.+6      	; 0x138 <idleState+0x26>
     132:	df 01       	movw	r26, r30
     134:	1a 96       	adiw	r26, 0x0a	; 10
     136:	02 c0       	rjmp	.+4      	; 0x13c <idleState+0x2a>
     138:	df 01       	movw	r26, r30
     13a:	16 96       	adiw	r26, 0x06	; 6
	int *secondaryQueue = self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
     13c:	88 23       	and	r24, r24
     13e:	19 f0       	breq	.+6      	; 0x146 <idleState+0x34>
     140:	ef 01       	movw	r28, r30
     142:	26 96       	adiw	r28, 0x06	; 6
     144:	02 c0       	rjmp	.+4      	; 0x14a <idleState+0x38>
     146:	ef 01       	movw	r28, r30
     148:	2a 96       	adiw	r28, 0x0a	; 10

	if (*priorityQueue > 0) {
     14a:	2d 91       	ld	r18, X+
     14c:	3c 91       	ld	r19, X
     14e:	12 16       	cp	r1, r18
     150:	13 06       	cpc	r1, r19
     152:	ac f4       	brge	.+42     	; 0x17e <idleState+0x6c>
		self->lastBridgeDir = !self->lastBridgeDir;
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	89 27       	eor	r24, r25
     158:	86 8b       	std	Z+22, r24	; 0x16
		ASYNC(self, dispatchNextCar, 0);
     15a:	c1 2c       	mov	r12, r1
     15c:	d1 2c       	mov	r13, r1
     15e:	0f 2e       	mov	r0, r31
     160:	fc e2       	ldi	r31, 0x2C	; 44
     162:	ef 2e       	mov	r14, r31
     164:	f1 e0       	ldi	r31, 0x01	; 1
     166:	ff 2e       	mov	r15, r31
     168:	f0 2d       	mov	r31, r0
     16a:	8f 01       	movw	r16, r30
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	a9 01       	movw	r20, r18
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	cb 01       	movw	r24, r22
     178:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
     17c:	29 c0       	rjmp	.+82     	; 0x1d0 <idleState+0xbe>
		} else if (*secondaryQueue > 0) {
     17e:	88 81       	ld	r24, Y
     180:	99 81       	ldd	r25, Y+1	; 0x01
     182:	18 16       	cp	r1, r24
     184:	19 06       	cpc	r1, r25
     186:	94 f4       	brge	.+36     	; 0x1ac <idleState+0x9a>
		ASYNC(self, dispatchNextCar, 0);
     188:	c1 2c       	mov	r12, r1
     18a:	d1 2c       	mov	r13, r1
     18c:	0f 2e       	mov	r0, r31
     18e:	fc e2       	ldi	r31, 0x2C	; 44
     190:	ef 2e       	mov	r14, r31
     192:	f1 e0       	ldi	r31, 0x01	; 1
     194:	ff 2e       	mov	r15, r31
     196:	f0 2d       	mov	r31, r0
     198:	8f 01       	movw	r16, r30
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	a9 01       	movw	r20, r18
     1a0:	60 e0       	ldi	r22, 0x00	; 0
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	cb 01       	movw	r24, r22
     1a6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
     1aa:	12 c0       	rjmp	.+36     	; 0x1d0 <idleState+0xbe>
		} else {
		AFTER(MSEC(IDLE_DELAY_MSEC), self, idleState, 0);
     1ac:	c1 2c       	mov	r12, r1
     1ae:	d1 2c       	mov	r13, r1
     1b0:	0f 2e       	mov	r0, r31
     1b2:	f9 e8       	ldi	r31, 0x89	; 137
     1b4:	ef 2e       	mov	r14, r31
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	ff 2e       	mov	r15, r31
     1ba:	f0 2d       	mov	r31, r0
     1bc:	8f 01       	movw	r16, r30
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	a9 01       	movw	r20, r18
     1c4:	69 e0       	ldi	r22, 0x09	; 9
     1c6:	7d e3       	ldi	r23, 0x3D	; 61
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	}
	
	return 0;
}
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	08 95       	ret

000001e6 <waitForBridgeClearance>:

int waitForBridgeClearance(Controller *self, int arg) {
     1e6:	cf 92       	push	r12
     1e8:	df 92       	push	r13
     1ea:	ef 92       	push	r14
     1ec:	ff 92       	push	r15
     1ee:	0f 93       	push	r16
     1f0:	1f 93       	push	r17
     1f2:	8c 01       	movw	r16, r24
	if (self->BridgeAmount == 0) {
     1f4:	fc 01       	movw	r30, r24
     1f6:	86 85       	ldd	r24, Z+14	; 0x0e
     1f8:	97 85       	ldd	r25, Z+15	; 0x0f
     1fa:	a0 89       	ldd	r26, Z+16	; 0x10
     1fc:	b1 89       	ldd	r27, Z+17	; 0x11
     1fe:	89 2b       	or	r24, r25
     200:	8a 2b       	or	r24, r26
     202:	8b 2b       	or	r24, r27
     204:	89 f4       	brne	.+34     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
		ASYNC(self, idleState, 0);
     206:	c1 2c       	mov	r12, r1
     208:	d1 2c       	mov	r13, r1
     20a:	0f 2e       	mov	r0, r31
     20c:	f9 e8       	ldi	r31, 0x89	; 137
     20e:	ef 2e       	mov	r14, r31
     210:	f0 e0       	ldi	r31, 0x00	; 0
     212:	ff 2e       	mov	r15, r31
     214:	f0 2d       	mov	r31, r0
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	a9 01       	movw	r20, r18
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	cb 01       	movw	r24, r22
     222:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
     226:	0f c0       	rjmp	.+30     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
		} else {
		AFTER(CURRENT_OFFSET(), self, waitForBridgeClearance, 0);
     228:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     22c:	c1 2c       	mov	r12, r1
     22e:	d1 2c       	mov	r13, r1
     230:	0f 2e       	mov	r0, r31
     232:	f3 ef       	ldi	r31, 0xF3	; 243
     234:	ef 2e       	mov	r14, r31
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	ff 2e       	mov	r15, r31
     23a:	f0 2d       	mov	r31, r0
     23c:	20 e0       	ldi	r18, 0x00	; 0
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	a9 01       	movw	r20, r18
     242:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	}
	return 0;
}
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	1f 91       	pop	r17
     24c:	0f 91       	pop	r16
     24e:	ff 90       	pop	r15
     250:	ef 90       	pop	r14
     252:	df 90       	pop	r13
     254:	cf 90       	pop	r12
     256:	08 95       	ret

00000258 <dispatchNextCar>:

int dispatchNextCar(Controller *self, int arg) {
     258:	cf 92       	push	r12
     25a:	df 92       	push	r13
     25c:	ef 92       	push	r14
     25e:	ff 92       	push	r15
     260:	0f 93       	push	r16
     262:	1f 93       	push	r17
	int *currentQueue = self->lastBridgeDir ? &self->NorthQueue : &self->SouthQueue;
     264:	fc 01       	movw	r30, r24
     266:	26 89       	ldd	r18, Z+22	; 0x16
     268:	22 23       	and	r18, r18
     26a:	11 f0       	breq	.+4      	; 0x270 <dispatchNextCar+0x18>
     26c:	36 96       	adiw	r30, 0x06	; 6
     26e:	02 c0       	rjmp	.+4      	; 0x274 <dispatchNextCar+0x1c>
     270:	fc 01       	movw	r30, r24
     272:	3a 96       	adiw	r30, 0x0a	; 10
	int *oppositeQueue = self->lastBridgeDir ? &self->SouthQueue : &self->NorthQueue;
     274:	22 23       	and	r18, r18
     276:	19 f0       	breq	.+6      	; 0x27e <dispatchNextCar+0x26>
     278:	dc 01       	movw	r26, r24
     27a:	1a 96       	adiw	r26, 0x0a	; 10
     27c:	02 c0       	rjmp	.+4      	; 0x282 <dispatchNextCar+0x2a>
     27e:	dc 01       	movw	r26, r24
     280:	16 96       	adiw	r26, 0x06	; 6

	if (!(*currentQueue) || (self->BridgePassedSameDir >= MAX_PASS_SAME_SIDE && *oppositeQueue > 0)) {
     282:	20 81       	ld	r18, Z
     284:	31 81       	ldd	r19, Z+1	; 0x01
     286:	23 2b       	or	r18, r19
     288:	79 f0       	breq	.+30     	; 0x2a8 <dispatchNextCar+0x50>
     28a:	fc 01       	movw	r30, r24
     28c:	42 89       	ldd	r20, Z+18	; 0x12
     28e:	53 89       	ldd	r21, Z+19	; 0x13
     290:	64 89       	ldd	r22, Z+20	; 0x14
     292:	75 89       	ldd	r23, Z+21	; 0x15
     294:	4a 30       	cpi	r20, 0x0A	; 10
     296:	51 05       	cpc	r21, r1
     298:	61 05       	cpc	r22, r1
     29a:	71 05       	cpc	r23, r1
     29c:	b8 f0       	brcs	.+46     	; 0x2cc <dispatchNextCar+0x74>
     29e:	2d 91       	ld	r18, X+
     2a0:	3c 91       	ld	r19, X
     2a2:	12 16       	cp	r1, r18
     2a4:	13 06       	cpc	r1, r19
     2a6:	94 f4       	brge	.+36     	; 0x2cc <dispatchNextCar+0x74>
		ASYNC(self, waitForBridgeClearance, 0);
     2a8:	c1 2c       	mov	r12, r1
     2aa:	d1 2c       	mov	r13, r1
     2ac:	0f 2e       	mov	r0, r31
     2ae:	f3 ef       	ldi	r31, 0xF3	; 243
     2b0:	ef 2e       	mov	r14, r31
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	ff 2e       	mov	r15, r31
     2b6:	f0 2d       	mov	r31, r0
     2b8:	8c 01       	movw	r16, r24
     2ba:	20 e0       	ldi	r18, 0x00	; 0
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	a9 01       	movw	r20, r18
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	cb 01       	movw	r24, r22
     2c6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
		return 0;
     2ca:	11 c0       	rjmp	.+34     	; 0x2ee <dispatchNextCar+0x96>
	}

	ASYNC(self, signalGreenLight, 0);
     2cc:	c1 2c       	mov	r12, r1
     2ce:	d1 2c       	mov	r13, r1
     2d0:	0f 2e       	mov	r0, r31
     2d2:	f0 e8       	ldi	r31, 0x80	; 128
     2d4:	ef 2e       	mov	r14, r31
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	ff 2e       	mov	r15, r31
     2da:	f0 2d       	mov	r31, r0
     2dc:	8c 01       	movw	r16, r24
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	a9 01       	movw	r20, r18
     2e4:	60 e0       	ldi	r22, 0x00	; 0
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	cb 01       	movw	r24, r22
     2ea:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	return 0;
}
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	08 95       	ret

00000300 <signalGreenLight>:

int signalGreenLight(Controller *self, int arg) {
     300:	cf 92       	push	r12
     302:	df 92       	push	r13
     304:	ef 92       	push	r14
     306:	ff 92       	push	r15
     308:	0f 93       	push	r16
     30a:	1f 93       	push	r17
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	ec 01       	movw	r28, r24
	int data = self->lastBridgeDir ? NORTH_GREEN : SOUTH_GREEN;
     312:	8e 89       	ldd	r24, Y+22	; 0x16
     314:	88 23       	and	r24, r24
     316:	21 f0       	breq	.+8      	; 0x320 <signalGreenLight+0x20>
     318:	cc 24       	eor	r12, r12
     31a:	c3 94       	inc	r12
     31c:	d1 2c       	mov	r13, r1
     31e:	04 c0       	rjmp	.+8      	; 0x328 <signalGreenLight+0x28>
     320:	68 94       	set
     322:	cc 24       	eor	r12, r12
     324:	c2 f8       	bld	r12, 2
     326:	d1 2c       	mov	r13, r1
	ASYNC(self->serialCom, USARTtransmit, data);
     328:	0c 81       	ldd	r16, Y+4	; 0x04
     32a:	1d 81       	ldd	r17, Y+5	; 0x05
     32c:	0f 2e       	mov	r0, r31
     32e:	fb e4       	ldi	r31, 0x4B	; 75
     330:	ef 2e       	mov	r14, r31
     332:	f4 e0       	ldi	r31, 0x04	; 4
     334:	ff 2e       	mov	r15, r31
     336:	f0 2d       	mov	r31, r0
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	a9 01       	movw	r20, r18
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	70 e0       	ldi	r23, 0x00	; 0
     342:	cb 01       	movw	r24, r22
     344:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>

	// Add a delay before transitioning to `wait_car_entry`
	AFTER(CURRENT_OFFSET() + MSEC(GREEN_LIGHT_TIME_MSEC), self, monitorCarEntry, 0);
     348:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     34c:	67 5f       	subi	r22, 0xF7	; 247
     34e:	72 4c       	sbci	r23, 0xC2	; 194
     350:	8f 4f       	sbci	r24, 0xFF	; 255
     352:	9f 4f       	sbci	r25, 0xFF	; 255
     354:	c1 2c       	mov	r12, r1
     356:	d1 2c       	mov	r13, r1
     358:	0f 2e       	mov	r0, r31
     35a:	f3 ec       	ldi	r31, 0xC3	; 195
     35c:	ef 2e       	mov	r14, r31
     35e:	f1 e0       	ldi	r31, 0x01	; 1
     360:	ff 2e       	mov	r15, r31
     362:	f0 2d       	mov	r31, r0
     364:	8e 01       	movw	r16, r28
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	a9 01       	movw	r20, r18
     36c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	return 0;
}
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	08 95       	ret

00000386 <monitorCarEntry>:

int monitorCarEntry(Controller *self, int arg) {
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
	if (self->BridgeAmount > 0) {  // A car has entered
     398:	8e 85       	ldd	r24, Y+14	; 0x0e
     39a:	9f 85       	ldd	r25, Y+15	; 0x0f
     39c:	a8 89       	ldd	r26, Y+16	; 0x10
     39e:	b9 89       	ldd	r27, Y+17	; 0x11
     3a0:	89 2b       	or	r24, r25
     3a2:	8a 2b       	or	r24, r26
     3a4:	8b 2b       	or	r24, r27
     3a6:	89 f1       	breq	.+98     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		int bits = self->lastBridgeDir ? NORTH_RED : SOUTH_RED;
     3a8:	8e 89       	ldd	r24, Y+22	; 0x16
     3aa:	88 23       	and	r24, r24
     3ac:	29 f0       	breq	.+10     	; 0x3b8 <monitorCarEntry+0x32>
     3ae:	68 94       	set
     3b0:	cc 24       	eor	r12, r12
     3b2:	c1 f8       	bld	r12, 1
     3b4:	d1 2c       	mov	r13, r1
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <monitorCarEntry+0x3a>
     3b8:	68 94       	set
     3ba:	cc 24       	eor	r12, r12
     3bc:	c3 f8       	bld	r12, 3
     3be:	d1 2c       	mov	r13, r1
		ASYNC(self->serialCom, USARTtransmit, bits);
     3c0:	0c 81       	ldd	r16, Y+4	; 0x04
     3c2:	1d 81       	ldd	r17, Y+5	; 0x05
     3c4:	0f 2e       	mov	r0, r31
     3c6:	fb e4       	ldi	r31, 0x4B	; 75
     3c8:	ef 2e       	mov	r14, r31
     3ca:	f4 e0       	ldi	r31, 0x04	; 4
     3cc:	ff 2e       	mov	r15, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	20 e0       	ldi	r18, 0x00	; 0
     3d2:	30 e0       	ldi	r19, 0x00	; 0
     3d4:	a9 01       	movw	r20, r18
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	cb 01       	movw	r24, r22
     3dc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
		AFTER(CURRENT_OFFSET() + SEC(TIME_QUEUE), self, dispatchNextCar, 0);
     3e0:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     3e4:	6e 5e       	subi	r22, 0xEE	; 238
     3e6:	75 48       	sbci	r23, 0x85	; 133
     3e8:	8f 4f       	sbci	r24, 0xFF	; 255
     3ea:	9f 4f       	sbci	r25, 0xFF	; 255
     3ec:	c1 2c       	mov	r12, r1
     3ee:	d1 2c       	mov	r13, r1
     3f0:	0f 2e       	mov	r0, r31
     3f2:	fc e2       	ldi	r31, 0x2C	; 44
     3f4:	ef 2e       	mov	r14, r31
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	ff 2e       	mov	r15, r31
     3fa:	f0 2d       	mov	r31, r0
     3fc:	8e 01       	movw	r16, r28
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	a9 01       	movw	r20, r18
     404:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
     408:	10 c0       	rjmp	.+32     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
		} else {
		AFTER(CURRENT_OFFSET(), self, monitorCarEntry, 0);
     40a:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     40e:	c1 2c       	mov	r12, r1
     410:	d1 2c       	mov	r13, r1
     412:	0f 2e       	mov	r0, r31
     414:	f3 ec       	ldi	r31, 0xC3	; 195
     416:	ef 2e       	mov	r14, r31
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	ff 2e       	mov	r15, r31
     41c:	f0 2d       	mov	r31, r0
     41e:	8e 01       	movw	r16, r28
     420:	20 e0       	ldi	r18, 0x00	; 0
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	a9 01       	movw	r20, r18
     426:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	}
	return 0;
}
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	08 95       	ret

00000440 <bitParser>:
#include "Controller.h"

int bitParser(Controller *self, int arg) {
     440:	bf 92       	push	r11
     442:	cf 92       	push	r12
     444:	df 92       	push	r13
     446:	ef 92       	push	r14
     448:	ff 92       	push	r15
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	ec 01       	movw	r28, r24
	int data = SYNC(self->serialCom, USARTreceive, 0);
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	64 e5       	ldi	r22, 0x54	; 84
     45a:	74 e0       	ldi	r23, 0x04	; 4
     45c:	8c 81       	ldd	r24, Y+4	; 0x04
     45e:	9d 81       	ldd	r25, Y+5	; 0x05
     460:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sync>
     464:	b8 2e       	mov	r11, r24

	if (data & NORTH_ARRIVAL) {
     466:	80 ff       	sbrs	r24, 0
     468:	0b c0       	rjmp	.+22     	; 0x480 <bitParser+0x40>
		self->NorthQueue++;
     46a:	8e 81       	ldd	r24, Y+6	; 0x06
     46c:	9f 81       	ldd	r25, Y+7	; 0x07
     46e:	a8 85       	ldd	r26, Y+8	; 0x08
     470:	b9 85       	ldd	r27, Y+9	; 0x09
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	a1 1d       	adc	r26, r1
     476:	b1 1d       	adc	r27, r1
     478:	8e 83       	std	Y+6, r24	; 0x06
     47a:	9f 83       	std	Y+7, r25	; 0x07
     47c:	a8 87       	std	Y+8, r26	; 0x08
     47e:	b9 87       	std	Y+9, r27	; 0x09
	}

	if (data & SOUTH_ARRIVAL) {
     480:	b2 fe       	sbrs	r11, 2
     482:	0b c0       	rjmp	.+22     	; 0x49a <bitParser+0x5a>
		self->SouthQueue++;
     484:	8a 85       	ldd	r24, Y+10	; 0x0a
     486:	9b 85       	ldd	r25, Y+11	; 0x0b
     488:	ac 85       	ldd	r26, Y+12	; 0x0c
     48a:	bd 85       	ldd	r27, Y+13	; 0x0d
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	a1 1d       	adc	r26, r1
     490:	b1 1d       	adc	r27, r1
     492:	8a 87       	std	Y+10, r24	; 0x0a
     494:	9b 87       	std	Y+11, r25	; 0x0b
     496:	ac 87       	std	Y+12, r26	; 0x0c
     498:	bd 87       	std	Y+13, r27	; 0x0d
	}

	if (data & NORTH_ENTRY) {
     49a:	b1 fe       	sbrs	r11, 1
     49c:	36 c0       	rjmp	.+108    	; 0x50a <__stack+0xb>
		self->NorthQueue--;
     49e:	8e 81       	ldd	r24, Y+6	; 0x06
     4a0:	9f 81       	ldd	r25, Y+7	; 0x07
     4a2:	a8 85       	ldd	r26, Y+8	; 0x08
     4a4:	b9 85       	ldd	r27, Y+9	; 0x09
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	a1 09       	sbc	r26, r1
     4aa:	b1 09       	sbc	r27, r1
     4ac:	8e 83       	std	Y+6, r24	; 0x06
     4ae:	9f 83       	std	Y+7, r25	; 0x07
     4b0:	a8 87       	std	Y+8, r26	; 0x08
     4b2:	b9 87       	std	Y+9, r27	; 0x09
		self->BridgeAmount++;
     4b4:	8e 85       	ldd	r24, Y+14	; 0x0e
     4b6:	9f 85       	ldd	r25, Y+15	; 0x0f
     4b8:	a8 89       	ldd	r26, Y+16	; 0x10
     4ba:	b9 89       	ldd	r27, Y+17	; 0x11
     4bc:	01 96       	adiw	r24, 0x01	; 1
     4be:	a1 1d       	adc	r26, r1
     4c0:	b1 1d       	adc	r27, r1
     4c2:	8e 87       	std	Y+14, r24	; 0x0e
     4c4:	9f 87       	std	Y+15, r25	; 0x0f
     4c6:	a8 8b       	std	Y+16, r26	; 0x10
     4c8:	b9 8b       	std	Y+17, r27	; 0x11
		self->BridgePassedSameDir++;
     4ca:	8a 89       	ldd	r24, Y+18	; 0x12
     4cc:	9b 89       	ldd	r25, Y+19	; 0x13
     4ce:	ac 89       	ldd	r26, Y+20	; 0x14
     4d0:	bd 89       	ldd	r27, Y+21	; 0x15
     4d2:	01 96       	adiw	r24, 0x01	; 1
     4d4:	a1 1d       	adc	r26, r1
     4d6:	b1 1d       	adc	r27, r1
     4d8:	8a 8b       	std	Y+18, r24	; 0x12
     4da:	9b 8b       	std	Y+19, r25	; 0x13
     4dc:	ac 8b       	std	Y+20, r26	; 0x14
     4de:	bd 8b       	std	Y+21, r27	; 0x15
		AFTER(CURRENT_OFFSET() + SEC(BRIDGE_TIME), self, updateBridgeAmount, -1);
     4e0:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     4e4:	66 5a       	subi	r22, 0xA6	; 166
     4e6:	7d 49       	sbci	r23, 0x9D	; 157
     4e8:	8d 4f       	sbci	r24, 0xFD	; 253
     4ea:	9f 4f       	sbci	r25, 0xFF	; 255
     4ec:	cc 24       	eor	r12, r12
     4ee:	ca 94       	dec	r12
     4f0:	dc 2c       	mov	r13, r12
     4f2:	0f 2e       	mov	r0, r31
     4f4:	f5 e7       	ldi	r31, 0x75	; 117
     4f6:	ef 2e       	mov	r14, r31
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	ff 2e       	mov	r15, r31
     4fc:	f0 2d       	mov	r31, r0
     4fe:	8e 01       	movw	r16, r28
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	}
	
	if (data & SOUTH_ENTRY) {
     50a:	b3 fe       	sbrs	r11, 3
     50c:	36 c0       	rjmp	.+108    	; 0x57a <__stack+0x7b>
		self->SouthQueue--;
     50e:	8a 85       	ldd	r24, Y+10	; 0x0a
     510:	9b 85       	ldd	r25, Y+11	; 0x0b
     512:	ac 85       	ldd	r26, Y+12	; 0x0c
     514:	bd 85       	ldd	r27, Y+13	; 0x0d
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	a1 09       	sbc	r26, r1
     51a:	b1 09       	sbc	r27, r1
     51c:	8a 87       	std	Y+10, r24	; 0x0a
     51e:	9b 87       	std	Y+11, r25	; 0x0b
     520:	ac 87       	std	Y+12, r26	; 0x0c
     522:	bd 87       	std	Y+13, r27	; 0x0d
		self->BridgeAmount++;
     524:	8e 85       	ldd	r24, Y+14	; 0x0e
     526:	9f 85       	ldd	r25, Y+15	; 0x0f
     528:	a8 89       	ldd	r26, Y+16	; 0x10
     52a:	b9 89       	ldd	r27, Y+17	; 0x11
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	a1 1d       	adc	r26, r1
     530:	b1 1d       	adc	r27, r1
     532:	8e 87       	std	Y+14, r24	; 0x0e
     534:	9f 87       	std	Y+15, r25	; 0x0f
     536:	a8 8b       	std	Y+16, r26	; 0x10
     538:	b9 8b       	std	Y+17, r27	; 0x11
		self->BridgePassedSameDir++;
     53a:	8a 89       	ldd	r24, Y+18	; 0x12
     53c:	9b 89       	ldd	r25, Y+19	; 0x13
     53e:	ac 89       	ldd	r26, Y+20	; 0x14
     540:	bd 89       	ldd	r27, Y+21	; 0x15
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	a1 1d       	adc	r26, r1
     546:	b1 1d       	adc	r27, r1
     548:	8a 8b       	std	Y+18, r24	; 0x12
     54a:	9b 8b       	std	Y+19, r25	; 0x13
     54c:	ac 8b       	std	Y+20, r26	; 0x14
     54e:	bd 8b       	std	Y+21, r27	; 0x15
		AFTER(CURRENT_OFFSET() + SEC(BRIDGE_TIME), self,updateBridgeAmount, -1);
     550:	0e 94 90 10 	call	0x2120	; 0x2120 <CURRENT_OFFSET>
     554:	66 5a       	subi	r22, 0xA6	; 166
     556:	7d 49       	sbci	r23, 0x9D	; 157
     558:	8d 4f       	sbci	r24, 0xFD	; 253
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	cc 24       	eor	r12, r12
     55e:	ca 94       	dec	r12
     560:	dc 2c       	mov	r13, r12
     562:	0f 2e       	mov	r0, r31
     564:	f5 e7       	ldi	r31, 0x75	; 117
     566:	ef 2e       	mov	r14, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ff 2e       	mov	r15, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	8e 01       	movw	r16, r28
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	a9 01       	movw	r20, r18
     576:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	}

	return 0;
}
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	df 90       	pop	r13
     58c:	cf 90       	pop	r12
     58e:	bf 90       	pop	r11
     590:	08 95       	ret

00000592 <getNorthQueue>:
	return 0;
}

int getNorthQueue(Controller *self, int arg) {
	return self->NorthQueue;
}
     592:	fc 01       	movw	r30, r24
     594:	86 81       	ldd	r24, Z+6	; 0x06
     596:	97 81       	ldd	r25, Z+7	; 0x07
     598:	08 95       	ret

0000059a <getSouthQueue>:

int getSouthQueue(Controller *self, int arg) {
	return self->SouthQueue;
}
     59a:	fc 01       	movw	r30, r24
     59c:	82 85       	ldd	r24, Z+10	; 0x0a
     59e:	93 85       	ldd	r25, Z+11	; 0x0b
     5a0:	08 95       	ret

000005a2 <getBridgeAmount>:

int getBridgeAmount(Controller *self, int arg) {
	return self->BridgeAmount;
     5a2:	fc 01       	movw	r30, r24
     5a4:	86 85       	ldd	r24, Z+14	; 0x0e
     5a6:	97 85       	ldd	r25, Z+15	; 0x0f
     5a8:	08 95       	ret

000005aa <periodicUpdate>:
	printAt(SYNC(self->controller, getSouthQueue, 0), 4);
	return 0;
}

// periodicUpdate() uppdaterar displayen och callar sen after.
int periodicUpdate(GUI *self, int arg) {
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
	// Uppdatera displayen direkt.
	ASYNC(self, updateDisplay, 0);
     5ba:	c1 2c       	mov	r12, r1
     5bc:	d1 2c       	mov	r13, r1
     5be:	0f 2e       	mov	r0, r31
     5c0:	fc eb       	ldi	r31, 0xBC	; 188
     5c2:	ef 2e       	mov	r14, r31
     5c4:	f3 e0       	ldi	r31, 0x03	; 3
     5c6:	ff 2e       	mov	r15, r31
     5c8:	f0 2d       	mov	r31, r0
     5ca:	8c 01       	movw	r16, r24
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	a9 01       	movw	r20, r18
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	cb 01       	movw	r24, r22
     5d8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>

	// Calla after sen igen för att uppdatera displayen.
	AFTER(MSEC(100), self, periodicUpdate, 0);
     5dc:	0f 2e       	mov	r0, r31
     5de:	f5 ed       	ldi	r31, 0xD5	; 213
     5e0:	ef 2e       	mov	r14, r31
     5e2:	f2 e0       	ldi	r31, 0x02	; 2
     5e4:	ff 2e       	mov	r15, r31
     5e6:	f0 2d       	mov	r31, r0
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	65 e3       	ldi	r22, 0x35	; 53
     5f0:	7c e0       	ldi	r23, 0x0C	; 12
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	return 0;
}
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	df 90       	pop	r13
     60c:	cf 90       	pop	r12
     60e:	08 95       	ret

00000610 <lcd_init>:
// Starta LCD
void lcd_init() {
	// LCD Control Register A:
	// Turn on LCD (LCDEN = 1)
	// Low Power Waveform (LCDAB = 1)
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
     610:	80 ec       	ldi	r24, 0xC0	; 192
     612:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	// 1/3 Bias (LCD2B = 0)
	// 1/4 Duty (LCDMUX1 & LCDMUX0 = 1)
	// 25 Segments (LCDPM2 & LCDPM1 & LCDPM0 = 1)
	// Prescaler N = 16 (LCDPS2 & LCDPS1 & LCDPS0 = 0)
	// Clock Divide = 8 (LCDCD2 & LCDCD1 & LCDCD0 = 1
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) |
     616:	87 eb       	ldi	r24, 0xB7	; 183
     618:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	(1 << LCDCD0);

	// LCD Contrast Control Register:
	// Drive Time = 300 µs (LCDDC2 & LCDDC1 & LCDDC0 = 0)
	// Contrast Control Vol	tage = 3.35 V (LCDCC3 & LCDCC2 & LCDCC1 & LCDCC0 = 1)
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     61c:	8f e0       	ldi	r24, 0x0F	; 15
     61e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
     622:	08 95       	ret

00000624 <writeChar>:
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
     624:	66 30       	cpi	r22, 0x06	; 6
     626:	71 05       	cpc	r23, r1
     628:	08 f0       	brcs	.+2      	; 0x62c <writeChar+0x8>
     62a:	6b c0       	rjmp	.+214    	; 0x702 <writeChar+0xde>
	uint16_t segments = 0x0000;   // Default är tom.
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
     62c:	90 ed       	ldi	r25, 0xD0	; 208
     62e:	98 0f       	add	r25, r24
     630:	9a 30       	cpi	r25, 0x0A	; 10
     632:	50 f4       	brcc	.+20     	; 0x648 <writeChar+0x24>
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
     634:	e8 2f       	mov	r30, r24
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	f0 97       	sbiw	r30, 0x30	; 48
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	eb 5d       	subi	r30, 0xDB	; 219
     640:	fe 4f       	sbci	r31, 0xFE	; 254
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	02 c0       	rjmp	.+4      	; 0x64c <writeChar+0x28>
}

// Karaktär (alltså 0-9) för positionen 0-5
void writeChar(char ch, int pos) {
	if (pos < 0 || pos > 5) return;                     // Checka att position är korrekt.
	uint16_t segments = 0x0000;   // Default är tom.
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
	if (ch >= '0' && ch <= '9') { // Checka om det är siffra
		segments = font[ch - '0'];	// Hämta font data för siffra array positionen, alltså t.ex
		// ASCII för 8 blir till: 56-48=8. Och font[8] = 0x1F51.
	}
	uint8_t *base = (uint8_t *)&LCDDR0 + pos / 2; // Beräkna basregistret för positionen. Displayen använder LCDDR0-LCDDR19. *base dereference pointer till minnesadressen av korrekt. Läs sida 8 av butterfly_lcd. De är i par. Så pos = 0,1 blir LCDDR0 Type cast också ifall det inte fungerar annars kan testa utan det fungerar säkert. Beräkna offset alltså low eller high nibble för registret om den är jämn eller ojämn. pos = 0,2,4 blir till 0 offset.
     64c:	fb 01       	movw	r30, r22
     64e:	77 23       	and	r23, r23
     650:	0c f4       	brge	.+2      	; 0x654 <writeChar+0x30>
     652:	31 96       	adiw	r30, 0x01	; 1
     654:	f5 95       	asr	r31
     656:	e7 95       	ror	r30
     658:	e4 51       	subi	r30, 0x14	; 20
     65a:	ff 4f       	sbci	r31, 0xFF	; 255
	int offset = (pos % 2) * 4;
     65c:	61 70       	andi	r22, 0x01	; 1
     65e:	70 78       	andi	r23, 0x80	; 128
     660:	77 23       	and	r23, r23
     662:	34 f4       	brge	.+12     	; 0x670 <writeChar+0x4c>
     664:	61 50       	subi	r22, 0x01	; 1
     666:	71 09       	sbc	r23, r1
     668:	6e 6f       	ori	r22, 0xFE	; 254
     66a:	7f 6f       	ori	r23, 0xFF	; 255
     66c:	6f 5f       	subi	r22, 0xFF	; 255
     66e:	7f 4f       	sbci	r23, 0xFF	; 255
     670:	66 0f       	add	r22, r22
     672:	77 1f       	adc	r23, r23
     674:	66 0f       	add	r22, r22
     676:	77 1f       	adc	r23, r23

	base[0] = (base[0] & ~(0xF << offset)) | ((segments & 0xF) << offset);			// Uppdatera nibble i första registret
     678:	30 81       	ld	r19, Z
     67a:	4f e0       	ldi	r20, 0x0F	; 15
     67c:	50 e0       	ldi	r21, 0x00	; 0
     67e:	06 2e       	mov	r0, r22
     680:	02 c0       	rjmp	.+4      	; 0x686 <writeChar+0x62>
     682:	44 0f       	add	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	0a 94       	dec	r0
     688:	e2 f7       	brpl	.-8      	; 0x682 <writeChar+0x5e>
     68a:	24 2f       	mov	r18, r20
     68c:	20 95       	com	r18
     68e:	ac 01       	movw	r20, r24
     690:	4f 70       	andi	r20, 0x0F	; 15
     692:	55 27       	eor	r21, r21
     694:	06 2e       	mov	r0, r22
     696:	02 c0       	rjmp	.+4      	; 0x69c <writeChar+0x78>
     698:	44 0f       	add	r20, r20
     69a:	55 1f       	adc	r21, r21
     69c:	0a 94       	dec	r0
     69e:	e2 f7       	brpl	.-8      	; 0x698 <writeChar+0x74>
     6a0:	32 23       	and	r19, r18
     6a2:	43 2b       	or	r20, r19
     6a4:	40 83       	st	Z, r20
	base[5] = (base[5] & ~(0xF << offset)) | (((segments >> 4) & 0xF) << offset);		// Uppdatera nibble i LCDDRx+5 registret, alltså pointer offset med base[5].
     6a6:	35 81       	ldd	r19, Z+5	; 0x05
     6a8:	ac 01       	movw	r20, r24
     6aa:	52 95       	swap	r21
     6ac:	42 95       	swap	r20
     6ae:	4f 70       	andi	r20, 0x0F	; 15
     6b0:	45 27       	eor	r20, r21
     6b2:	5f 70       	andi	r21, 0x0F	; 15
     6b4:	45 27       	eor	r20, r21
     6b6:	4f 70       	andi	r20, 0x0F	; 15
     6b8:	55 27       	eor	r21, r21
     6ba:	06 2e       	mov	r0, r22
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <writeChar+0x9e>
     6be:	44 0f       	add	r20, r20
     6c0:	55 1f       	adc	r21, r21
     6c2:	0a 94       	dec	r0
     6c4:	e2 f7       	brpl	.-8      	; 0x6be <writeChar+0x9a>
     6c6:	32 23       	and	r19, r18
     6c8:	43 2b       	or	r20, r19
     6ca:	45 83       	std	Z+5, r20	; 0x05
	base[10] = (base[10] & ~(0xF << offset)) | (((segments >> 8) & 0xF) << offset);	// Om offset 4 till exempel. 00001111 blir till 11110000, sedan 00001111, och bitwise AND vilket gör de 4 bits som har bestämts med offset till 0000.
     6cc:	32 85       	ldd	r19, Z+10	; 0x0a
     6ce:	49 2f       	mov	r20, r25
     6d0:	55 27       	eor	r21, r21
     6d2:	4f 70       	andi	r20, 0x0F	; 15
     6d4:	55 27       	eor	r21, r21
     6d6:	06 2e       	mov	r0, r22
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <writeChar+0xba>
     6da:	44 0f       	add	r20, r20
     6dc:	55 1f       	adc	r21, r21
     6de:	0a 94       	dec	r0
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <writeChar+0xb6>
     6e2:	32 23       	and	r19, r18
     6e4:	43 2b       	or	r20, r19
     6e6:	42 87       	std	Z+10, r20	; 0x0a
	base[15] = (base[15] & ~(0xF << offset)) | (((segments >> 12) & 0xF) << offset);	// Sedan segments & 0xF blir 000000000000xxxx, AND med segments ger bara värdet för dessa 4 bits. Samma fast för offset för de andra raderna. Alltså om vi har aaaabbbbccccdddd, så ger varje rad, dddd,cccc,bbbb,aaaa. Sedan << offset för att flytta vänster om det behövs. Sedan | OR för att kombinera med hälften tom och hälften redan fylld. Alltså 0000xxxx om ingen offset, eller xxxx0000 om offset.
     6e8:	37 85       	ldd	r19, Z+15	; 0x0f
     6ea:	89 2f       	mov	r24, r25
     6ec:	99 27       	eor	r25, r25
     6ee:	82 95       	swap	r24
     6f0:	8f 70       	andi	r24, 0x0F	; 15
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <writeChar+0xd4>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	6a 95       	dec	r22
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <writeChar+0xd0>
     6fc:	23 23       	and	r18, r19
     6fe:	82 2b       	or	r24, r18
     700:	87 87       	std	Z+15, r24	; 0x0f
     702:	08 95       	ret

00000704 <printAt>:
}

void printAt(long num, int pos) {
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	4b 01       	movw	r8, r22
     71a:	5c 01       	movw	r10, r24
     71c:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     71e:	24 e6       	ldi	r18, 0x64	; 100
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodsi4>
     72a:	0f 2e       	mov	r0, r31
     72c:	fa e0       	ldi	r31, 0x0A	; 10
     72e:	cf 2e       	mov	r12, r31
     730:	d1 2c       	mov	r13, r1
     732:	e1 2c       	mov	r14, r1
     734:	f1 2c       	mov	r15, r1
     736:	f0 2d       	mov	r31, r0
     738:	a7 01       	movw	r20, r14
     73a:	96 01       	movw	r18, r12
     73c:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodsi4>
     740:	be 01       	movw	r22, r28
     742:	80 e3       	ldi	r24, 0x30	; 48
     744:	82 0f       	add	r24, r18
     746:	0e 94 12 03 	call	0x624	; 0x624 <writeChar>
	pp++;
     74a:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	a7 01       	movw	r20, r14
     752:	96 01       	movw	r18, r12
     754:	0e 94 19 11 	call	0x2232	; 0x2232 <__divmodsi4>
     758:	86 2f       	mov	r24, r22
     75a:	be 01       	movw	r22, r28
     75c:	80 5d       	subi	r24, 0xD0	; 208
     75e:	0e 94 12 03 	call	0x624	; 0x624 <writeChar>
}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	bf 90       	pop	r11
     770:	af 90       	pop	r10
     772:	9f 90       	pop	r9
     774:	8f 90       	pop	r8
     776:	08 95       	ret

00000778 <updateDisplay>:

// updateDisplay() Hämtar värden för NorthQueue, BridgeAmount, SouthQueue och skriver på LCD
int updateDisplay(GUI *self, int arg) {
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	ec 01       	movw	r28, r24
	printAt(SYNC(self->controller, getNorthQueue, 0), 0);
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	69 ec       	ldi	r22, 0xC9	; 201
     784:	72 e0       	ldi	r23, 0x02	; 2
     786:	8c 81       	ldd	r24, Y+4	; 0x04
     788:	9d 81       	ldd	r25, Y+5	; 0x05
     78a:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sync>
     78e:	bc 01       	movw	r22, r24
     790:	99 0f       	add	r25, r25
     792:	88 0b       	sbc	r24, r24
     794:	99 0b       	sbc	r25, r25
     796:	40 e0       	ldi	r20, 0x00	; 0
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	0e 94 82 03 	call	0x704	; 0x704 <printAt>
	printAt(SYNC(self->controller, getBridgeAmount, 0), 2);
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	61 ed       	ldi	r22, 0xD1	; 209
     7a4:	72 e0       	ldi	r23, 0x02	; 2
     7a6:	8c 81       	ldd	r24, Y+4	; 0x04
     7a8:	9d 81       	ldd	r25, Y+5	; 0x05
     7aa:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sync>
     7ae:	bc 01       	movw	r22, r24
     7b0:	99 0f       	add	r25, r25
     7b2:	88 0b       	sbc	r24, r24
     7b4:	99 0b       	sbc	r25, r25
     7b6:	42 e0       	ldi	r20, 0x02	; 2
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	0e 94 82 03 	call	0x704	; 0x704 <printAt>
	printAt(SYNC(self->controller, getSouthQueue, 0), 4);
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	6d ec       	ldi	r22, 0xCD	; 205
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	8c 81       	ldd	r24, Y+4	; 0x04
     7c8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ca:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sync>
     7ce:	bc 01       	movw	r22, r24
     7d0:	99 0f       	add	r25, r25
     7d2:	88 0b       	sbc	r24, r24
     7d4:	99 0b       	sbc	r25, r25
     7d6:	44 e0       	ldi	r20, 0x04	; 4
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	0e 94 82 03 	call	0x704	; 0x704 <printAt>
	return 0;
}
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <startProgram>:

Controller controller = initController(&serial);

GUI gui = initGUI(&controller);

int startProgram(GUI *self, int arg) {
     7e8:	cf 92       	push	r12
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
	ASYNC(self, updateDisplay, 0);
     7fa:	c1 2c       	mov	r12, r1
     7fc:	d1 2c       	mov	r13, r1
     7fe:	0f 2e       	mov	r0, r31
     800:	fc eb       	ldi	r31, 0xBC	; 188
     802:	ef 2e       	mov	r14, r31
     804:	f3 e0       	ldi	r31, 0x03	; 3
     806:	ff 2e       	mov	r15, r31
     808:	f0 2d       	mov	r31, r0
     80a:	8c 01       	movw	r16, r24
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	a9 01       	movw	r20, r18
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	cb 01       	movw	r24, r22
     818:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	ASYNC(self, periodicUpdate, 0);
     81c:	0f 2e       	mov	r0, r31
     81e:	f5 ed       	ldi	r31, 0xD5	; 213
     820:	ef 2e       	mov	r14, r31
     822:	f2 e0       	ldi	r31, 0x02	; 2
     824:	ff 2e       	mov	r15, r31
     826:	f0 2d       	mov	r31, r0
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	a9 01       	movw	r20, r18
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	cb 01       	movw	r24, r22
     834:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	ASYNC(self->controller, idleState, 0);
     838:	0c 81       	ldd	r16, Y+4	; 0x04
     83a:	1d 81       	ldd	r17, Y+5	; 0x05
     83c:	0f 2e       	mov	r0, r31
     83e:	f9 e8       	ldi	r31, 0x89	; 137
     840:	ef 2e       	mov	r14, r31
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ff 2e       	mov	r15, r31
     846:	f0 2d       	mov	r31, r0
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	cb 01       	movw	r24, r22
     854:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
	return 0;
}
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	08 95       	ret

0000086e <main>:

int main() {
	
	avr_init();
     86e:	0e 94 4d 00 	call	0x9a	; 0x9a <avr_init>
	lcd_init();
     872:	0e 94 08 03 	call	0x610	; 0x610 <lcd_init>

	INSTALL(&controller, bitParser, IRQ_USART0_RX);
     876:	48 e0       	ldi	r20, 0x08	; 8
     878:	60 e2       	ldi	r22, 0x20	; 32
     87a:	72 e0       	ldi	r23, 0x02	; 2
     87c:	86 e0       	ldi	r24, 0x06	; 6
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 e7 10 	call	0x21ce	; 0x21ce <install>

	return TINYTIMBER(&gui, startProgram, 0);
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	64 ef       	ldi	r22, 0xF4	; 244
     88a:	73 e0       	ldi	r23, 0x03	; 3
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 02 11 	call	0x2204	; 0x2204 <tinytimber>

}
     894:	08 95       	ret

00000896 <USARTtransmit>:
#include "serialCom.h"

int USARTtransmit(SerialCom *self, int arg) {
	// Vänta tills send buffern är tom
	while (!(UCSR0A & (1 << UDRE0))) {
     896:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     89a:	85 ff       	sbrs	r24, 5
     89c:	fc cf       	rjmp	.-8      	; 0x896 <USARTtransmit>
	}
	// Skriv byten till UDR0 för sändning
	UDR0 = (uint8_t) arg;
     89e:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	return 0;
}
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	08 95       	ret

000008a8 <USARTreceive>:

int USARTreceive(SerialCom *self, int arg) {
	// Vänta tills data finns att läsa
	while (!(UCSR0A & (1 << RXC0))) {}
     8a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     8ac:	88 23       	and	r24, r24
     8ae:	e4 f7       	brge	.-8      	; 0x8a8 <USARTreceive>
	
	int bits = UDR0;
     8b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
	return bits;
}
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	08 95       	ret

000008b8 <initialize>:
    t->accum = STATUS() ? current->msg->baseline : timestamp;
}

Time T_SAMPLE(Timer *t) {
    return (STATUS() ? current->msg->baseline : timestamp) - t->accum;
}
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	00 d0       	rcall	.+0      	; 0x8be <initialize+0x6>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <initialize+0x8>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	18 c0       	rjmp	.+48     	; 0x8fa <initialize+0x42>
     8ca:	ac 01       	movw	r20, r24
     8cc:	4f 5f       	subi	r20, 0xFF	; 255
     8ce:	5f 4f       	sbci	r21, 0xFF	; 255
     8d0:	9a 01       	movw	r18, r20
     8d2:	22 95       	swap	r18
     8d4:	32 95       	swap	r19
     8d6:	30 7f       	andi	r19, 0xF0	; 240
     8d8:	32 27       	eor	r19, r18
     8da:	20 7f       	andi	r18, 0xF0	; 240
     8dc:	32 27       	eor	r19, r18
     8de:	2f 5d       	subi	r18, 0xDF	; 223
     8e0:	3d 4f       	sbci	r19, 0xFD	; 253
     8e2:	82 95       	swap	r24
     8e4:	92 95       	swap	r25
     8e6:	90 7f       	andi	r25, 0xF0	; 240
     8e8:	98 27       	eor	r25, r24
     8ea:	80 7f       	andi	r24, 0xF0	; 240
     8ec:	98 27       	eor	r25, r24
     8ee:	fc 01       	movw	r30, r24
     8f0:	ef 5d       	subi	r30, 0xDF	; 223
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	31 83       	std	Z+1, r19	; 0x01
     8f6:	20 83       	st	Z, r18
     8f8:	ca 01       	movw	r24, r20
     8fa:	8e 30       	cpi	r24, 0x0E	; 14
     8fc:	91 05       	cpc	r25, r1
     8fe:	2c f3       	brlt	.-54     	; 0x8ca <initialize+0x12>
     900:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <messages+0xe1>
     904:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <messages+0xe0>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	15 c0       	rjmp	.+42     	; 0x938 <initialize+0x80>
     90e:	ac 01       	movw	r20, r24
     910:	4f 5f       	subi	r20, 0xFF	; 255
     912:	5f 4f       	sbci	r21, 0xFF	; 255
     914:	6d e1       	ldi	r22, 0x1D	; 29
     916:	64 9f       	mul	r22, r20
     918:	90 01       	movw	r18, r0
     91a:	65 9f       	mul	r22, r21
     91c:	30 0d       	add	r19, r0
     91e:	11 24       	eor	r1, r1
     920:	24 59       	subi	r18, 0x94	; 148
     922:	3e 4f       	sbci	r19, 0xFE	; 254
     924:	68 9f       	mul	r22, r24
     926:	f0 01       	movw	r30, r0
     928:	69 9f       	mul	r22, r25
     92a:	f0 0d       	add	r31, r0
     92c:	11 24       	eor	r1, r1
     92e:	e4 59       	subi	r30, 0x94	; 148
     930:	fe 4f       	sbci	r31, 0xFE	; 254
     932:	31 83       	std	Z+1, r19	; 0x01
     934:	20 83       	st	Z, r18
     936:	ca 01       	movw	r24, r20
     938:	83 30       	cpi	r24, 0x03	; 3
     93a:	91 05       	cpc	r25, r1
     93c:	44 f3       	brlt	.-48     	; 0x90e <initialize+0x56>
     93e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <threads+0x58>
     942:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <threads+0x57>
     946:	1a 82       	std	Y+2, r1	; 0x02
     948:	19 82       	std	Y+1, r1	; 0x01
     94a:	32 c0       	rjmp	.+100    	; 0x9b0 <initialize+0xf8>
     94c:	2d e1       	ldi	r18, 0x1D	; 29
     94e:	49 81       	ldd	r20, Y+1	; 0x01
     950:	5a 81       	ldd	r21, Y+2	; 0x02
     952:	24 9f       	mul	r18, r20
     954:	c0 01       	movw	r24, r0
     956:	25 9f       	mul	r18, r21
     958:	90 0d       	add	r25, r0
     95a:	11 24       	eor	r1, r1
     95c:	fc 01       	movw	r30, r24
     95e:	ee 58       	subi	r30, 0x8E	; 142
     960:	fe 4f       	sbci	r31, 0xFE	; 254
     962:	fc 83       	std	Y+4, r31	; 0x04
     964:	eb 83       	std	Y+3, r30	; 0x03
     966:	cf 01       	movw	r24, r30
     968:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <setjmp>
     96c:	20 e6       	ldi	r18, 0x60	; 96
     96e:	49 81       	ldd	r20, Y+1	; 0x01
     970:	5a 81       	ldd	r21, Y+2	; 0x02
     972:	24 9f       	mul	r18, r20
     974:	c0 01       	movw	r24, r0
     976:	25 9f       	mul	r18, r21
     978:	90 0d       	add	r25, r0
     97a:	11 24       	eor	r1, r1
     97c:	83 59       	subi	r24, 0x93	; 147
     97e:	9c 4f       	sbci	r25, 0xFC	; 252
     980:	eb 81       	ldd	r30, Y+3	; 0x03
     982:	fc 81       	ldd	r31, Y+4	; 0x04
     984:	91 8b       	std	Z+17, r25	; 0x11
     986:	80 8b       	std	Z+16, r24	; 0x10
     988:	93 8b       	std	Z+19, r25	; 0x13
     98a:	82 8b       	std	Z+18, r24	; 0x12
     98c:	88 e3       	ldi	r24, 0x38	; 56
     98e:	90 e1       	ldi	r25, 0x10	; 16
     990:	96 8b       	std	Z+22, r25	; 0x16
     992:	85 8b       	std	Z+21, r24	; 0x15
     994:	8d e1       	ldi	r24, 0x1D	; 29
     996:	84 9f       	mul	r24, r20
     998:	f0 01       	movw	r30, r0
     99a:	85 9f       	mul	r24, r21
     99c:	f0 0d       	add	r31, r0
     99e:	11 24       	eor	r1, r1
     9a0:	e4 59       	subi	r30, 0x94	; 148
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	15 82       	std	Z+5, r1	; 0x05
     9a6:	14 82       	std	Z+4, r1	; 0x04
     9a8:	4f 5f       	subi	r20, 0xFF	; 255
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	5a 83       	std	Y+2, r21	; 0x02
     9ae:	49 83       	std	Y+1, r20	; 0x01
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	24 30       	cpi	r18, 0x04	; 4
     9b6:	31 05       	cpc	r19, r1
     9b8:	4c f2       	brlt	.-110    	; 0x94c <initialize+0x94>
     9ba:	e4 e0       	ldi	r30, 0x04	; 4
     9bc:	f2 e0       	ldi	r31, 0x02	; 2
     9be:	11 82       	std	Z+1, r1	; 0x01
     9c0:	10 82       	st	Z, r1
     9c2:	15 82       	std	Z+5, r1	; 0x05
     9c4:	14 82       	std	Z+4, r1	; 0x04
     9c6:	13 82       	std	Z+3, r1	; 0x03
     9c8:	12 82       	std	Z+2, r1	; 0x02
     9ca:	e1 e6       	ldi	r30, 0x61	; 97
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 e8       	ldi	r24, 0x80	; 128
     9d0:	80 83       	st	Z, r24
     9d2:	10 82       	st	Z, r1
     9d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9dc:	84 e0       	ldi	r24, 0x04	; 4
     9de:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <dispatch>:
     9f6:	cf 93       	push	r28
     9f8:	df 93       	push	r29
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <dispatch+0x6>
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	9a 83       	std	Y+2, r25	; 0x02
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <current>
     a08:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <current+0x1>
     a0c:	06 96       	adiw	r24, 0x06	; 6
     a0e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <setjmp>
     a12:	89 2b       	or	r24, r25
     a14:	59 f4       	brne	.+22     	; 0xa2c <dispatch+0x36>
     a16:	89 81       	ldd	r24, Y+1	; 0x01
     a18:	9a 81       	ldd	r25, Y+2	; 0x02
     a1a:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <current+0x1>
     a1e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <current>
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	06 96       	adiw	r24, 0x06	; 6
     a28:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <longjmp>
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <enqueueByDeadline>:
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	eb 01       	movw	r28, r22
     a44:	e8 81       	ld	r30, Y
     a46:	f9 81       	ldd	r31, Y+1	; 0x01
     a48:	c0 e0       	ldi	r28, 0x00	; 0
     a4a:	d0 e0       	ldi	r29, 0x00	; 0
     a4c:	04 c0       	rjmp	.+8      	; 0xa56 <enqueueByDeadline+0x20>
     a4e:	ef 01       	movw	r28, r30
     a50:	01 90       	ld	r0, Z+
     a52:	f0 81       	ld	r31, Z
     a54:	e0 2d       	mov	r30, r0
     a56:	30 97       	sbiw	r30, 0x00	; 0
     a58:	79 f0       	breq	.+30     	; 0xa78 <enqueueByDeadline+0x42>
     a5a:	06 81       	ldd	r16, Z+6	; 0x06
     a5c:	17 81       	ldd	r17, Z+7	; 0x07
     a5e:	20 85       	ldd	r18, Z+8	; 0x08
     a60:	31 85       	ldd	r19, Z+9	; 0x09
     a62:	16 96       	adiw	r26, 0x06	; 6
     a64:	4d 91       	ld	r20, X+
     a66:	5d 91       	ld	r21, X+
     a68:	6d 91       	ld	r22, X+
     a6a:	7c 91       	ld	r23, X
     a6c:	19 97       	sbiw	r26, 0x09	; 9
     a6e:	40 17       	cp	r20, r16
     a70:	51 07       	cpc	r21, r17
     a72:	62 07       	cpc	r22, r18
     a74:	73 07       	cpc	r23, r19
     a76:	5c f7       	brge	.-42     	; 0xa4e <enqueueByDeadline+0x18>
     a78:	11 96       	adiw	r26, 0x01	; 1
     a7a:	fc 93       	st	X, r31
     a7c:	ee 93       	st	-X, r30
     a7e:	20 97       	sbiw	r28, 0x00	; 0
     a80:	21 f4       	brne	.+8      	; 0xa8a <enqueueByDeadline+0x54>
     a82:	fc 01       	movw	r30, r24
     a84:	b1 83       	std	Z+1, r27	; 0x01
     a86:	a0 83       	st	Z, r26
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <enqueueByDeadline+0x58>
     a8a:	b9 83       	std	Y+1, r27	; 0x01
     a8c:	a8 83       	st	Y, r26
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <enqueueByBaseline>:
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	eb 01       	movw	r28, r22
     aa6:	e8 81       	ld	r30, Y
     aa8:	f9 81       	ldd	r31, Y+1	; 0x01
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	04 c0       	rjmp	.+8      	; 0xab8 <enqueueByBaseline+0x20>
     ab0:	ef 01       	movw	r28, r30
     ab2:	01 90       	ld	r0, Z+
     ab4:	f0 81       	ld	r31, Z
     ab6:	e0 2d       	mov	r30, r0
     ab8:	30 97       	sbiw	r30, 0x00	; 0
     aba:	79 f0       	breq	.+30     	; 0xada <enqueueByBaseline+0x42>
     abc:	02 81       	ldd	r16, Z+2	; 0x02
     abe:	13 81       	ldd	r17, Z+3	; 0x03
     ac0:	24 81       	ldd	r18, Z+4	; 0x04
     ac2:	35 81       	ldd	r19, Z+5	; 0x05
     ac4:	12 96       	adiw	r26, 0x02	; 2
     ac6:	4d 91       	ld	r20, X+
     ac8:	5d 91       	ld	r21, X+
     aca:	6d 91       	ld	r22, X+
     acc:	7c 91       	ld	r23, X
     ace:	15 97       	sbiw	r26, 0x05	; 5
     ad0:	40 17       	cp	r20, r16
     ad2:	51 07       	cpc	r21, r17
     ad4:	62 07       	cpc	r22, r18
     ad6:	73 07       	cpc	r23, r19
     ad8:	5c f7       	brge	.-42     	; 0xab0 <enqueueByBaseline+0x18>
     ada:	11 96       	adiw	r26, 0x01	; 1
     adc:	fc 93       	st	X, r31
     ade:	ee 93       	st	-X, r30
     ae0:	20 97       	sbiw	r28, 0x00	; 0
     ae2:	21 f4       	brne	.+8      	; 0xaec <enqueueByBaseline+0x54>
     ae4:	fc 01       	movw	r30, r24
     ae6:	b1 83       	std	Z+1, r27	; 0x01
     ae8:	a0 83       	st	Z, r26
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <enqueueByBaseline+0x58>
     aec:	b9 83       	std	Y+1, r27	; 0x01
     aee:	a8 83       	st	Y, r26
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	1f 91       	pop	r17
     af6:	0f 91       	pop	r16
     af8:	08 95       	ret

00000afa <dequeue>:
     afa:	dc 01       	movw	r26, r24
     afc:	ed 91       	ld	r30, X+
     afe:	fc 91       	ld	r31, X
     b00:	11 97       	sbiw	r26, 0x01	; 1
     b02:	30 97       	sbiw	r30, 0x00	; 0
     b04:	59 f4       	brne	.+22     	; 0xb1c <dequeue+0x22>
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     b0c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     b10:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	83 bf       	out	0x33, r24	; 51
     b18:	88 95       	sleep
     b1a:	fc cf       	rjmp	.-8      	; 0xb14 <dequeue+0x1a>
     b1c:	20 81       	ld	r18, Z
     b1e:	31 81       	ldd	r19, Z+1	; 0x01
     b20:	2d 93       	st	X+, r18
     b22:	3c 93       	st	X, r19
     b24:	cf 01       	movw	r24, r30
     b26:	08 95       	ret

00000b28 <insert>:
     b28:	fb 01       	movw	r30, r22
     b2a:	20 81       	ld	r18, Z
     b2c:	31 81       	ldd	r19, Z+1	; 0x01
     b2e:	fc 01       	movw	r30, r24
     b30:	31 83       	std	Z+1, r19	; 0x01
     b32:	20 83       	st	Z, r18
     b34:	fb 01       	movw	r30, r22
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
     b3a:	08 95       	ret

00000b3c <push>:
     b3c:	fb 01       	movw	r30, r22
     b3e:	20 81       	ld	r18, Z
     b40:	31 81       	ldd	r19, Z+1	; 0x01
     b42:	fc 01       	movw	r30, r24
     b44:	31 83       	std	Z+1, r19	; 0x01
     b46:	20 83       	st	Z, r18
     b48:	fb 01       	movw	r30, r22
     b4a:	91 83       	std	Z+1, r25	; 0x01
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <pop>:
     b50:	dc 01       	movw	r26, r24
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	11 97       	sbiw	r26, 0x01	; 1
     b58:	20 81       	ld	r18, Z
     b5a:	31 81       	ldd	r19, Z+1	; 0x01
     b5c:	2d 93       	st	X+, r18
     b5e:	3c 93       	st	X, r19
     b60:	cf 01       	movw	r24, r30
     b62:	08 95       	ret

00000b64 <schedule>:
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <activeStack>
     b6c:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <activeStack+0x1>
     b70:	c2 81       	ldd	r28, Z+2	; 0x02
     b72:	d3 81       	ldd	r29, Z+3	; 0x03
     b74:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <msgQ>
     b78:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <msgQ+0x1>
     b7c:	30 97       	sbiw	r30, 0x00	; 0
     b7e:	19 f1       	breq	.+70     	; 0xbc6 <schedule+0x62>
     b80:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <threadPool>
     b84:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <threadPool+0x1>
     b88:	89 2b       	or	r24, r25
     b8a:	e9 f0       	breq	.+58     	; 0xbc6 <schedule+0x62>
     b8c:	20 97       	sbiw	r28, 0x00	; 0
     b8e:	69 f0       	breq	.+26     	; 0xbaa <schedule+0x46>
     b90:	86 81       	ldd	r24, Z+6	; 0x06
     b92:	97 81       	ldd	r25, Z+7	; 0x07
     b94:	a0 85       	ldd	r26, Z+8	; 0x08
     b96:	b1 85       	ldd	r27, Z+9	; 0x09
     b98:	4e 81       	ldd	r20, Y+6	; 0x06
     b9a:	5f 81       	ldd	r21, Y+7	; 0x07
     b9c:	68 85       	ldd	r22, Y+8	; 0x08
     b9e:	79 85       	ldd	r23, Y+9	; 0x09
     ba0:	84 1b       	sub	r24, r20
     ba2:	95 0b       	sbc	r25, r21
     ba4:	a6 0b       	sbc	r26, r22
     ba6:	b7 0b       	sbc	r27, r23
     ba8:	72 f4       	brpl	.+28     	; 0xbc6 <schedule+0x62>
     baa:	81 e2       	ldi	r24, 0x21	; 33
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 a8 05 	call	0xb50	; 0xb50 <pop>
     bb2:	6f e1       	ldi	r22, 0x1F	; 31
     bb4:	71 e0       	ldi	r23, 0x01	; 1
     bb6:	0e 94 9e 05 	call	0xb3c	; 0xb3c <push>
     bba:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <activeStack>
     bbe:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <activeStack+0x1>
     bc2:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <dispatch>
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <__vector_1>:
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	2f 93       	push	r18
     bdc:	3f 93       	push	r19
     bde:	4f 93       	push	r20
     be0:	5f 93       	push	r21
     be2:	6f 93       	push	r22
     be4:	7f 93       	push	r23
     be6:	8f 93       	push	r24
     be8:	9f 93       	push	r25
     bea:	af 93       	push	r26
     bec:	bf 93       	push	r27
     bee:	ef 93       	push	r30
     bf0:	ff 93       	push	r31
     bf2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
     bf6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
     bfa:	ac 01       	movw	r20, r24
     bfc:	09 2e       	mov	r0, r25
     bfe:	00 0c       	add	r0, r0
     c00:	66 0b       	sbc	r22, r22
     c02:	77 0b       	sbc	r23, r23
     c04:	9a 01       	movw	r18, r20
     c06:	11 27       	eor	r17, r17
     c08:	00 27       	eor	r16, r16
     c0a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c0e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	40 2b       	or	r20, r16
     c18:	51 2b       	or	r21, r17
     c1a:	62 2b       	or	r22, r18
     c1c:	73 2b       	or	r23, r19
     c1e:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
     c22:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
     c26:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
     c2a:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
     c2e:	b0 9b       	sbis	0x16, 0	; 22
     c30:	1a c0       	rjmp	.+52     	; 0xc66 <__vector_1+0x9a>
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	09 2e       	mov	r0, r25
     c36:	00 0c       	add	r0, r0
     c38:	aa 0b       	sbc	r26, r26
     c3a:	bb 0b       	sbc	r27, r27
     c3c:	bc 01       	movw	r22, r24
     c3e:	55 27       	eor	r21, r21
     c40:	44 27       	eor	r20, r20
     c42:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c46:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	84 2b       	or	r24, r20
     c50:	95 2b       	or	r25, r21
     c52:	a6 2b       	or	r26, r22
     c54:	b7 2b       	or	r27, r23
     c56:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     c5a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     c5e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     c62:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     c66:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable>
     c6a:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x1>
     c6e:	30 97       	sbiw	r30, 0x00	; 0
     c70:	39 f0       	breq	.+14     	; 0xc80 <__vector_1+0xb4>
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable>
     c7a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x1>
     c7e:	09 95       	icall
     c80:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     c84:	ff 91       	pop	r31
     c86:	ef 91       	pop	r30
     c88:	bf 91       	pop	r27
     c8a:	af 91       	pop	r26
     c8c:	9f 91       	pop	r25
     c8e:	8f 91       	pop	r24
     c90:	7f 91       	pop	r23
     c92:	6f 91       	pop	r22
     c94:	5f 91       	pop	r21
     c96:	4f 91       	pop	r20
     c98:	3f 91       	pop	r19
     c9a:	2f 91       	pop	r18
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <__vector_2>:
     caa:	1f 92       	push	r1
     cac:	0f 92       	push	r0
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	0f 92       	push	r0
     cb2:	11 24       	eor	r1, r1
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	2f 93       	push	r18
     cba:	3f 93       	push	r19
     cbc:	4f 93       	push	r20
     cbe:	5f 93       	push	r21
     cc0:	6f 93       	push	r22
     cc2:	7f 93       	push	r23
     cc4:	8f 93       	push	r24
     cc6:	9f 93       	push	r25
     cc8:	af 93       	push	r26
     cca:	bf 93       	push	r27
     ccc:	ef 93       	push	r30
     cce:	ff 93       	push	r31
     cd0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
     cd4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
     cd8:	ac 01       	movw	r20, r24
     cda:	09 2e       	mov	r0, r25
     cdc:	00 0c       	add	r0, r0
     cde:	66 0b       	sbc	r22, r22
     ce0:	77 0b       	sbc	r23, r23
     ce2:	9a 01       	movw	r18, r20
     ce4:	11 27       	eor	r17, r17
     ce6:	00 27       	eor	r16, r16
     ce8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	40 2b       	or	r20, r16
     cf6:	51 2b       	or	r21, r17
     cf8:	62 2b       	or	r22, r18
     cfa:	73 2b       	or	r23, r19
     cfc:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
     d00:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
     d04:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
     d08:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
     d0c:	b0 9b       	sbis	0x16, 0	; 22
     d0e:	1a c0       	rjmp	.+52     	; 0xd44 <__vector_2+0x9a>
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	09 2e       	mov	r0, r25
     d14:	00 0c       	add	r0, r0
     d16:	aa 0b       	sbc	r26, r26
     d18:	bb 0b       	sbc	r27, r27
     d1a:	bc 01       	movw	r22, r24
     d1c:	55 27       	eor	r21, r21
     d1e:	44 27       	eor	r20, r20
     d20:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d24:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d28:	a0 e0       	ldi	r26, 0x00	; 0
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	84 2b       	or	r24, r20
     d2e:	95 2b       	or	r25, r21
     d30:	a6 2b       	or	r26, r22
     d32:	b7 2b       	or	r27, r23
     d34:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     d38:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     d3c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     d40:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     d44:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x2>
     d48:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x3>
     d4c:	30 97       	sbiw	r30, 0x00	; 0
     d4e:	39 f0       	breq	.+14     	; 0xd5e <__vector_2+0xb4>
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x2>
     d58:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x3>
     d5c:	09 95       	icall
     d5e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     d62:	ff 91       	pop	r31
     d64:	ef 91       	pop	r30
     d66:	bf 91       	pop	r27
     d68:	af 91       	pop	r26
     d6a:	9f 91       	pop	r25
     d6c:	8f 91       	pop	r24
     d6e:	7f 91       	pop	r23
     d70:	6f 91       	pop	r22
     d72:	5f 91       	pop	r21
     d74:	4f 91       	pop	r20
     d76:	3f 91       	pop	r19
     d78:	2f 91       	pop	r18
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	0f 90       	pop	r0
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	0f 90       	pop	r0
     d84:	1f 90       	pop	r1
     d86:	18 95       	reti

00000d88 <__vector_3>:
     d88:	1f 92       	push	r1
     d8a:	0f 92       	push	r0
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	0f 92       	push	r0
     d90:	11 24       	eor	r1, r1
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
     db2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
     db6:	ac 01       	movw	r20, r24
     db8:	09 2e       	mov	r0, r25
     dba:	00 0c       	add	r0, r0
     dbc:	66 0b       	sbc	r22, r22
     dbe:	77 0b       	sbc	r23, r23
     dc0:	9a 01       	movw	r18, r20
     dc2:	11 27       	eor	r17, r17
     dc4:	00 27       	eor	r16, r16
     dc6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	40 2b       	or	r20, r16
     dd4:	51 2b       	or	r21, r17
     dd6:	62 2b       	or	r22, r18
     dd8:	73 2b       	or	r23, r19
     dda:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
     dde:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
     de2:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
     de6:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
     dea:	b0 9b       	sbis	0x16, 0	; 22
     dec:	1a c0       	rjmp	.+52     	; 0xe22 <__vector_3+0x9a>
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	09 2e       	mov	r0, r25
     df2:	00 0c       	add	r0, r0
     df4:	aa 0b       	sbc	r26, r26
     df6:	bb 0b       	sbc	r27, r27
     df8:	bc 01       	movw	r22, r24
     dfa:	55 27       	eor	r21, r21
     dfc:	44 27       	eor	r20, r20
     dfe:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e02:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	84 2b       	or	r24, r20
     e0c:	95 2b       	or	r25, r21
     e0e:	a6 2b       	or	r26, r22
     e10:	b7 2b       	or	r27, r23
     e12:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     e16:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     e1a:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     e1e:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     e22:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0x4>
     e26:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0x5>
     e2a:	30 97       	sbiw	r30, 0x00	; 0
     e2c:	39 f0       	breq	.+14     	; 0xe3c <__vector_3+0xb4>
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0x4>
     e36:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0x5>
     e3a:	09 95       	icall
     e3c:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	0f 90       	pop	r0
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	0f 90       	pop	r0
     e62:	1f 90       	pop	r1
     e64:	18 95       	reti

00000e66 <__vector_4>:
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	2f 93       	push	r18
     e76:	3f 93       	push	r19
     e78:	4f 93       	push	r20
     e7a:	5f 93       	push	r21
     e7c:	6f 93       	push	r22
     e7e:	7f 93       	push	r23
     e80:	8f 93       	push	r24
     e82:	9f 93       	push	r25
     e84:	af 93       	push	r26
     e86:	bf 93       	push	r27
     e88:	ef 93       	push	r30
     e8a:	ff 93       	push	r31
     e8c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
     e90:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
     e94:	ac 01       	movw	r20, r24
     e96:	09 2e       	mov	r0, r25
     e98:	00 0c       	add	r0, r0
     e9a:	66 0b       	sbc	r22, r22
     e9c:	77 0b       	sbc	r23, r23
     e9e:	9a 01       	movw	r18, r20
     ea0:	11 27       	eor	r17, r17
     ea2:	00 27       	eor	r16, r16
     ea4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ea8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	40 2b       	or	r20, r16
     eb2:	51 2b       	or	r21, r17
     eb4:	62 2b       	or	r22, r18
     eb6:	73 2b       	or	r23, r19
     eb8:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
     ebc:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
     ec0:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
     ec4:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
     ec8:	b0 9b       	sbis	0x16, 0	; 22
     eca:	1a c0       	rjmp	.+52     	; 0xf00 <__vector_4+0x9a>
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	09 2e       	mov	r0, r25
     ed0:	00 0c       	add	r0, r0
     ed2:	aa 0b       	sbc	r26, r26
     ed4:	bb 0b       	sbc	r27, r27
     ed6:	bc 01       	movw	r22, r24
     ed8:	55 27       	eor	r21, r21
     eda:	44 27       	eor	r20, r20
     edc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ee0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ee4:	a0 e0       	ldi	r26, 0x00	; 0
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	84 2b       	or	r24, r20
     eea:	95 2b       	or	r25, r21
     eec:	a6 2b       	or	r26, r22
     eee:	b7 2b       	or	r27, r23
     ef0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     ef4:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     ef8:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     efc:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     f00:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0x6>
     f04:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0x7>
     f08:	30 97       	sbiw	r30, 0x00	; 0
     f0a:	39 f0       	breq	.+14     	; 0xf1a <__vector_4+0xb4>
     f0c:	63 e0       	ldi	r22, 0x03	; 3
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0x6>
     f14:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0x7>
     f18:	09 95       	icall
     f1a:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	0f 90       	pop	r0
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	0f 90       	pop	r0
     f40:	1f 90       	pop	r1
     f42:	18 95       	reti

00000f44 <__vector_5>:
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	2f 93       	push	r18
     f54:	3f 93       	push	r19
     f56:	4f 93       	push	r20
     f58:	5f 93       	push	r21
     f5a:	6f 93       	push	r22
     f5c:	7f 93       	push	r23
     f5e:	8f 93       	push	r24
     f60:	9f 93       	push	r25
     f62:	af 93       	push	r26
     f64:	bf 93       	push	r27
     f66:	ef 93       	push	r30
     f68:	ff 93       	push	r31
     f6a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
     f6e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
     f72:	ac 01       	movw	r20, r24
     f74:	09 2e       	mov	r0, r25
     f76:	00 0c       	add	r0, r0
     f78:	66 0b       	sbc	r22, r22
     f7a:	77 0b       	sbc	r23, r23
     f7c:	9a 01       	movw	r18, r20
     f7e:	11 27       	eor	r17, r17
     f80:	00 27       	eor	r16, r16
     f82:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f86:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	40 2b       	or	r20, r16
     f90:	51 2b       	or	r21, r17
     f92:	62 2b       	or	r22, r18
     f94:	73 2b       	or	r23, r19
     f96:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
     f9a:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
     f9e:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
     fa2:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
     fa6:	b0 9b       	sbis	0x16, 0	; 22
     fa8:	1a c0       	rjmp	.+52     	; 0xfde <__vector_5+0x9a>
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	09 2e       	mov	r0, r25
     fae:	00 0c       	add	r0, r0
     fb0:	aa 0b       	sbc	r26, r26
     fb2:	bb 0b       	sbc	r27, r27
     fb4:	bc 01       	movw	r22, r24
     fb6:	55 27       	eor	r21, r21
     fb8:	44 27       	eor	r20, r20
     fba:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fbe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	84 2b       	or	r24, r20
     fc8:	95 2b       	or	r25, r21
     fca:	a6 2b       	or	r26, r22
     fcc:	b7 2b       	or	r27, r23
     fce:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
     fd2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
     fd6:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
     fda:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
     fde:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x8>
     fe2:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x9>
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	39 f0       	breq	.+14     	; 0xff8 <__vector_5+0xb4>
     fea:	64 e0       	ldi	r22, 0x04	; 4
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x8>
     ff2:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x9>
     ff6:	09 95       	icall
     ff8:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <__vector_10>:
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	ef 93       	push	r30
    1046:	ff 93       	push	r31
    1048:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    104c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1050:	ac 01       	movw	r20, r24
    1052:	09 2e       	mov	r0, r25
    1054:	00 0c       	add	r0, r0
    1056:	66 0b       	sbc	r22, r22
    1058:	77 0b       	sbc	r23, r23
    105a:	9a 01       	movw	r18, r20
    105c:	11 27       	eor	r17, r17
    105e:	00 27       	eor	r16, r16
    1060:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1064:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	40 2b       	or	r20, r16
    106e:	51 2b       	or	r21, r17
    1070:	62 2b       	or	r22, r18
    1072:	73 2b       	or	r23, r19
    1074:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1078:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    107c:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    1080:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1084:	b0 9b       	sbis	0x16, 0	; 22
    1086:	1a c0       	rjmp	.+52     	; 0x10bc <__vector_10+0x9a>
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	09 2e       	mov	r0, r25
    108c:	00 0c       	add	r0, r0
    108e:	aa 0b       	sbc	r26, r26
    1090:	bb 0b       	sbc	r27, r27
    1092:	bc 01       	movw	r22, r24
    1094:	55 27       	eor	r21, r21
    1096:	44 27       	eor	r20, r20
    1098:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    109c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a0:	a0 e0       	ldi	r26, 0x00	; 0
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	84 2b       	or	r24, r20
    10a6:	95 2b       	or	r25, r21
    10a8:	a6 2b       	or	r26, r22
    10aa:	b7 2b       	or	r27, r23
    10ac:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    10b0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    10b4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    10b8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    10bc:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0xa>
    10c0:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0xb>
    10c4:	30 97       	sbiw	r30, 0x00	; 0
    10c6:	39 f0       	breq	.+14     	; 0x10d6 <__vector_10+0xb4>
    10c8:	65 e0       	ldi	r22, 0x05	; 5
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0xa>
    10d0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0xb>
    10d4:	09 95       	icall
    10d6:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    10da:	ff 91       	pop	r31
    10dc:	ef 91       	pop	r30
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	7f 91       	pop	r23
    10e8:	6f 91       	pop	r22
    10ea:	5f 91       	pop	r21
    10ec:	4f 91       	pop	r20
    10ee:	3f 91       	pop	r19
    10f0:	2f 91       	pop	r18
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	0f 90       	pop	r0
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	0f 90       	pop	r0
    10fc:	1f 90       	pop	r1
    10fe:	18 95       	reti

00001100 <__vector_11>:
    1100:	1f 92       	push	r1
    1102:	0f 92       	push	r0
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	0f 92       	push	r0
    1108:	11 24       	eor	r1, r1
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	2f 93       	push	r18
    1110:	3f 93       	push	r19
    1112:	4f 93       	push	r20
    1114:	5f 93       	push	r21
    1116:	6f 93       	push	r22
    1118:	7f 93       	push	r23
    111a:	8f 93       	push	r24
    111c:	9f 93       	push	r25
    111e:	af 93       	push	r26
    1120:	bf 93       	push	r27
    1122:	ef 93       	push	r30
    1124:	ff 93       	push	r31
    1126:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    112a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    112e:	ac 01       	movw	r20, r24
    1130:	09 2e       	mov	r0, r25
    1132:	00 0c       	add	r0, r0
    1134:	66 0b       	sbc	r22, r22
    1136:	77 0b       	sbc	r23, r23
    1138:	9a 01       	movw	r18, r20
    113a:	11 27       	eor	r17, r17
    113c:	00 27       	eor	r16, r16
    113e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1142:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1146:	60 e0       	ldi	r22, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	40 2b       	or	r20, r16
    114c:	51 2b       	or	r21, r17
    114e:	62 2b       	or	r22, r18
    1150:	73 2b       	or	r23, r19
    1152:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1156:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    115a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    115e:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1162:	b0 9b       	sbis	0x16, 0	; 22
    1164:	1a c0       	rjmp	.+52     	; 0x119a <__vector_11+0x9a>
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	09 2e       	mov	r0, r25
    116a:	00 0c       	add	r0, r0
    116c:	aa 0b       	sbc	r26, r26
    116e:	bb 0b       	sbc	r27, r27
    1170:	bc 01       	movw	r22, r24
    1172:	55 27       	eor	r21, r21
    1174:	44 27       	eor	r20, r20
    1176:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    117a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	84 2b       	or	r24, r20
    1184:	95 2b       	or	r25, r21
    1186:	a6 2b       	or	r26, r22
    1188:	b7 2b       	or	r27, r23
    118a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    118e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1192:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1196:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    119a:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0xc>
    119e:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0xd>
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	39 f0       	breq	.+14     	; 0x11b4 <__vector_11+0xb4>
    11a6:	66 e0       	ldi	r22, 0x06	; 6
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0xc>
    11ae:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0xd>
    11b2:	09 95       	icall
    11b4:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    11b8:	ff 91       	pop	r31
    11ba:	ef 91       	pop	r30
    11bc:	bf 91       	pop	r27
    11be:	af 91       	pop	r26
    11c0:	9f 91       	pop	r25
    11c2:	8f 91       	pop	r24
    11c4:	7f 91       	pop	r23
    11c6:	6f 91       	pop	r22
    11c8:	5f 91       	pop	r21
    11ca:	4f 91       	pop	r20
    11cc:	3f 91       	pop	r19
    11ce:	2f 91       	pop	r18
    11d0:	1f 91       	pop	r17
    11d2:	0f 91       	pop	r16
    11d4:	0f 90       	pop	r0
    11d6:	0f be       	out	0x3f, r0	; 63
    11d8:	0f 90       	pop	r0
    11da:	1f 90       	pop	r1
    11dc:	18 95       	reti

000011de <__vector_12>:
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	ef 93       	push	r30
    1202:	ff 93       	push	r31
    1204:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1208:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    120c:	ac 01       	movw	r20, r24
    120e:	09 2e       	mov	r0, r25
    1210:	00 0c       	add	r0, r0
    1212:	66 0b       	sbc	r22, r22
    1214:	77 0b       	sbc	r23, r23
    1216:	9a 01       	movw	r18, r20
    1218:	11 27       	eor	r17, r17
    121a:	00 27       	eor	r16, r16
    121c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1220:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	40 2b       	or	r20, r16
    122a:	51 2b       	or	r21, r17
    122c:	62 2b       	or	r22, r18
    122e:	73 2b       	or	r23, r19
    1230:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1234:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    1238:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    123c:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1240:	b0 9b       	sbis	0x16, 0	; 22
    1242:	1a c0       	rjmp	.+52     	; 0x1278 <__vector_12+0x9a>
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	09 2e       	mov	r0, r25
    1248:	00 0c       	add	r0, r0
    124a:	aa 0b       	sbc	r26, r26
    124c:	bb 0b       	sbc	r27, r27
    124e:	bc 01       	movw	r22, r24
    1250:	55 27       	eor	r21, r21
    1252:	44 27       	eor	r20, r20
    1254:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1258:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	84 2b       	or	r24, r20
    1262:	95 2b       	or	r25, r21
    1264:	a6 2b       	or	r26, r22
    1266:	b7 2b       	or	r27, r23
    1268:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    126c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1270:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1274:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1278:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0xe>
    127c:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0xf>
    1280:	30 97       	sbiw	r30, 0x00	; 0
    1282:	39 f0       	breq	.+14     	; 0x1292 <__vector_12+0xb4>
    1284:	67 e0       	ldi	r22, 0x07	; 7
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0xe>
    128c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0xf>
    1290:	09 95       	icall
    1292:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	4f 91       	pop	r20
    12aa:	3f 91       	pop	r19
    12ac:	2f 91       	pop	r18
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <__vector_13>:
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	2f 93       	push	r18
    12cc:	3f 93       	push	r19
    12ce:	4f 93       	push	r20
    12d0:	5f 93       	push	r21
    12d2:	6f 93       	push	r22
    12d4:	7f 93       	push	r23
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	af 93       	push	r26
    12dc:	bf 93       	push	r27
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
    12e2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    12e6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    12ea:	ac 01       	movw	r20, r24
    12ec:	09 2e       	mov	r0, r25
    12ee:	00 0c       	add	r0, r0
    12f0:	66 0b       	sbc	r22, r22
    12f2:	77 0b       	sbc	r23, r23
    12f4:	9a 01       	movw	r18, r20
    12f6:	11 27       	eor	r17, r17
    12f8:	00 27       	eor	r16, r16
    12fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	40 2b       	or	r20, r16
    1308:	51 2b       	or	r21, r17
    130a:	62 2b       	or	r22, r18
    130c:	73 2b       	or	r23, r19
    130e:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1312:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    1316:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    131a:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    131e:	b0 9b       	sbis	0x16, 0	; 22
    1320:	1a c0       	rjmp	.+52     	; 0x1356 <__vector_13+0x9a>
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	09 2e       	mov	r0, r25
    1326:	00 0c       	add	r0, r0
    1328:	aa 0b       	sbc	r26, r26
    132a:	bb 0b       	sbc	r27, r27
    132c:	bc 01       	movw	r22, r24
    132e:	55 27       	eor	r21, r21
    1330:	44 27       	eor	r20, r20
    1332:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1336:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	84 2b       	or	r24, r20
    1340:	95 2b       	or	r25, r21
    1342:	a6 2b       	or	r26, r22
    1344:	b7 2b       	or	r27, r23
    1346:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    134a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    134e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1352:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1356:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x10>
    135a:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x11>
    135e:	30 97       	sbiw	r30, 0x00	; 0
    1360:	39 f0       	breq	.+14     	; 0x1370 <__vector_13+0xb4>
    1362:	68 e0       	ldi	r22, 0x08	; 8
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x10>
    136a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x11>
    136e:	09 95       	icall
    1370:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	4f 91       	pop	r20
    1388:	3f 91       	pop	r19
    138a:	2f 91       	pop	r18
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <__vector_14>:
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	2f 93       	push	r18
    13aa:	3f 93       	push	r19
    13ac:	4f 93       	push	r20
    13ae:	5f 93       	push	r21
    13b0:	6f 93       	push	r22
    13b2:	7f 93       	push	r23
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	af 93       	push	r26
    13ba:	bf 93       	push	r27
    13bc:	ef 93       	push	r30
    13be:	ff 93       	push	r31
    13c0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    13c4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    13c8:	ac 01       	movw	r20, r24
    13ca:	09 2e       	mov	r0, r25
    13cc:	00 0c       	add	r0, r0
    13ce:	66 0b       	sbc	r22, r22
    13d0:	77 0b       	sbc	r23, r23
    13d2:	9a 01       	movw	r18, r20
    13d4:	11 27       	eor	r17, r17
    13d6:	00 27       	eor	r16, r16
    13d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	40 2b       	or	r20, r16
    13e6:	51 2b       	or	r21, r17
    13e8:	62 2b       	or	r22, r18
    13ea:	73 2b       	or	r23, r19
    13ec:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    13f0:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    13f4:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    13f8:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    13fc:	b0 9b       	sbis	0x16, 0	; 22
    13fe:	1a c0       	rjmp	.+52     	; 0x1434 <__vector_14+0x9a>
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	09 2e       	mov	r0, r25
    1404:	00 0c       	add	r0, r0
    1406:	aa 0b       	sbc	r26, r26
    1408:	bb 0b       	sbc	r27, r27
    140a:	bc 01       	movw	r22, r24
    140c:	55 27       	eor	r21, r21
    140e:	44 27       	eor	r20, r20
    1410:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1414:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	84 2b       	or	r24, r20
    141e:	95 2b       	or	r25, r21
    1420:	a6 2b       	or	r26, r22
    1422:	b7 2b       	or	r27, r23
    1424:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1428:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    142c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1430:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1434:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x12>
    1438:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x13>
    143c:	30 97       	sbiw	r30, 0x00	; 0
    143e:	39 f0       	breq	.+14     	; 0x144e <__vector_14+0xb4>
    1440:	69 e0       	ldi	r22, 0x09	; 9
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x12>
    1448:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x13>
    144c:	09 95       	icall
    144e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <__vector_15>:
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    14a2:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    14a6:	ac 01       	movw	r20, r24
    14a8:	09 2e       	mov	r0, r25
    14aa:	00 0c       	add	r0, r0
    14ac:	66 0b       	sbc	r22, r22
    14ae:	77 0b       	sbc	r23, r23
    14b0:	9a 01       	movw	r18, r20
    14b2:	11 27       	eor	r17, r17
    14b4:	00 27       	eor	r16, r16
    14b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	40 2b       	or	r20, r16
    14c4:	51 2b       	or	r21, r17
    14c6:	62 2b       	or	r22, r18
    14c8:	73 2b       	or	r23, r19
    14ca:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    14ce:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    14d2:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    14d6:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    14da:	b0 9b       	sbis	0x16, 0	; 22
    14dc:	1a c0       	rjmp	.+52     	; 0x1512 <__vector_15+0x9a>
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	09 2e       	mov	r0, r25
    14e2:	00 0c       	add	r0, r0
    14e4:	aa 0b       	sbc	r26, r26
    14e6:	bb 0b       	sbc	r27, r27
    14e8:	bc 01       	movw	r22, r24
    14ea:	55 27       	eor	r21, r21
    14ec:	44 27       	eor	r20, r20
    14ee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14f2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14f6:	a0 e0       	ldi	r26, 0x00	; 0
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	84 2b       	or	r24, r20
    14fc:	95 2b       	or	r25, r21
    14fe:	a6 2b       	or	r26, r22
    1500:	b7 2b       	or	r27, r23
    1502:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1506:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    150a:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    150e:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1512:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x14>
    1516:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x15>
    151a:	30 97       	sbiw	r30, 0x00	; 0
    151c:	39 f0       	breq	.+14     	; 0x152c <__vector_15+0xb4>
    151e:	6a e0       	ldi	r22, 0x0A	; 10
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x14>
    1526:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x15>
    152a:	09 95       	icall
    152c:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <__vector_16>:
    1556:	1f 92       	push	r1
    1558:	0f 92       	push	r0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	0f 92       	push	r0
    155e:	11 24       	eor	r1, r1
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	ef 93       	push	r30
    157a:	ff 93       	push	r31
    157c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1580:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1584:	ac 01       	movw	r20, r24
    1586:	09 2e       	mov	r0, r25
    1588:	00 0c       	add	r0, r0
    158a:	66 0b       	sbc	r22, r22
    158c:	77 0b       	sbc	r23, r23
    158e:	9a 01       	movw	r18, r20
    1590:	11 27       	eor	r17, r17
    1592:	00 27       	eor	r16, r16
    1594:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1598:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	40 2b       	or	r20, r16
    15a2:	51 2b       	or	r21, r17
    15a4:	62 2b       	or	r22, r18
    15a6:	73 2b       	or	r23, r19
    15a8:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    15ac:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    15b0:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    15b4:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    15b8:	b0 9b       	sbis	0x16, 0	; 22
    15ba:	1a c0       	rjmp	.+52     	; 0x15f0 <__vector_16+0x9a>
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	09 2e       	mov	r0, r25
    15c0:	00 0c       	add	r0, r0
    15c2:	aa 0b       	sbc	r26, r26
    15c4:	bb 0b       	sbc	r27, r27
    15c6:	bc 01       	movw	r22, r24
    15c8:	55 27       	eor	r21, r21
    15ca:	44 27       	eor	r20, r20
    15cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15d4:	a0 e0       	ldi	r26, 0x00	; 0
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	84 2b       	or	r24, r20
    15da:	95 2b       	or	r25, r21
    15dc:	a6 2b       	or	r26, r22
    15de:	b7 2b       	or	r27, r23
    15e0:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    15e4:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    15e8:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    15ec:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    15f0:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x16>
    15f4:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x17>
    15f8:	30 97       	sbiw	r30, 0x00	; 0
    15fa:	39 f0       	breq	.+14     	; 0x160a <__vector_16+0xb4>
    15fc:	6b e0       	ldi	r22, 0x0B	; 11
    15fe:	70 e0       	ldi	r23, 0x00	; 0
    1600:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x16>
    1604:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x17>
    1608:	09 95       	icall
    160a:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	bf 91       	pop	r27
    1614:	af 91       	pop	r26
    1616:	9f 91       	pop	r25
    1618:	8f 91       	pop	r24
    161a:	7f 91       	pop	r23
    161c:	6f 91       	pop	r22
    161e:	5f 91       	pop	r21
    1620:	4f 91       	pop	r20
    1622:	3f 91       	pop	r19
    1624:	2f 91       	pop	r18
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	0f 90       	pop	r0
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	0f 90       	pop	r0
    1630:	1f 90       	pop	r1
    1632:	18 95       	reti

00001634 <__vector_17>:
    1634:	1f 92       	push	r1
    1636:	0f 92       	push	r0
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	0f 92       	push	r0
    163c:	11 24       	eor	r1, r1
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	2f 93       	push	r18
    1644:	3f 93       	push	r19
    1646:	4f 93       	push	r20
    1648:	5f 93       	push	r21
    164a:	6f 93       	push	r22
    164c:	7f 93       	push	r23
    164e:	8f 93       	push	r24
    1650:	9f 93       	push	r25
    1652:	af 93       	push	r26
    1654:	bf 93       	push	r27
    1656:	ef 93       	push	r30
    1658:	ff 93       	push	r31
    165a:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    165e:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1662:	ac 01       	movw	r20, r24
    1664:	09 2e       	mov	r0, r25
    1666:	00 0c       	add	r0, r0
    1668:	66 0b       	sbc	r22, r22
    166a:	77 0b       	sbc	r23, r23
    166c:	9a 01       	movw	r18, r20
    166e:	11 27       	eor	r17, r17
    1670:	00 27       	eor	r16, r16
    1672:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1676:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	40 2b       	or	r20, r16
    1680:	51 2b       	or	r21, r17
    1682:	62 2b       	or	r22, r18
    1684:	73 2b       	or	r23, r19
    1686:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    168a:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    168e:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    1692:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1696:	b0 9b       	sbis	0x16, 0	; 22
    1698:	1a c0       	rjmp	.+52     	; 0x16ce <__vector_17+0x9a>
    169a:	01 96       	adiw	r24, 0x01	; 1
    169c:	09 2e       	mov	r0, r25
    169e:	00 0c       	add	r0, r0
    16a0:	aa 0b       	sbc	r26, r26
    16a2:	bb 0b       	sbc	r27, r27
    16a4:	bc 01       	movw	r22, r24
    16a6:	55 27       	eor	r21, r21
    16a8:	44 27       	eor	r20, r20
    16aa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16ae:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	84 2b       	or	r24, r20
    16b8:	95 2b       	or	r25, r21
    16ba:	a6 2b       	or	r26, r22
    16bc:	b7 2b       	or	r27, r23
    16be:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    16c2:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    16c6:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    16ca:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    16ce:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x18>
    16d2:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x19>
    16d6:	30 97       	sbiw	r30, 0x00	; 0
    16d8:	39 f0       	breq	.+14     	; 0x16e8 <__vector_17+0xb4>
    16da:	6c e0       	ldi	r22, 0x0C	; 12
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x18>
    16e2:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x19>
    16e6:	09 95       	icall
    16e8:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	0f 90       	pop	r0
    170e:	1f 90       	pop	r1
    1710:	18 95       	reti

00001712 <__vector_18>:
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	0f 92       	push	r0
    171a:	11 24       	eor	r1, r1
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    173c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1740:	ac 01       	movw	r20, r24
    1742:	09 2e       	mov	r0, r25
    1744:	00 0c       	add	r0, r0
    1746:	66 0b       	sbc	r22, r22
    1748:	77 0b       	sbc	r23, r23
    174a:	9a 01       	movw	r18, r20
    174c:	11 27       	eor	r17, r17
    174e:	00 27       	eor	r16, r16
    1750:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1754:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	40 2b       	or	r20, r16
    175e:	51 2b       	or	r21, r17
    1760:	62 2b       	or	r22, r18
    1762:	73 2b       	or	r23, r19
    1764:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1768:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    176c:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    1770:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1774:	b0 9b       	sbis	0x16, 0	; 22
    1776:	1a c0       	rjmp	.+52     	; 0x17ac <__vector_18+0x9a>
    1778:	01 96       	adiw	r24, 0x01	; 1
    177a:	09 2e       	mov	r0, r25
    177c:	00 0c       	add	r0, r0
    177e:	aa 0b       	sbc	r26, r26
    1780:	bb 0b       	sbc	r27, r27
    1782:	bc 01       	movw	r22, r24
    1784:	55 27       	eor	r21, r21
    1786:	44 27       	eor	r20, r20
    1788:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    178c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1790:	a0 e0       	ldi	r26, 0x00	; 0
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	84 2b       	or	r24, r20
    1796:	95 2b       	or	r25, r21
    1798:	a6 2b       	or	r26, r22
    179a:	b7 2b       	or	r27, r23
    179c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    17a0:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    17a4:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    17a8:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    17ac:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x1a>
    17b0:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x1b>
    17b4:	30 97       	sbiw	r30, 0x00	; 0
    17b6:	39 f0       	breq	.+14     	; 0x17c6 <__vector_18+0xb4>
    17b8:	6d e0       	ldi	r22, 0x0D	; 13
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x1a>
    17c0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x1b>
    17c4:	09 95       	icall
    17c6:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	1f 90       	pop	r1
    17ee:	18 95       	reti

000017f0 <__vector_19>:
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	2f 93       	push	r18
    1800:	3f 93       	push	r19
    1802:	4f 93       	push	r20
    1804:	5f 93       	push	r21
    1806:	6f 93       	push	r22
    1808:	7f 93       	push	r23
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	af 93       	push	r26
    1810:	bf 93       	push	r27
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    181a:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    181e:	ac 01       	movw	r20, r24
    1820:	09 2e       	mov	r0, r25
    1822:	00 0c       	add	r0, r0
    1824:	66 0b       	sbc	r22, r22
    1826:	77 0b       	sbc	r23, r23
    1828:	9a 01       	movw	r18, r20
    182a:	11 27       	eor	r17, r17
    182c:	00 27       	eor	r16, r16
    182e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1832:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	40 2b       	or	r20, r16
    183c:	51 2b       	or	r21, r17
    183e:	62 2b       	or	r22, r18
    1840:	73 2b       	or	r23, r19
    1842:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1846:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    184a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    184e:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1852:	b0 9b       	sbis	0x16, 0	; 22
    1854:	1a c0       	rjmp	.+52     	; 0x188a <__vector_19+0x9a>
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	09 2e       	mov	r0, r25
    185a:	00 0c       	add	r0, r0
    185c:	aa 0b       	sbc	r26, r26
    185e:	bb 0b       	sbc	r27, r27
    1860:	bc 01       	movw	r22, r24
    1862:	55 27       	eor	r21, r21
    1864:	44 27       	eor	r20, r20
    1866:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    186a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    186e:	a0 e0       	ldi	r26, 0x00	; 0
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	84 2b       	or	r24, r20
    1874:	95 2b       	or	r25, r21
    1876:	a6 2b       	or	r26, r22
    1878:	b7 2b       	or	r27, r23
    187a:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    187e:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1882:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1886:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    188a:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x1c>
    188e:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x1d>
    1892:	30 97       	sbiw	r30, 0x00	; 0
    1894:	39 f0       	breq	.+14     	; 0x18a4 <__vector_19+0xb4>
    1896:	6e e0       	ldi	r22, 0x0E	; 14
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x1c>
    189e:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x1d>
    18a2:	09 95       	icall
    18a4:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    18a8:	ff 91       	pop	r31
    18aa:	ef 91       	pop	r30
    18ac:	bf 91       	pop	r27
    18ae:	af 91       	pop	r26
    18b0:	9f 91       	pop	r25
    18b2:	8f 91       	pop	r24
    18b4:	7f 91       	pop	r23
    18b6:	6f 91       	pop	r22
    18b8:	5f 91       	pop	r21
    18ba:	4f 91       	pop	r20
    18bc:	3f 91       	pop	r19
    18be:	2f 91       	pop	r18
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	0f 90       	pop	r0
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	0f 90       	pop	r0
    18ca:	1f 90       	pop	r1
    18cc:	18 95       	reti

000018ce <__vector_20>:
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	2f 93       	push	r18
    18de:	3f 93       	push	r19
    18e0:	4f 93       	push	r20
    18e2:	5f 93       	push	r21
    18e4:	6f 93       	push	r22
    18e6:	7f 93       	push	r23
    18e8:	8f 93       	push	r24
    18ea:	9f 93       	push	r25
    18ec:	af 93       	push	r26
    18ee:	bf 93       	push	r27
    18f0:	ef 93       	push	r30
    18f2:	ff 93       	push	r31
    18f4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    18f8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    18fc:	ac 01       	movw	r20, r24
    18fe:	09 2e       	mov	r0, r25
    1900:	00 0c       	add	r0, r0
    1902:	66 0b       	sbc	r22, r22
    1904:	77 0b       	sbc	r23, r23
    1906:	9a 01       	movw	r18, r20
    1908:	11 27       	eor	r17, r17
    190a:	00 27       	eor	r16, r16
    190c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1910:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	40 2b       	or	r20, r16
    191a:	51 2b       	or	r21, r17
    191c:	62 2b       	or	r22, r18
    191e:	73 2b       	or	r23, r19
    1920:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1924:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    1928:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    192c:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1930:	b0 9b       	sbis	0x16, 0	; 22
    1932:	1a c0       	rjmp	.+52     	; 0x1968 <__vector_20+0x9a>
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	09 2e       	mov	r0, r25
    1938:	00 0c       	add	r0, r0
    193a:	aa 0b       	sbc	r26, r26
    193c:	bb 0b       	sbc	r27, r27
    193e:	bc 01       	movw	r22, r24
    1940:	55 27       	eor	r21, r21
    1942:	44 27       	eor	r20, r20
    1944:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1948:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    194c:	a0 e0       	ldi	r26, 0x00	; 0
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	84 2b       	or	r24, r20
    1952:	95 2b       	or	r25, r21
    1954:	a6 2b       	or	r26, r22
    1956:	b7 2b       	or	r27, r23
    1958:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    195c:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1960:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1964:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1968:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <mtable+0x1e>
    196c:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <mtable+0x1f>
    1970:	30 97       	sbiw	r30, 0x00	; 0
    1972:	39 f0       	breq	.+14     	; 0x1982 <__vector_20+0xb4>
    1974:	6f e0       	ldi	r22, 0x0F	; 15
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <otable+0x1e>
    197c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <otable+0x1f>
    1980:	09 95       	icall
    1982:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_21>:
    19ac:	1f 92       	push	r1
    19ae:	0f 92       	push	r0
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	0f 92       	push	r0
    19b4:	11 24       	eor	r1, r1
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    19d6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    19da:	ac 01       	movw	r20, r24
    19dc:	09 2e       	mov	r0, r25
    19de:	00 0c       	add	r0, r0
    19e0:	66 0b       	sbc	r22, r22
    19e2:	77 0b       	sbc	r23, r23
    19e4:	9a 01       	movw	r18, r20
    19e6:	11 27       	eor	r17, r17
    19e8:	00 27       	eor	r16, r16
    19ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f2:	60 e0       	ldi	r22, 0x00	; 0
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	40 2b       	or	r20, r16
    19f8:	51 2b       	or	r21, r17
    19fa:	62 2b       	or	r22, r18
    19fc:	73 2b       	or	r23, r19
    19fe:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1a02:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    1a06:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    1a0a:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1a0e:	b0 9b       	sbis	0x16, 0	; 22
    1a10:	1a c0       	rjmp	.+52     	; 0x1a46 <__vector_21+0x9a>
    1a12:	01 96       	adiw	r24, 0x01	; 1
    1a14:	09 2e       	mov	r0, r25
    1a16:	00 0c       	add	r0, r0
    1a18:	aa 0b       	sbc	r26, r26
    1a1a:	bb 0b       	sbc	r27, r27
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	55 27       	eor	r21, r21
    1a20:	44 27       	eor	r20, r20
    1a22:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a26:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	84 2b       	or	r24, r20
    1a30:	95 2b       	or	r25, r21
    1a32:	a6 2b       	or	r26, r22
    1a34:	b7 2b       	or	r27, r23
    1a36:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1a3a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1a3e:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1a42:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1a46:	e0 91 00 02 	lds	r30, 0x0200	; 0x800200 <mtable+0x20>
    1a4a:	f0 91 01 02 	lds	r31, 0x0201	; 0x800201 <mtable+0x21>
    1a4e:	30 97       	sbiw	r30, 0x00	; 0
    1a50:	39 f0       	breq	.+14     	; 0x1a60 <__vector_21+0xb4>
    1a52:	60 e1       	ldi	r22, 0x10	; 16
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <otable+0x20>
    1a5a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <otable+0x21>
    1a5e:	09 95       	icall
    1a60:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1a64:	ff 91       	pop	r31
    1a66:	ef 91       	pop	r30
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	7f 91       	pop	r23
    1a72:	6f 91       	pop	r22
    1a74:	5f 91       	pop	r21
    1a76:	4f 91       	pop	r20
    1a78:	3f 91       	pop	r19
    1a7a:	2f 91       	pop	r18
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti

00001a8a <__vector_22>:
    1a8a:	1f 92       	push	r1
    1a8c:	0f 92       	push	r0
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	0f 92       	push	r0
    1a92:	11 24       	eor	r1, r1
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	2f 93       	push	r18
    1a9a:	3f 93       	push	r19
    1a9c:	4f 93       	push	r20
    1a9e:	5f 93       	push	r21
    1aa0:	6f 93       	push	r22
    1aa2:	7f 93       	push	r23
    1aa4:	8f 93       	push	r24
    1aa6:	9f 93       	push	r25
    1aa8:	af 93       	push	r26
    1aaa:	bf 93       	push	r27
    1aac:	ef 93       	push	r30
    1aae:	ff 93       	push	r31
    1ab0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1ab4:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1ab8:	ac 01       	movw	r20, r24
    1aba:	09 2e       	mov	r0, r25
    1abc:	00 0c       	add	r0, r0
    1abe:	66 0b       	sbc	r22, r22
    1ac0:	77 0b       	sbc	r23, r23
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	11 27       	eor	r17, r17
    1ac6:	00 27       	eor	r16, r16
    1ac8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1acc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	40 2b       	or	r20, r16
    1ad6:	51 2b       	or	r21, r17
    1ad8:	62 2b       	or	r22, r18
    1ada:	73 2b       	or	r23, r19
    1adc:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <timestamp>
    1ae0:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <timestamp+0x1>
    1ae4:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <timestamp+0x2>
    1ae8:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <timestamp+0x3>
    1aec:	b0 9b       	sbis	0x16, 0	; 22
    1aee:	1a c0       	rjmp	.+52     	; 0x1b24 <__vector_22+0x9a>
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	09 2e       	mov	r0, r25
    1af4:	00 0c       	add	r0, r0
    1af6:	aa 0b       	sbc	r26, r26
    1af8:	bb 0b       	sbc	r27, r27
    1afa:	bc 01       	movw	r22, r24
    1afc:	55 27       	eor	r21, r21
    1afe:	44 27       	eor	r20, r20
    1b00:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b04:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	84 2b       	or	r24, r20
    1b0e:	95 2b       	or	r25, r21
    1b10:	a6 2b       	or	r26, r22
    1b12:	b7 2b       	or	r27, r23
    1b14:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <timestamp>
    1b18:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <timestamp+0x1>
    1b1c:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <timestamp+0x2>
    1b20:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <timestamp+0x3>
    1b24:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <mtable+0x22>
    1b28:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <mtable+0x23>
    1b2c:	30 97       	sbiw	r30, 0x00	; 0
    1b2e:	39 f0       	breq	.+14     	; 0x1b3e <__vector_22+0xb4>
    1b30:	61 e1       	ldi	r22, 0x11	; 17
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <otable+0x22>
    1b38:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <otable+0x23>
    1b3c:	09 95       	icall
    1b3e:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1b42:	ff 91       	pop	r31
    1b44:	ef 91       	pop	r30
    1b46:	bf 91       	pop	r27
    1b48:	af 91       	pop	r26
    1b4a:	9f 91       	pop	r25
    1b4c:	8f 91       	pop	r24
    1b4e:	7f 91       	pop	r23
    1b50:	6f 91       	pop	r22
    1b52:	5f 91       	pop	r21
    1b54:	4f 91       	pop	r20
    1b56:	3f 91       	pop	r19
    1b58:	2f 91       	pop	r18
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	0f 90       	pop	r0
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	0f 90       	pop	r0
    1b64:	1f 90       	pop	r1
    1b66:	18 95       	reti

00001b68 <idle>:
    1b68:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1b6c:	78 94       	sei
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	83 bf       	out	0x33, r24	; 51
    1b72:	88 95       	sleep
    1b74:	fc cf       	rjmp	.-8      	; 0x1b6e <idle+0x6>

00001b76 <__vector_9>:
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1b98:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <overflows+0x1>
    1ba2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <overflows>
    1ba6:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <timerQ>
    1baa:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <timerQ+0x1>
    1bae:	30 97       	sbiw	r30, 0x00	; 0
    1bb0:	01 f1       	breq	.+64     	; 0x1bf2 <__vector_9+0x7c>
    1bb2:	42 81       	ldd	r20, Z+2	; 0x02
    1bb4:	53 81       	ldd	r21, Z+3	; 0x03
    1bb6:	64 81       	ldd	r22, Z+4	; 0x04
    1bb8:	75 81       	ldd	r23, Z+5	; 0x05
    1bba:	86 17       	cp	r24, r22
    1bbc:	97 07       	cpc	r25, r23
    1bbe:	c9 f4       	brne	.+50     	; 0x1bf2 <__vector_9+0x7c>
    1bc0:	ca 01       	movw	r24, r20
    1bc2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bc6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bca:	42 1b       	sub	r20, r18
    1bcc:	53 0b       	sbc	r21, r19
    1bce:	41 30       	cpi	r20, 0x01	; 1
    1bd0:	51 05       	cpc	r21, r1
    1bd2:	29 f4       	brne	.+10     	; 0x1bde <__vector_9+0x68>
    1bd4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bd8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bdc:	01 96       	adiw	r24, 0x01	; 1
    1bde:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1be2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1be6:	ef e6       	ldi	r30, 0x6F	; 111
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	82 60       	ori	r24, 0x02	; 2
    1bee:	80 83       	st	Z, r24
    1bf0:	05 c0       	rjmp	.+10     	; 0x1bfc <__vector_9+0x86>
    1bf2:	ef e6       	ldi	r30, 0x6F	; 111
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	8d 7f       	andi	r24, 0xFD	; 253
    1bfa:	80 83       	st	Z, r24
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_7>:
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	cf 92       	push	r12
    1c26:	df 92       	push	r13
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <overflows>
    1c48:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <overflows+0x1>
    1c4c:	6c 01       	movw	r12, r24
    1c4e:	09 2e       	mov	r0, r25
    1c50:	00 0c       	add	r0, r0
    1c52:	ee 08       	sbc	r14, r14
    1c54:	ff 08       	sbc	r15, r15
    1c56:	76 01       	movw	r14, r12
    1c58:	dd 24       	eor	r13, r13
    1c5a:	cc 24       	eor	r12, r12
    1c5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	c4 2a       	or	r12, r20
    1c6a:	d5 2a       	or	r13, r21
    1c6c:	e6 2a       	or	r14, r22
    1c6e:	f7 2a       	or	r15, r23
    1c70:	b0 9b       	sbis	0x16, 0	; 22
    1c72:	1e c0       	rjmp	.+60     	; 0x1cb0 <__vector_7+0x96>
    1c74:	6c 01       	movw	r12, r24
    1c76:	2f ef       	ldi	r18, 0xFF	; 255
    1c78:	c2 1a       	sub	r12, r18
    1c7a:	d2 0a       	sbc	r13, r18
    1c7c:	0d 2c       	mov	r0, r13
    1c7e:	00 0c       	add	r0, r0
    1c80:	ee 08       	sbc	r14, r14
    1c82:	ff 08       	sbc	r15, r15
    1c84:	d6 01       	movw	r26, r12
    1c86:	99 27       	eor	r25, r25
    1c88:	88 27       	eor	r24, r24
    1c8a:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c8e:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c92:	e1 2c       	mov	r14, r1
    1c94:	f1 2c       	mov	r15, r1
    1c96:	c8 2a       	or	r12, r24
    1c98:	d9 2a       	or	r13, r25
    1c9a:	ea 2a       	or	r14, r26
    1c9c:	fb 2a       	or	r15, r27
    1c9e:	08 c0       	rjmp	.+16     	; 0x1cb0 <__vector_7+0x96>
    1ca0:	84 e4       	ldi	r24, 0x44	; 68
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 7d 05 	call	0xafa	; 0xafa <dequeue>
    1ca8:	66 e4       	ldi	r22, 0x46	; 70
    1caa:	71 e0       	ldi	r23, 0x01	; 1
    1cac:	0e 94 1b 05 	call	0xa36	; 0xa36 <enqueueByDeadline>
    1cb0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <timerQ>
    1cb4:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <timerQ+0x1>
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	69 f0       	breq	.+26     	; 0x1cd6 <__vector_7+0xbc>
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	93 81       	ldd	r25, Z+3	; 0x03
    1cc0:	a4 81       	ldd	r26, Z+4	; 0x04
    1cc2:	b5 81       	ldd	r27, Z+5	; 0x05
    1cc4:	8c 19       	sub	r24, r12
    1cc6:	9d 09       	sbc	r25, r13
    1cc8:	ae 09       	sbc	r26, r14
    1cca:	bf 09       	sbc	r27, r15
    1ccc:	18 16       	cp	r1, r24
    1cce:	19 06       	cpc	r1, r25
    1cd0:	1a 06       	cpc	r1, r26
    1cd2:	1b 06       	cpc	r1, r27
    1cd4:	2c f7       	brge	.-54     	; 0x1ca0 <__vector_7+0x86>
    1cd6:	30 97       	sbiw	r30, 0x00	; 0
    1cd8:	21 f1       	breq	.+72     	; 0x1d22 <__vector_7+0x108>
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	a4 81       	ldd	r26, Z+4	; 0x04
    1ce0:	b5 81       	ldd	r27, Z+5	; 0x05
    1ce2:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1ce6:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1cea:	2a 17       	cp	r18, r26
    1cec:	3b 07       	cpc	r19, r27
    1cee:	c9 f4       	brne	.+50     	; 0x1d22 <__vector_7+0x108>
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cf6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cfa:	84 1b       	sub	r24, r20
    1cfc:	95 0b       	sbc	r25, r21
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	31 f4       	brne	.+12     	; 0x1d0e <__vector_7+0xf4>
    1d02:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d06:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d0a:	2f 5f       	subi	r18, 0xFF	; 255
    1d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d12:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d16:	ef e6       	ldi	r30, 0x6F	; 111
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 60       	ori	r24, 0x02	; 2
    1d1e:	80 83       	st	Z, r24
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <__vector_7+0x112>
    1d22:	ef e6       	ldi	r30, 0x6F	; 111
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	8d 7f       	andi	r24, 0xFD	; 253
    1d2a:	80 83       	st	Z, r24
    1d2c:	0e 94 b2 05 	call	0xb64	; 0xb64 <schedule>
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	ff 90       	pop	r15
    1d4a:	ef 90       	pop	r14
    1d4c:	df 90       	pop	r13
    1d4e:	cf 90       	pop	r12
    1d50:	0f 90       	pop	r0
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	0f 90       	pop	r0
    1d56:	1f 90       	pop	r1
    1d58:	18 95       	reti

00001d5a <async>:
    1d5a:	3f 92       	push	r3
    1d5c:	4f 92       	push	r4
    1d5e:	5f 92       	push	r5
    1d60:	6f 92       	push	r6
    1d62:	7f 92       	push	r7
    1d64:	8f 92       	push	r8
    1d66:	9f 92       	push	r9
    1d68:	af 92       	push	r10
    1d6a:	bf 92       	push	r11
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	2b 01       	movw	r4, r22
    1d7e:	3c 01       	movw	r6, r24
    1d80:	49 01       	movw	r8, r18
    1d82:	5a 01       	movw	r10, r20
    1d84:	8f b7       	in	r24, 0x3f	; 63
    1d86:	80 78       	andi	r24, 0x80	; 128
    1d88:	38 2e       	mov	r3, r24
    1d8a:	f8 94       	cli
    1d8c:	83 e2       	ldi	r24, 0x23	; 35
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	0e 94 7d 05 	call	0xafa	; 0xafa <dequeue>
    1d94:	ec 01       	movw	r28, r24
    1d96:	1b 87       	std	Y+11, r17	; 0x0b
    1d98:	0a 87       	std	Y+10, r16	; 0x0a
    1d9a:	fd 86       	std	Y+13, r15	; 0x0d
    1d9c:	ec 86       	std	Y+12, r14	; 0x0c
    1d9e:	df 86       	std	Y+15, r13	; 0x0f
    1da0:	ce 86       	std	Y+14, r12	; 0x0e
    1da2:	33 20       	and	r3, r3
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <async+0x64>
    1da6:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <current>
    1daa:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <current+0x1>
    1dae:	02 80       	ldd	r0, Z+2	; 0x02
    1db0:	f3 81       	ldd	r31, Z+3	; 0x03
    1db2:	e0 2d       	mov	r30, r0
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	a4 81       	ldd	r26, Z+4	; 0x04
    1dba:	b5 81       	ldd	r27, Z+5	; 0x05
    1dbc:	08 c0       	rjmp	.+16     	; 0x1dce <async+0x74>
    1dbe:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <timestamp>
    1dc2:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <timestamp+0x1>
    1dc6:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <timestamp+0x2>
    1dca:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <timestamp+0x3>
    1dce:	48 0e       	add	r4, r24
    1dd0:	59 1e       	adc	r5, r25
    1dd2:	6a 1e       	adc	r6, r26
    1dd4:	7b 1e       	adc	r7, r27
    1dd6:	4a 82       	std	Y+2, r4	; 0x02
    1dd8:	5b 82       	std	Y+3, r5	; 0x03
    1dda:	6c 82       	std	Y+4, r6	; 0x04
    1ddc:	7d 82       	std	Y+5, r7	; 0x05
    1dde:	18 14       	cp	r1, r8
    1de0:	19 04       	cpc	r1, r9
    1de2:	1a 04       	cpc	r1, r10
    1de4:	1b 04       	cpc	r1, r11
    1de6:	44 f0       	brlt	.+16     	; 0x1df8 <async+0x9e>
    1de8:	0f 2e       	mov	r0, r31
    1dea:	88 24       	eor	r8, r8
    1dec:	8a 94       	dec	r8
    1dee:	98 2c       	mov	r9, r8
    1df0:	a8 2c       	mov	r10, r8
    1df2:	ff e7       	ldi	r31, 0x7F	; 127
    1df4:	bf 2e       	mov	r11, r31
    1df6:	f0 2d       	mov	r31, r0
    1df8:	84 0c       	add	r8, r4
    1dfa:	95 1c       	adc	r9, r5
    1dfc:	a6 1c       	adc	r10, r6
    1dfe:	b7 1c       	adc	r11, r7
    1e00:	8e 82       	std	Y+6, r8	; 0x06
    1e02:	9f 82       	std	Y+7, r9	; 0x07
    1e04:	a8 86       	std	Y+8, r10	; 0x08
    1e06:	b9 86       	std	Y+9, r11	; 0x09
    1e08:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1e0c:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1e10:	c9 01       	movw	r24, r18
    1e12:	03 2e       	mov	r0, r19
    1e14:	00 0c       	add	r0, r0
    1e16:	aa 0b       	sbc	r26, r26
    1e18:	bb 0b       	sbc	r27, r27
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	99 27       	eor	r25, r25
    1e1e:	88 27       	eor	r24, r24
    1e20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	70 e0       	ldi	r23, 0x00	; 0
    1e2c:	84 2b       	or	r24, r20
    1e2e:	95 2b       	or	r25, r21
    1e30:	a6 2b       	or	r26, r22
    1e32:	b7 2b       	or	r27, r23
    1e34:	b0 9b       	sbis	0x16, 0	; 22
    1e36:	13 c0       	rjmp	.+38     	; 0x1e5e <async+0x104>
    1e38:	c9 01       	movw	r24, r18
    1e3a:	01 96       	adiw	r24, 0x01	; 1
    1e3c:	09 2e       	mov	r0, r25
    1e3e:	00 0c       	add	r0, r0
    1e40:	aa 0b       	sbc	r26, r26
    1e42:	bb 0b       	sbc	r27, r27
    1e44:	dc 01       	movw	r26, r24
    1e46:	99 27       	eor	r25, r25
    1e48:	88 27       	eor	r24, r24
    1e4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1e4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	70 e0       	ldi	r23, 0x00	; 0
    1e56:	84 2b       	or	r24, r20
    1e58:	95 2b       	or	r25, r21
    1e5a:	a6 2b       	or	r26, r22
    1e5c:	b7 2b       	or	r27, r23
    1e5e:	48 1a       	sub	r4, r24
    1e60:	59 0a       	sbc	r5, r25
    1e62:	6a 0a       	sbc	r6, r26
    1e64:	7b 0a       	sbc	r7, r27
    1e66:	14 14       	cp	r1, r4
    1e68:	15 04       	cpc	r1, r5
    1e6a:	16 04       	cpc	r1, r6
    1e6c:	17 04       	cpc	r1, r7
    1e6e:	ac f5       	brge	.+106    	; 0x1eda <async+0x180>
    1e70:	64 e4       	ldi	r22, 0x44	; 68
    1e72:	71 e0       	ldi	r23, 0x01	; 1
    1e74:	ce 01       	movw	r24, r28
    1e76:	0e 94 4c 05 	call	0xa98	; 0xa98 <enqueueByBaseline>
    1e7a:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <timerQ>
    1e7e:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <timerQ+0x1>
    1e82:	30 97       	sbiw	r30, 0x00	; 0
    1e84:	21 f1       	breq	.+72     	; 0x1ece <async+0x174>
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	a4 81       	ldd	r26, Z+4	; 0x04
    1e8c:	b5 81       	ldd	r27, Z+5	; 0x05
    1e8e:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <overflows>
    1e92:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <overflows+0x1>
    1e96:	2a 17       	cp	r18, r26
    1e98:	3b 07       	cpc	r19, r27
    1e9a:	c9 f4       	brne	.+50     	; 0x1ece <async+0x174>
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ea2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ea6:	84 1b       	sub	r24, r20
    1ea8:	95 0b       	sbc	r25, r21
    1eaa:	01 97       	sbiw	r24, 0x01	; 1
    1eac:	31 f4       	brne	.+12     	; 0x1eba <async+0x160>
    1eae:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1eb2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1eb6:	2f 5f       	subi	r18, 0xFF	; 255
    1eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1eba:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1ebe:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1ec2:	ef e6       	ldi	r30, 0x6F	; 111
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	82 60       	ori	r24, 0x02	; 2
    1eca:	80 83       	st	Z, r24
    1ecc:	39 c0       	rjmp	.+114    	; 0x1f40 <async+0x1e6>
    1ece:	ef e6       	ldi	r30, 0x6F	; 111
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8d 7f       	andi	r24, 0xFD	; 253
    1ed6:	80 83       	st	Z, r24
    1ed8:	33 c0       	rjmp	.+102    	; 0x1f40 <async+0x1e6>
    1eda:	66 e4       	ldi	r22, 0x46	; 70
    1edc:	71 e0       	ldi	r23, 0x01	; 1
    1ede:	ce 01       	movw	r24, r28
    1ee0:	0e 94 1b 05 	call	0xa36	; 0xa36 <enqueueByDeadline>
    1ee4:	33 20       	and	r3, r3
    1ee6:	61 f1       	breq	.+88     	; 0x1f40 <async+0x1e6>
    1ee8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <threadPool>
    1eec:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <threadPool+0x1>
    1ef0:	89 2b       	or	r24, r25
    1ef2:	31 f1       	breq	.+76     	; 0x1f40 <async+0x1e6>
    1ef4:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <msgQ>
    1ef8:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <msgQ+0x1>
    1efc:	86 81       	ldd	r24, Z+6	; 0x06
    1efe:	97 81       	ldd	r25, Z+7	; 0x07
    1f00:	a0 85       	ldd	r26, Z+8	; 0x08
    1f02:	b1 85       	ldd	r27, Z+9	; 0x09
    1f04:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <activeStack>
    1f08:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <activeStack+0x1>
    1f0c:	02 80       	ldd	r0, Z+2	; 0x02
    1f0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1f10:	e0 2d       	mov	r30, r0
    1f12:	46 81       	ldd	r20, Z+6	; 0x06
    1f14:	57 81       	ldd	r21, Z+7	; 0x07
    1f16:	60 85       	ldd	r22, Z+8	; 0x08
    1f18:	71 85       	ldd	r23, Z+9	; 0x09
    1f1a:	84 1b       	sub	r24, r20
    1f1c:	95 0b       	sbc	r25, r21
    1f1e:	a6 0b       	sbc	r26, r22
    1f20:	b7 0b       	sbc	r27, r23
    1f22:	72 f4       	brpl	.+28     	; 0x1f40 <async+0x1e6>
    1f24:	81 e2       	ldi	r24, 0x21	; 33
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	0e 94 a8 05 	call	0xb50	; 0xb50 <pop>
    1f2c:	6f e1       	ldi	r22, 0x1F	; 31
    1f2e:	71 e0       	ldi	r23, 0x01	; 1
    1f30:	0e 94 9e 05 	call	0xb3c	; 0xb3c <push>
    1f34:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <activeStack>
    1f38:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <activeStack+0x1>
    1f3c:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <dispatch>
    1f40:	33 20       	and	r3, r3
    1f42:	09 f0       	breq	.+2      	; 0x1f46 <async+0x1ec>
    1f44:	78 94       	sei
    1f46:	ce 01       	movw	r24, r28
    1f48:	df 91       	pop	r29
    1f4a:	cf 91       	pop	r28
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	ff 90       	pop	r15
    1f52:	ef 90       	pop	r14
    1f54:	df 90       	pop	r13
    1f56:	cf 90       	pop	r12
    1f58:	bf 90       	pop	r11
    1f5a:	af 90       	pop	r10
    1f5c:	9f 90       	pop	r9
    1f5e:	8f 90       	pop	r8
    1f60:	7f 90       	pop	r7
    1f62:	6f 90       	pop	r6
    1f64:	5f 90       	pop	r5
    1f66:	4f 90       	pop	r4
    1f68:	3f 90       	pop	r3
    1f6a:	08 95       	ret

00001f6c <sync>:
    1f6c:	cf 92       	push	r12
    1f6e:	df 92       	push	r13
    1f70:	ef 92       	push	r14
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	cf 93       	push	r28
    1f7a:	df 93       	push	r29
    1f7c:	ec 01       	movw	r28, r24
    1f7e:	7b 01       	movw	r14, r22
    1f80:	6a 01       	movw	r12, r20
    1f82:	1f b7       	in	r17, 0x3f	; 63
    1f84:	10 78       	andi	r17, 0x80	; 128
    1f86:	f8 94       	cli
    1f88:	a8 81       	ld	r26, Y
    1f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8c:	10 97       	sbiw	r26, 0x00	; 0
    1f8e:	19 f4       	brne	.+6      	; 0x1f96 <sync+0x2a>
    1f90:	35 c0       	rjmp	.+106    	; 0x1ffc <sync+0x90>
    1f92:	a0 81       	ld	r26, Z
    1f94:	b1 81       	ldd	r27, Z+1	; 0x01
    1f96:	14 96       	adiw	r26, 0x04	; 4
    1f98:	ed 91       	ld	r30, X+
    1f9a:	fc 91       	ld	r31, X
    1f9c:	15 97       	sbiw	r26, 0x05	; 5
    1f9e:	30 97       	sbiw	r30, 0x00	; 0
    1fa0:	c1 f7       	brne	.-16     	; 0x1f92 <sync+0x26>
    1fa2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <current>
    1fa6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <current+0x1>
    1faa:	a2 17       	cp	r26, r18
    1fac:	b3 07       	cpc	r27, r19
    1fae:	11 f0       	breq	.+4      	; 0x1fb4 <sync+0x48>
    1fb0:	11 11       	cpse	r17, r1
    1fb2:	07 c0       	rjmp	.+14     	; 0x1fc2 <sync+0x56>
    1fb4:	11 23       	and	r17, r17
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <sync+0x4e>
    1fb8:	4a c0       	rjmp	.+148    	; 0x204e <sync+0xe2>
    1fba:	78 94       	sei
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	9f ef       	ldi	r25, 0xFF	; 255
    1fc0:	4e c0       	rjmp	.+156    	; 0x205e <sync+0xf2>
    1fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	19 f0       	breq	.+6      	; 0x1fd0 <sync+0x64>
    1fca:	fc 01       	movw	r30, r24
    1fcc:	15 82       	std	Z+5, r1	; 0x05
    1fce:	14 82       	std	Z+4, r1	; 0x04
    1fd0:	3b 83       	std	Y+3, r19	; 0x03
    1fd2:	2a 83       	std	Y+2, r18	; 0x02
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	d5 83       	std	Z+5, r29	; 0x05
    1fd8:	c4 83       	std	Z+4, r28	; 0x04
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <dispatch>
    1fe0:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <current>
    1fe4:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <current+0x1>
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	89 2b       	or	r24, r25
    1fee:	31 f4       	brne	.+12     	; 0x1ffc <sync+0x90>
    1ff0:	11 23       	and	r17, r17
    1ff2:	81 f1       	breq	.+96     	; 0x2054 <sync+0xe8>
    1ff4:	78 94       	sei
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	31 c0       	rjmp	.+98     	; 0x205e <sync+0xf2>
    1ffc:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <current>
    2000:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <current+0x1>
    2004:	99 83       	std	Y+1, r25	; 0x01
    2006:	88 83       	st	Y, r24
    2008:	11 23       	and	r17, r17
    200a:	29 f0       	breq	.+10     	; 0x2016 <sync+0xaa>
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	9b 81       	ldd	r25, Y+3	; 0x03
    2010:	01 97       	sbiw	r24, 0x01	; 1
    2012:	09 f0       	breq	.+2      	; 0x2016 <sync+0xaa>
    2014:	78 94       	sei
    2016:	b6 01       	movw	r22, r12
    2018:	ce 01       	movw	r24, r28
    201a:	f7 01       	movw	r30, r14
    201c:	09 95       	icall
    201e:	f8 2e       	mov	r15, r24
    2020:	09 2f       	mov	r16, r25
    2022:	8f b7       	in	r24, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	19 82       	std	Y+1, r1	; 0x01
    2028:	18 82       	st	Y, r1
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	9b 81       	ldd	r25, Y+3	; 0x03
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	91 05       	cpc	r25, r1
    2032:	38 f0       	brcs	.+14     	; 0x2042 <sync+0xd6>
    2034:	1b 82       	std	Y+3, r1	; 0x03
    2036:	1a 82       	std	Y+2, r1	; 0x02
    2038:	fc 01       	movw	r30, r24
    203a:	15 82       	std	Z+5, r1	; 0x05
    203c:	14 82       	std	Z+4, r1	; 0x04
    203e:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <dispatch>
    2042:	11 23       	and	r17, r17
    2044:	51 f0       	breq	.+20     	; 0x205a <sync+0xee>
    2046:	78 94       	sei
    2048:	8f 2d       	mov	r24, r15
    204a:	90 2f       	mov	r25, r16
    204c:	08 c0       	rjmp	.+16     	; 0x205e <sync+0xf2>
    204e:	8f ef       	ldi	r24, 0xFF	; 255
    2050:	9f ef       	ldi	r25, 0xFF	; 255
    2052:	05 c0       	rjmp	.+10     	; 0x205e <sync+0xf2>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	02 c0       	rjmp	.+4      	; 0x205e <sync+0xf2>
    205a:	8f 2d       	mov	r24, r15
    205c:	90 2f       	mov	r25, r16
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	ff 90       	pop	r15
    2068:	ef 90       	pop	r14
    206a:	df 90       	pop	r13
    206c:	cf 90       	pop	r12
    206e:	08 95       	ret

00002070 <run>:
    2070:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <current>
    2074:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <current+0x1>
    2078:	86 e4       	ldi	r24, 0x46	; 70
    207a:	91 e0       	ldi	r25, 0x01	; 1
    207c:	0e 94 7d 05 	call	0xafa	; 0xafa <dequeue>
    2080:	ec 01       	movw	r28, r24
    2082:	f8 01       	movw	r30, r16
    2084:	93 83       	std	Z+3, r25	; 0x03
    2086:	82 83       	std	Z+2, r24	; 0x02
    2088:	78 94       	sei
    208a:	6c 85       	ldd	r22, Y+12	; 0x0c
    208c:	7d 85       	ldd	r23, Y+13	; 0x0d
    208e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2090:	5f 85       	ldd	r21, Y+15	; 0x0f
    2092:	8a 85       	ldd	r24, Y+10	; 0x0a
    2094:	9b 85       	ldd	r25, Y+11	; 0x0b
    2096:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sync>
    209a:	8f b7       	in	r24, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	63 e2       	ldi	r22, 0x23	; 35
    20a0:	71 e0       	ldi	r23, 0x01	; 1
    20a2:	ce 01       	movw	r24, r28
    20a4:	0e 94 94 05 	call	0xb28	; 0xb28 <insert>
    20a8:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <activeStack>
    20ac:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <activeStack+0x1>
    20b0:	01 90       	ld	r0, Z+
    20b2:	f0 81       	ld	r31, Z
    20b4:	e0 2d       	mov	r30, r0
    20b6:	c2 81       	ldd	r28, Z+2	; 0x02
    20b8:	d3 81       	ldd	r29, Z+3	; 0x03
    20ba:	e0 91 46 01 	lds	r30, 0x0146	; 0x800146 <msgQ>
    20be:	f0 91 47 01 	lds	r31, 0x0147	; 0x800147 <msgQ+0x1>
    20c2:	30 97       	sbiw	r30, 0x00	; 0
    20c4:	a1 f0       	breq	.+40     	; 0x20ee <run+0x7e>
    20c6:	20 97       	sbiw	r28, 0x00	; 0
    20c8:	99 f2       	breq	.-90     	; 0x2070 <run>
    20ca:	86 81       	ldd	r24, Z+6	; 0x06
    20cc:	97 81       	ldd	r25, Z+7	; 0x07
    20ce:	a0 85       	ldd	r26, Z+8	; 0x08
    20d0:	b1 85       	ldd	r27, Z+9	; 0x09
    20d2:	4e 81       	ldd	r20, Y+6	; 0x06
    20d4:	5f 81       	ldd	r21, Y+7	; 0x07
    20d6:	68 85       	ldd	r22, Y+8	; 0x08
    20d8:	79 85       	ldd	r23, Y+9	; 0x09
    20da:	84 1b       	sub	r24, r20
    20dc:	95 0b       	sbc	r25, r21
    20de:	a6 0b       	sbc	r26, r22
    20e0:	b7 0b       	sbc	r27, r23
    20e2:	18 16       	cp	r1, r24
    20e4:	19 06       	cpc	r1, r25
    20e6:	1a 06       	cpc	r1, r26
    20e8:	1b 06       	cpc	r1, r27
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <run+0x7e>
    20ec:	c1 cf       	rjmp	.-126    	; 0x2070 <run>
    20ee:	8f e1       	ldi	r24, 0x1F	; 31
    20f0:	91 e0       	ldi	r25, 0x01	; 1
    20f2:	0e 94 a8 05 	call	0xb50	; 0xb50 <pop>
    20f6:	61 e2       	ldi	r22, 0x21	; 33
    20f8:	71 e0       	ldi	r23, 0x01	; 1
    20fa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <push>
    20fe:	a0 91 1f 01 	lds	r26, 0x011F	; 0x80011f <activeStack>
    2102:	b0 91 20 01 	lds	r27, 0x0120	; 0x800120 <activeStack+0x1>
    2106:	02 c0       	rjmp	.+4      	; 0x210c <run+0x9c>
    2108:	a0 81       	ld	r26, Z
    210a:	b1 81       	ldd	r27, Z+1	; 0x01
    210c:	14 96       	adiw	r26, 0x04	; 4
    210e:	ed 91       	ld	r30, X+
    2110:	fc 91       	ld	r31, X
    2112:	15 97       	sbiw	r26, 0x05	; 5
    2114:	30 97       	sbiw	r30, 0x00	; 0
    2116:	c1 f7       	brne	.-16     	; 0x2108 <run+0x98>
    2118:	cd 01       	movw	r24, r26
    211a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <dispatch>
    211e:	a8 cf       	rjmp	.-176    	; 0x2070 <run>

00002120 <CURRENT_OFFSET>:

Time CURRENT_OFFSET(void) {
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    char status;
    Time now;
    DISABLE(status);
    2128:	2f b7       	in	r18, 0x3f	; 63
    212a:	20 78       	andi	r18, 0x80	; 128
    212c:	f8 94       	cli
    TIMERGET(now);
    212e:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <overflows>
    2132:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <overflows+0x1>
    2136:	ca 01       	movw	r24, r20
    2138:	05 2e       	mov	r0, r21
    213a:	00 0c       	add	r0, r0
    213c:	aa 0b       	sbc	r26, r26
    213e:	bb 0b       	sbc	r27, r27
    2140:	7c 01       	movw	r14, r24
    2142:	dd 24       	eor	r13, r13
    2144:	cc 24       	eor	r12, r12
    2146:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    214a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    214e:	a0 e0       	ldi	r26, 0x00	; 0
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	8c 29       	or	r24, r12
    2154:	9d 29       	or	r25, r13
    2156:	ae 29       	or	r26, r14
    2158:	bf 29       	or	r27, r15
    215a:	b0 9b       	sbis	0x16, 0	; 22
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <CURRENT_OFFSET+0x66>
    215e:	ba 01       	movw	r22, r20
    2160:	6f 5f       	subi	r22, 0xFF	; 255
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	cb 01       	movw	r24, r22
    2166:	77 0f       	add	r23, r23
    2168:	aa 0b       	sbc	r26, r26
    216a:	bb 0b       	sbc	r27, r27
    216c:	bc 01       	movw	r22, r24
    216e:	55 27       	eor	r21, r21
    2170:	44 27       	eor	r20, r20
    2172:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    2176:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    217a:	a0 e0       	ldi	r26, 0x00	; 0
    217c:	b0 e0       	ldi	r27, 0x00	; 0
    217e:	84 2b       	or	r24, r20
    2180:	95 2b       	or	r25, r21
    2182:	a6 2b       	or	r26, r22
    2184:	b7 2b       	or	r27, r23
    ENABLE(status);
    2186:	22 23       	and	r18, r18
    2188:	09 f0       	breq	.+2      	; 0x218c <CURRENT_OFFSET+0x6c>
    218a:	78 94       	sei
    return now - (status ? current->msg->baseline : timestamp);
    218c:	22 23       	and	r18, r18
    218e:	61 f0       	breq	.+24     	; 0x21a8 <CURRENT_OFFSET+0x88>
    2190:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <current>
    2194:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <current+0x1>
    2198:	02 80       	ldd	r0, Z+2	; 0x02
    219a:	f3 81       	ldd	r31, Z+3	; 0x03
    219c:	e0 2d       	mov	r30, r0
    219e:	c2 80       	ldd	r12, Z+2	; 0x02
    21a0:	d3 80       	ldd	r13, Z+3	; 0x03
    21a2:	e4 80       	ldd	r14, Z+4	; 0x04
    21a4:	f5 80       	ldd	r15, Z+5	; 0x05
    21a6:	08 c0       	rjmp	.+16     	; 0x21b8 <CURRENT_OFFSET+0x98>
    21a8:	c0 90 40 01 	lds	r12, 0x0140	; 0x800140 <timestamp>
    21ac:	d0 90 41 01 	lds	r13, 0x0141	; 0x800141 <timestamp+0x1>
    21b0:	e0 90 42 01 	lds	r14, 0x0142	; 0x800142 <timestamp+0x2>
    21b4:	f0 90 43 01 	lds	r15, 0x0143	; 0x800143 <timestamp+0x3>
    21b8:	bc 01       	movw	r22, r24
    21ba:	cd 01       	movw	r24, r26
    21bc:	6c 19       	sub	r22, r12
    21be:	7d 09       	sbc	r23, r13
    21c0:	8e 09       	sbc	r24, r14
    21c2:	9f 09       	sbc	r25, r15
}
    21c4:	ff 90       	pop	r15
    21c6:	ef 90       	pop	r14
    21c8:	df 90       	pop	r13
    21ca:	cf 90       	pop	r12
    21cc:	08 95       	ret

000021ce <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    21ce:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    21d0:	42 31       	cpi	r20, 0x12	; 18
    21d2:	b8 f4       	brcc	.+46     	; 0x2202 <install+0x34>
        char status;
        DISABLE(status);
    21d4:	9f b7       	in	r25, 0x3f	; 63
    21d6:	90 78       	andi	r25, 0x80	; 128
    21d8:	f8 94       	cli
        otable[i] = obj;
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	44 0f       	add	r20, r20
    21de:	55 1f       	adc	r21, r21
    21e0:	da 01       	movw	r26, r20
    21e2:	a8 5b       	subi	r26, 0xB8	; 184
    21e4:	be 4f       	sbci	r27, 0xFE	; 254
    21e6:	ed 93       	st	X+, r30
    21e8:	fc 93       	st	X, r31
        mtable[i] = m;
    21ea:	da 01       	movw	r26, r20
    21ec:	a0 52       	subi	r26, 0x20	; 32
    21ee:	be 4f       	sbci	r27, 0xFE	; 254
    21f0:	6d 93       	st	X+, r22
    21f2:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    21f4:	21 e0       	ldi	r18, 0x01	; 1
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	33 83       	std	Z+3, r19	; 0x03
    21fa:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    21fc:	99 23       	and	r25, r25
    21fe:	09 f0       	breq	.+2      	; 0x2202 <install+0x34>
    2200:	78 94       	sei
    2202:	08 95       	ret

00002204 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    2204:	8c 01       	movw	r16, r24
    2206:	7b 01       	movw	r14, r22
    2208:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    220a:	8f b7       	in	r24, 0x3f	; 63
    220c:	f8 94       	cli
    initialize();
    220e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <initialize>
    ENABLE(1);
    2212:	78 94       	sei
    if (m != NULL)
    2214:	e1 14       	cp	r14, r1
    2216:	f1 04       	cpc	r15, r1
    2218:	41 f0       	breq	.+16     	; 0x222a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	a9 01       	movw	r20, r18
    2220:	60 e0       	ldi	r22, 0x00	; 0
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	cb 01       	movw	r24, r22
    2226:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <async>
    DISABLE(status);
    222a:	8f b7       	in	r24, 0x3f	; 63
    222c:	f8 94       	cli
    idle();
    222e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <idle>

00002232 <__divmodsi4>:
    2232:	05 2e       	mov	r0, r21
    2234:	97 fb       	bst	r25, 7
    2236:	1e f4       	brtc	.+6      	; 0x223e <__divmodsi4+0xc>
    2238:	00 94       	com	r0
    223a:	0e 94 30 11 	call	0x2260	; 0x2260 <__negsi2>
    223e:	57 fd       	sbrc	r21, 7
    2240:	07 d0       	rcall	.+14     	; 0x2250 <__divmodsi4_neg2>
    2242:	0e 94 38 11 	call	0x2270	; 0x2270 <__udivmodsi4>
    2246:	07 fc       	sbrc	r0, 7
    2248:	03 d0       	rcall	.+6      	; 0x2250 <__divmodsi4_neg2>
    224a:	4e f4       	brtc	.+18     	; 0x225e <__divmodsi4_exit>
    224c:	0c 94 30 11 	jmp	0x2260	; 0x2260 <__negsi2>

00002250 <__divmodsi4_neg2>:
    2250:	50 95       	com	r21
    2252:	40 95       	com	r20
    2254:	30 95       	com	r19
    2256:	21 95       	neg	r18
    2258:	3f 4f       	sbci	r19, 0xFF	; 255
    225a:	4f 4f       	sbci	r20, 0xFF	; 255
    225c:	5f 4f       	sbci	r21, 0xFF	; 255

0000225e <__divmodsi4_exit>:
    225e:	08 95       	ret

00002260 <__negsi2>:
    2260:	90 95       	com	r25
    2262:	80 95       	com	r24
    2264:	70 95       	com	r23
    2266:	61 95       	neg	r22
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	8f 4f       	sbci	r24, 0xFF	; 255
    226c:	9f 4f       	sbci	r25, 0xFF	; 255
    226e:	08 95       	ret

00002270 <__udivmodsi4>:
    2270:	a1 e2       	ldi	r26, 0x21	; 33
    2272:	1a 2e       	mov	r1, r26
    2274:	aa 1b       	sub	r26, r26
    2276:	bb 1b       	sub	r27, r27
    2278:	fd 01       	movw	r30, r26
    227a:	0d c0       	rjmp	.+26     	; 0x2296 <__udivmodsi4_ep>

0000227c <__udivmodsi4_loop>:
    227c:	aa 1f       	adc	r26, r26
    227e:	bb 1f       	adc	r27, r27
    2280:	ee 1f       	adc	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	a2 17       	cp	r26, r18
    2286:	b3 07       	cpc	r27, r19
    2288:	e4 07       	cpc	r30, r20
    228a:	f5 07       	cpc	r31, r21
    228c:	20 f0       	brcs	.+8      	; 0x2296 <__udivmodsi4_ep>
    228e:	a2 1b       	sub	r26, r18
    2290:	b3 0b       	sbc	r27, r19
    2292:	e4 0b       	sbc	r30, r20
    2294:	f5 0b       	sbc	r31, r21

00002296 <__udivmodsi4_ep>:
    2296:	66 1f       	adc	r22, r22
    2298:	77 1f       	adc	r23, r23
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	1a 94       	dec	r1
    22a0:	69 f7       	brne	.-38     	; 0x227c <__udivmodsi4_loop>
    22a2:	60 95       	com	r22
    22a4:	70 95       	com	r23
    22a6:	80 95       	com	r24
    22a8:	90 95       	com	r25
    22aa:	9b 01       	movw	r18, r22
    22ac:	ac 01       	movw	r20, r24
    22ae:	bd 01       	movw	r22, r26
    22b0:	cf 01       	movw	r24, r30
    22b2:	08 95       	ret

000022b4 <setjmp>:
    22b4:	dc 01       	movw	r26, r24
    22b6:	2d 92       	st	X+, r2
    22b8:	3d 92       	st	X+, r3
    22ba:	4d 92       	st	X+, r4
    22bc:	5d 92       	st	X+, r5
    22be:	6d 92       	st	X+, r6
    22c0:	7d 92       	st	X+, r7
    22c2:	8d 92       	st	X+, r8
    22c4:	9d 92       	st	X+, r9
    22c6:	ad 92       	st	X+, r10
    22c8:	bd 92       	st	X+, r11
    22ca:	cd 92       	st	X+, r12
    22cc:	dd 92       	st	X+, r13
    22ce:	ed 92       	st	X+, r14
    22d0:	fd 92       	st	X+, r15
    22d2:	0d 93       	st	X+, r16
    22d4:	1d 93       	st	X+, r17
    22d6:	cd 93       	st	X+, r28
    22d8:	dd 93       	st	X+, r29
    22da:	ff 91       	pop	r31
    22dc:	ef 91       	pop	r30
    22de:	8d b7       	in	r24, 0x3d	; 61
    22e0:	8d 93       	st	X+, r24
    22e2:	8e b7       	in	r24, 0x3e	; 62
    22e4:	8d 93       	st	X+, r24
    22e6:	8f b7       	in	r24, 0x3f	; 63
    22e8:	8d 93       	st	X+, r24
    22ea:	ed 93       	st	X+, r30
    22ec:	fd 93       	st	X+, r31
    22ee:	88 27       	eor	r24, r24
    22f0:	99 27       	eor	r25, r25
    22f2:	09 94       	ijmp

000022f4 <longjmp>:
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	91 05       	cpc	r25, r1
    22fc:	81 1d       	adc	r24, r1
    22fe:	2d 90       	ld	r2, X+
    2300:	3d 90       	ld	r3, X+
    2302:	4d 90       	ld	r4, X+
    2304:	5d 90       	ld	r5, X+
    2306:	6d 90       	ld	r6, X+
    2308:	7d 90       	ld	r7, X+
    230a:	8d 90       	ld	r8, X+
    230c:	9d 90       	ld	r9, X+
    230e:	ad 90       	ld	r10, X+
    2310:	bd 90       	ld	r11, X+
    2312:	cd 90       	ld	r12, X+
    2314:	dd 90       	ld	r13, X+
    2316:	ed 90       	ld	r14, X+
    2318:	fd 90       	ld	r15, X+
    231a:	0d 91       	ld	r16, X+
    231c:	1d 91       	ld	r17, X+
    231e:	cd 91       	ld	r28, X+
    2320:	dd 91       	ld	r29, X+
    2322:	ed 91       	ld	r30, X+
    2324:	fd 91       	ld	r31, X+
    2326:	0d 90       	ld	r0, X+
    2328:	f8 94       	cli
    232a:	fe bf       	out	0x3e, r31	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	ed bf       	out	0x3d, r30	; 61
    2330:	ed 91       	ld	r30, X+
    2332:	fd 91       	ld	r31, X+
    2334:	09 94       	ijmp

00002336 <_exit>:
    2336:	f8 94       	cli

00002338 <__stop_program>:
    2338:	ff cf       	rjmp	.-2      	; 0x2338 <__stop_program>
